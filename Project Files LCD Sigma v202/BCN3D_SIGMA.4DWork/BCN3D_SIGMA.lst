file C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Gen4-uLCD-35DCT-CLB.fnc

000001  000001  #platform "Gen4-uLCD-35DCT-CLB"
000002  000001  #platform "Gen4-uLCD-35DCT-CLB"
000003  000008  */
000004  000009      #constant Gen4_ULCD_35DCT_CLB_DIABLO16_GFX
000005  000009      #constant Gen4_ULCD_35DCT_CLB_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318  //------------------------------------------------------------------------------
003998  004319  // FILEIO Error Code Constants
003999  004320  //------------------------------------------------------------------------------
004000  004321  #CONST
004001  004347  #END
004002  004348        
004003  004349  //------------------------------------------------------------------------------
004004  004350  // DISK struct offsets
004005  004351  //------------------------------------------------------------------------------
004006  004352  #CONST
004007  004369  #END
004008  004370        
004009  004371  //------------------------------------------------------------------------------
004010  004372  // FILE struct offsets
004011  004373  //------------------------------------------------------------------------------
004012  004374  #CONST
004013  004393  #END
004014  004394        
004015  004395        
004016  004396  //------------------------------------------------------------------//
004017  004397  //        Sound Class Services
004018  004398  //------------------------------------------------------------------//
004019  004399        
004020  004400  func snd_Volume("var"), 0;
004021  004401  // Syntax: snd_Volume("var");
004022  004402  // Usage : snd_Volume(30);
004023  004403  // Notes : set sound playback volume.  Var must
004024  004404  //       : be in the range from 8 (min volume)
004025  004405  //       : to 127 (max volume). If var is less
004026  004406  //       : than 8 volume is set to 8, and if
004027  004407  //       : var > 127 it is set to 127.
004028  004408        
004029  004409  func snd_Pitch("pitch"), 1;
004030  004410  // func snd_Pitch("freq"), 1;
004031  004411  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004032  004412  // Notes : sets the samples playback rate to a different frequency
004033  004413  //       : The minimum value is 4khz
004034  004414  //       : Setting the pitch to zero restores the original sample rate
004035  004415  //       : Return value is the samples original sample rate.
004036  004416        
004037  004417  func snd_BufSize("var"), 0;
004038  004418  // Syntax: snd_BufSize("var");
004039  004419  // Usage : snd_BufSize(2);
004040  004420  // Notes : specify the a memory chunk size for the wavefile buffer.
004041  004421  //       : default size 1024 bytes.
004042  004422  //       : 0 = 1024 bytes (default)
004043  004423  //       : 1 = 2048 bytes
004044  004424  //       : 2 = 4096 bytes
004045  004425  //       : 3 = 8192 bytes
004046  004426        
004047  004427  func snd_Stop(), 0;
004048  004428  // Syntax: snd_Stop();
004049  004429  // Usage : snd_Stop();
004050  004430  // Notes : stop any sound that is playing, releasing
004051  004431  //       : buffers and closes any open wav file.
004052  004432        
004053  004433  func snd_Pause(), 0;
004054  004434  // Syntax: snd_Pause();
004055  004435  // Usage : snd_Pause();
004056  004436  // Notes : pauses any sound that is playing, does nothing
004057  004437  //       : until sound is resumed with snd_Continue().
004058  004438  //       : The sample cam be terminated with snd_Stop.
004059  004439  //       : buffers and closes any open wav file.
004060  004440        
004061  004441  func snd_Continue(), 0;
004062  004442  // Syntax: snd_Continue();
004063  004443  // Usage : snd_Continue();
004064  004444  // Notes : resume any sound that is paused by snd_Pause.
004065  004445        
004066  004446  func snd_Playing(), 1;
004067  004447  // Syntax: snd_Playing();
004068  004448  // Usage : r := snd_Playing();
004069  004449  // Notes : returns 0 if sound has finished playing,
004070  004450  //       : else return number of 512 byte blocks to go.
004071  004451        
004072  004452  func snd_Freq("Freq", "Duration"), 1;
004073  004453  // Syntax: snd_Freq("Freq", "Duration");
004074  004454  // Usage : r := snd_Freq(1000, 2000);
004075  004455  // Notes : Returns 0 if note cannot be played because a wav file is playing
004076  004456  //       : else return True.
004077  004457  //       : Minimum Freq is 20
004078  004458  //       : This will produce a pure Square wave and is designed for driving
004079  004459  //       : Piezo transducers which require this sort of drive. It can also be
004080  004460  //       : used to drive the amp on displays with audio.
004081  004461        
004082  004462        
004083  004463  func __reserved60(), 0; // do not remove
004084  004464  func __reserved61(), 0; // do not remove
004085  004465  func __reserved62(), 0; // do not remove
004086  004466        
004087  004467  //=========================================================================================================
004088  004468  // String functions
004089  004469  //=========================================================================================================
004090  004470        
004091  004471  func str_Ptr("&var"), 1;
004092  004472  // Syntax: str_Ptr(&var);
004093  004473  // Usage : p := str_Ptr(&var);
004094  004474  // Notes : return a byte pointer to a word region
004095  004475        
004096  004476  func str_GetD("&ptr", "&var"), 1;
004097  004477  // Syntax: str_GetD(&ptr, &var);
004098  004478  // Usage : ok := str_GetD(&ptr, &var);
004099  004479  // Notes : convert number in a string to DWORD ( myvar[2] )
004100  004480  //       : returns true if function succeeds, advancing ptr
004101  004481        
004102  004482  func str_GetW("&ptr", "&var"), 1;
004103  004483  // Syntax: str_GetW(&ptr, &var);
004104  004484  // Usage : ok := str_GetW(&ptr, &var);
004105  004485  // Notes : convert number in a string to WORD ( myvar )
004106  004486  //       : returns true if function succeeds, advancing ptr
004107  004487        
004108  004488  func str_GetHexW("&ptr", "&var"), 1;
004109  004489  // Syntax: str_GetHexW(&ptr, &var);
004110  004490  // Usage : ok := str_GetHexW(&ptr, &var);
004111  004491  // Notes : convert HEX number in a string to WORD ( myvar )
004112  004492  //       : returns true if function succeeds, advancing ptr
004113  004493        
004114  004494  func str_GetC("&ptr", "&var"), 1;
004115  004495  // Syntax: str_GetC(&ptr, &var);
004116  004496  // Usage : ok := str_GetC(&ptr, &var);
004117  004497  // Notes : get a valid ascii char in a string to WORD ( myvar )
004118  004498  //       : returns true if function succeeds, advancing ptr
004119  004499        
004120  004500  func str_GetByte("ptr"), 1;
004121  004501  // Syntax: str_GetByte(ptr);
004122  004502  // Usage : myvar := str_GetByte(ptr);
004123  004503  // Notes : get a byte to myvar
004124  004504  //       : returns value
004125  004505        
004126  004506  func str_GetWord("ptr"), 1;
004127  004507  // Syntax: GetWord(ptr);
004128  004508  // Usage : GetWord(ptr);
004129  004509  // Notes : get a word to myvar
004130  004510  //       : returns value
004131  004511        
004132  004512  func str_PutByte("ptr","val"), 0;
004133  004513  // Syntax: str_PutByte(ptr);
004134  004514  // Usage : myvar := str_PutByte(ptr);
004135  004515  // Notes : put a byte at ptr
004136  004516  //       : returns value
004137  004517        
004138  004518  func str_PutWord("ptr","val"), 0;
004139  004519  // Syntax: str_PutWord("ptr","val");
004140  004520  // Usage : str_PutWord(p,100);
004141  004521  // Notes : put word 100 at current pointer location
004142  004522  //       : returns value
004143  004523        
004144  004524  func str_Match("&ptr", "*str"), 1;
004145  004525  // Syntax: str_Match(&ptr, *str);
004146  004526  // Usage : r := str_Match(&p, "hello");
004147  004527  // Notes : Case sensitive match
004148  004528  //       : returns true if function succeded, andvancing pointer to position past
004149  004529  //       : the matched item. Note that any whitespace characters are skipped
004150  004530  //       : in the source string prior to the test.
004151  004531        
004152  004532  func str_MatchI("&ptr", "*str"), 1;
004153  004533  // Syntax: str_MatchI(&ptr, *str);
004154  004534  // Usage : r := str_MatchI(&p, "hello");
004155  004535  // Notes : Case insensitive match
004156  004536  //       : returns true if function succeded, andvancing pointer to position past
004157  004537  //       : the matched item. Note that any whitespace characters are skipped
004158  004538  //       : in the source string prior to the test.
004159  004539        
004160  004540  func str_Find("&ptr", "*str"), 1;
004161  004541  // Syntax: str_Find(&ptr, *str);
004162  004542  // Usage : n := str_Find(&p, "hello");
004163  004543  // Notes : given the address of a pointer to a source string as the
004164  004544  //       : first argument, and a pointer to a test string as the second
004165  004545  //       : argument, attempt to find the position of the matching string
004166  004546  //       : in the source string. The test is performed with case sensitivity.
004167  004547  //       : return 0 if not found, else returns the address of the first
004168  004548  //       : character of the match. NB:- The source pointer is not altered.
004169  004549        
004170  004550  func str_FindI("&ptr", "*str"), 1;
004171  004551  // Syntax: str_Find(&ptr, *str);
004172  004552  // Usage : n := str_Find(&p, "hello");
004173  004553  // Notes : given the address of a pointer to a source string as the
004174  004554  //       : first argument, and a pointer to a test string as the second
004175  004555  //       : argument, attempt to find the position of the matching string
004176  004556  //       : in the source string. The test is performed with no case
004177  004557  //       : sensitivity, eg upper and lower case chars are accepted.
004178  004558  //       : return 0 if not found, else returns the address of the first
004179  004559  //       : character of the match. NB:- The source pointer is not altered.
004180  004560        
004181  004561  func str_Length("ptr"), 1;
004182  004562  // Syntax: str_Length(ptr);
004183  004563  // Usage : len := str_Ptr(mystring);
004184  004564  // Notes : return the length of a byte aligned string excluding terminator
004185  004565        
004186  004566  func str_Printf("&ptr", "*format"), 1;
004187  004567  // Syntax: str_Printf("&ptr", "*format");
004188  004568  // Usage : r := str_Printf(&p, "hello");
004189  004569  // Notes : refer to documentation
004190  004570  //       :
004191  004571        
004192  004572  func str_Cat("dest","src"), 1;
004193  004573  // Syntax: str_Append("&dest","&src");
004194  004574  // Usage : str_Append(&buf,"Hello");
004195  004575  // Notes : Appends a copy of the source string to the destination string.
004196  004576  //       : The terminating null character in destination is overwritten by
004197  004577  //       : the first character of source, and a new null-character is appended
004198  004578  //       : at the end of the new string formed by the concatenation of both in destination.
004199  004579  //       : returns destination.
004200  004580        
004201  004581  func str_CatN("dest","src","count"), 1;
004202  004582  // Syntax: str_Append("&dest","&src","count");
004203  004583  // Usage : str_Append(&buf,"Monday",3);
004204  004584  // Notes : Appends a copy of the source string to the destination string.
004205  004585  //       : The number of characters copied is limited by "count".
004206  004586  //       : The terminating null character in destination is overwritten by
004207  004587  //       : the first character of source, and a new null-character is appended
004208  004588  //       : at the end of the new string formed by the concatenation of both in destination.
004209  004589  //       : returns destination.
004210  004590        
004211  004591        
004212  004592  func str_ByteMove("src", "dest", "count"), 1;
004213  004593  // Syntax   : str_ByteMove(src, dest, bytecount);
004214  004594  // Input    : STR *source points to byte aligned source.
004215  004595  //          : STR *dest   points to byte aligned destination.
004216  004596  //          : VAR count   number of bytes to transfer.
004217  004597  // Usage    : nextpos := str_ByteMove(s, d, 100);
004218  004598  // Notes    : copy bytes from "src" to "dest", stopping only
004219  004599  //          : when "count" is exhausted.
004220  004600  //          : No terminator is appended, it is purely a
004221  004601  //          : byte copy, and any zeroes encountered will
004222  004602  //          : also be copied.
004223  004603  // Returns  : returns a pointer to the end of the destination
004224  004604  //          : (which is "dest" + "count")
004225  004605        
004226  004606        
004227  004607  func str_Copy("dest", "src"), 1;
004228  004608  // Syntax   : str_Copy(dest, src);
004229  004609  // Input    : STR *dest   points to byte aligned destination.
004230  004610  //          : STR *source points to byte aligned source.
004231  004611  // Usage    : nextplace := str_Copy(d, s);
004232  004612  // Notes    : copy a string from "src" to "dest", stopping only
004233  004613  //          : when the end of source string "src" is encountered
004234  004614  //          : (0x00 terminator).
004235  004615  //          : The terminator is always appended, even if "src" is
004236  004616  //          : an empty string.
004237  004617  // Returns  : returns a pointer to the 0x00 string terminator at
004238  004618  //          : end of "dest" (which is "dest" + str_Length(src); )
004239  004619        
004240  004620        
004241  004621  func str_CopyN("dest", "src", "count"), 1;
004242  004622  // Syntax   : str_CopyN(dest, src, bytecount);
004243  004623  // Input    : STR *dest   points to byte aligned destination.
004244  004624  //          : STR *source points to byte aligned source.
004245  004625  //          : VAR count   max number of chars to copy.
004246  004626  // Usage    : nextplace := str_CopyN(d, s, 100);
004247  004627  // Notes    : copy a string from "src" to "dest", stopping only
004248  004628  //          : when "count" is exhausted, or end of source
004249  004629  //          : string "str" is encountered (0x00 string terminator).
004250  004630  //          : The terminator is always appended, even if
004251  004631  //          : "count" is zero, or "src" is a null string.
004252  004632  // Returns  : returns a pointer to the 0x00 string terminator
004253  004633  //          : (which is "dest" + whatever was copied)
004254  004634        
004255  004635        
004256  004636  func __reserved63(), 0; // do not remove
004257  004637  func __reserved64(), 0; // do not remove
004258  004638  func __reserved65(), 0; // do not remove
004259  004639  func __reserved66(), 0; // do not remove
004260  004640        
004261  004641  //=========================================================================================================
004262  004642  // FLASH memory functions
004263  004643  //=========================================================================================================
004264  004644  func flash_GetByte("bank", "ptr"), 1;
004265  004645  // Syntax   : flash_GetByte(bank, ptr);
004266  004646  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004267  004647  // Notes    : Reads a single byte from any flash location.
004268  004648  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004269  004649  //          : which is the header signature for a valid program.
004270  004650  // Returns  : the byte value from the location
004271  004651        
004272  004652        
004273  004653  func flash_GetWord("bank", "ptr"), 1;
004274  004654  // Syntax   : flash_GetWord(bank, ptr);
004275  004655  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004276  004656  // Notes    : Reads a single word from any flash location.
004277  004657  //          : The pointer is byte aligned.
004278  004658  //          : If the bank is read protected, only the first word can be read
004279  004659  //          : which is the header signature for a valid program (0xAA55).
004280  004660  // Returns  : the byte value from the location
004281  004661        
004282  004662        
004283  004663  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004284  004664  // Syntax   : flash_Copy(bank, ptr);
004285  004665  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004286  004666  // Notes    : Copies bytes from any flash locations to a user buffer.
004287  004667  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004288  004668  //          : If the bank is read protected, 0 bytes will be read
004289  004669  //          : which is the header signature for a valid program (0xAA55).
004290  004670  // Returns  : the count of bytes transferred.
004291  004671        
004292  004672        
004293  004673  func flash_Run("bank"), 1;
004294  004674  // Syntax    : flash_Run(bankx);
004295  004675  // Usage     : res := flash_Run(FLASHBANK_5);
004296  004676  // Notes     : Restarts the processor, running code from the required
004297  004677  //           : flash bank. bank may be a variable, or one of the
004298  004678  //           : pre-defined constants:-
004299  004679  //           :    FLASHBANK_0                 //0x00
004300  004680  //           :    FLASHBANK_1                 //0x01
004301  004681  //           :    FLASHBANK_2                 //0x02
004302  004682  //           :    FLASHBANK_3                 //0x03
004303  004683  //           :    FLASHBANK_4                 //0x04
004304  004684  //           :    FLASHBANK_5                 //0x05
004305  004685  // returns    : This function should net return as it restarts
004306  004686  //        : the processor and jumps to the required bank,
004307  004687  //        : If it does return, -1 indicates incorrect/invalid
004308  004688  //        : bank number, and -2 indicates no valid program
004309  004689  //        : in the selected bank.
004310  004690        
004311  004691  func flash_Bank(), 1;
004312  004692  // Syntax   : flash_Bank();
004313  004693  // Usage    : myvar := flash_Bank();
004314  004694  // Notes    : Identifies which flash bank the code is running from.
004315  004695  // Returns  : The FLASH bank that code is currently running from, 0-5.
004316  004696        
004317  004697        
004318  004698  func flash_EraseBank("bank", "confirmation"), 1;
004319  004699  // Syntax   : flash_EraseBank(bank, confirmation);
004320  004700  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004321  004701  // Notes    : This function should be used with extreme caution.
004322  004702  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004323  004703  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004324  004704  //          : a protected bank will not be erased, and function will return with 0
004325  004705  //          : If the destination bank is the same as the execution bank, the processor will reset
004326  004706  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004327  004707  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004328  004708  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004329  004709  // Returns  : returns true if the function succeeded
004330  004710  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004331  004711        
004332  004712  func flash_LoadFile("bank", "filename"), 1;
004333  004713  // Syntax   : flash_LoadFile(bank, ptr);
004334  004714  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004335  004715  // Notes    : Copies a file from uSD to the required flashbank.
004336  004716  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004337  004717  // Returns  : returns true if the function succeeded.
004338  004718        
004339  004719        
004340  004720  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004341  004721  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004342  004722  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004343  004723  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004344  004724  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004345  004725  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004346  004726  // Returns  : returns true if the function succeeded.
004347  004727        
004348  004728        
004349  004729  func flash_putstr("bank", "ptr"), 1;
004350  004730  // Syntax   : flash_putstr(bank, ptr);
004351  004731  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004352  004732  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004353  004733  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004354  004734  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004355  004735        
004356  004736  func flash_Blit16("bank", "offset", "count"), 1;
004357  004737  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004358  004738  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004359  004739  // Notes    : Blit an image to a GRAM window from FLASH storage.
004360  004740  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004361  004741  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004362  004742        
004363  004743  func flash_Blit8("bank", "offset", "count"), 1;
004364  004744  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004365  004745  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004366  004746  // Notes    : Blit an image to a GRAM window from FLASH storage.
004367  004747  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004368  004748  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004369  004749        
004370  004750  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004371  004751  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004372  004752  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004373  004753  // Notes    : Blit an image to a GRAM window from FLASH storage.
004374  004754  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004375  004755  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004376  004756        
004377  004757  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004378  004758  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004379  004759  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004380  004760  // Notes    : Blit an image to a GRAM window from FLASH storage.
004381  004761  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004382  004762  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004383  004763        
004384  004764  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004385  004765  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004386  004766  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004387  004767  // Notes    : Blit an image to a GRAM window from FLASH storage.
004388  004768  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004389  004769  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004390  004770        
004391  004771  func flash_Exec("bank", "arglistptr"), 1;
004392  004772  // Syntax: res := flash_Exec("bank","arglistptr");
004393  004773  // Usage : res := flash_Exec("bank","arglistptr");
004394  004774  // Notes : returns like a function, current program
004395  004775  //       : calling program is kept active and control returns to it.
004396  004776  //       : If arglistptr is 0, no arguments are passed, else
004397  004777  //       : arglist points to an array, the first element being
004398  004778  //       : the number of elements in the array.
004399  004779  //       : func 'main' in the called bank accepts the arguments.
004400  004780  // WARNING Not currently implemented!
004401  004781        
004402  004782        
004403  004783  func __reserved68(), 0; // do not remove
004404  004784  func __reserved69(), 0; // do not remove
004405  004785  func __reserved70(), 0; // do not remove
004406  004786        
004407  004787  //=========================================================================================================
004408  004788  // I/O and hardware functions
004409  004789  //=========================================================================================================
004410  004790        
004411  004791        
004412  004792        
004413  004793        
004414  004794  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004415  004795  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004416  004796  // Syntax: pin_Pulseout(pin, value);
004417  004797  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004418  004798  // Notes : only available on PA0 to PA9
004419  004799  //       : Invert the state of an output for "value" milliseconds.
004420  004800  //       : pulseout is non blocking, that is, code execution may continue while
004421  004801  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004422  004802  //       : If not already an output, pin is automatically made a push/pull output,
004423  004803  //       : and the last state of its output latch will determine pulse polarity.
004424  004804  //       : It's its open drain state is not altered if the pin was already an output.
004425  004805  //       : If pulseout is called while pulseout is still active, the pulse timer
004426  004806  //       : will simply be updated with the new "value" and the pulse will continue
004427  004807  //       : with the extended value.
004428  004808  //       : returns true if the pin number is legal (usually ignored)
004429  004809        
004430  004810        
004431  004811  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004432  004812  // Syntax: pin_Counter(pin, mode, userfunc);
004433  004813  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004434  004814  // Notes : only available on PA4 to PA9
004435  004815  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004436  004816  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004437  004817  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004438  004818  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004439  004819  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004440  004820  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004441  004821  //       : The pin may be configured as an input or output, the function behaves the same.
004442  004822  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004443  004823  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004444  004824  //       : "mode" has the following effect:-
004445  004825  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004446  004826  //       : mode COUNT_RISE(1) = increment on every rising edge
004447  004827  //       : mode COUNT_FALL(2) = increment on every falling edge
004448  004828  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004449  004829        
004450  004830  //------------------------------------------------------------------//
004451  004831  // pin counter mode constants                                       //
004452  004832  //------------------------------------------------------------------//
004453  004833  #CONST
004454  004838  #END
004455  004839        
004456  004840  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004457  004841  // Syntax: Qencoder1(pinA, pinB, mode);
004458  004842  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004459  004843  // Notes : not available on pins PA14 and PA15
004460  004844  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004461  004845  //       : or written to at any time with peekW and pokeW using the following constants:-
004462  004846  //       : It is necessary to configure the pins first, depending on your requirements, eg
004463  004847  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004464  004848  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004465  004849  //       : Returns true if the pin numbers are legal (usually ignored)
004466  004850  //    QEN1_COUNTER_LO
004467  004851  //    QEN1_COUNTER_HI
004468  004852  //    QEN1_DELTA This is reset to 0 when read
004469  004853        
004470  004854  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004471  004855  // Syntax: Qencoder2(pinA, pinB, mode);
004472  004856  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004473  004857  // Notes : not available on pins PA14 and PA15
004474  004858  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004475  004859  //       : or written to at any time with peekW and pokeW using the following constants:-
004476  004860  //       : It is necessary to configure the pins first, depending on your requirements, eg
004477  004861  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004478  004862  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004479  004863  //       : Returns true if the pin numbers are legal (usually ignored)
004480  004864  //    QEN2_COUNTER_LO
004481  004865  //    QEN2_COUNTER_HI
004482  004866  //    QEN2_DELTA This is reset to 0 when read
004483  004867        
004484  004868        
004485  004869  func Qencoder1Reset(), 0;
004486  004870  // Syntax: Qencoder1Reset();
004487  004871  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004488  004872  // Notes :
004489  004873  //    QEN1_COUNTER_LO is reset to zero
004490  004874  //    QEN1_COUNTER_HI is reset to zero
004491  004875  //    QEN1_DELTA is reset to zero
004492  004876        
004493  004877  func Qencoder2Reset(), 0;
004494  004878  // Syntax: Qencoder2Reset();
004495  004879  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004496  004880  // Notes :
004497  004881  //    QEN2_COUNTER_LO is reset to zero
004498  004882  //    QEN2_COUNTER_HI is reset to zero
004499  004883  //    QEN2_DELTA is reset to zero
004500  004884        
004501  004885        
004502  004886  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004503  004887  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004504  004888  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004505  004889  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004506  004890  //       : Invert the state of an output at a "freq" freuency "count" times.
004507  004891  //       : PulseoutCount is non blocking, that is, code execution may continue while
004508  004892  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004509  004893  //       : If not already an output, pin is automatically made a push/pull output,
004510  004894  //       : and the last state of its output latch will determine pulse polarity.
004511  004895  //       : It's its open drain state is not altered if the pin was already an output.
004512  004896  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004513  004897  //       : will simply have the new "value" added to it.
004514  004898  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004515  004899  //       : returns true if the pin number is legal (usually ignored)
004516  004900        
004517  004901  func __reserved72(), 0; // do not remove
004518  004902        
004519  004903  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004520  004904  // Syntax: pwm_Init(pin, value);
004521  004905  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004522  004906  // Notes : only available on PA4 to PA9
004523  004907  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004524  004908  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004525  004909  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004526  004910  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004527  004911  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004528  004912  //       :                    : Repetition rate ~50hz or 20ms
004529  004913  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004530  004914  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004531  004915  //       : pwm_Init is non blocking and the pwm continues until turn off
004532  004916  //       : Returns true if the pin number is legal (usually ignored)
004533  004917        
004534  004918  //------------------------------------------------------------------------------
004535  004919  // PWM Constants
004536  004920  //------------------------------------------------------------------------------
004537  004921  #CONST
004538  004934  #END
004539  004935        
004540  004936  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004541  004937  // Syntax   : OW_Reset(PA0);
004542  004938  // Usage    : OW_Reset(PA0);
004543  004939  // Notes    : Only available on PA0 to PA13
004544  004940  //          : Resets  ONEWIRE device
004545  004941  //          : Returns the status, 0 = ACK.
004546  004942  //          :
004547  004943        
004548  004944  func OW_Read("pin"), 1;                              // read data from 1wire bus
004549  004945  // Syntax   : OW_Read(PA0);
004550  004946  // Usage    : arg1 := OW_Read(PA0);
004551  004947  // Notes    : Only available on PA0 to PA13
004552  004948  //          : Reads value of the ONEWIRE pin
004553  004949  //          : that was previously selected for ONEWIRE comms.
004554  004950  //          :
004555  004951  //          : pin = 0 : the next byte from the ONEWIRE bus
004556  004952        
004557  004953  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004558  004954  // Syntax   : OW_Read9(PA0);
004559  004955  // Usage    : OW_Read9(PA0);
004560  004956  // Notes    : Only available on PA0 to PA13
004561  004957  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004562  004958  //          : that was previously selected for ONEWIRE comms.
004563  004959  //          :
004564  004960  //          : read the 9 bits from the ONEWIRE bus
004565  004961        
004566  004962  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004567  004963  // Syntax   : OW_Write(PA0, arg);
004568  004964  // Usage    : OW_Write(PA0, arg);
004569  004965  // Notes    : Only available on PA0 to PA13
004570  004966  //          : Sends ONEWIRE data on the appropriate
004571  004967  //          : pin that was previously  selected as ONEWIRE comms.
004572  004968  //          :
004573  004969  //          : write arg to the ONEWIRE bus
004574  004970        
004575  004971  func __reserved77(), 0; // do not remove
004576  004972  func __reserved78(), 0; // do not remove
004577  004973        
004578  004974  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004579  004975  // Syntax: sys_GetDateVar(&year, &month, &day);
004580  004976  // Usage : sys_GetDateVar(&year, &month, &day);
004581  004977  // Notes : Retrieves the date values into variables
004582  004978        
004583  004979  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004584  004980  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004585  004981  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004982  // Notes : Retrieves the time values into variables
004587  004983        
004588  004984  func sys_PmmC(), 0;
004589  004985  // Syntax: sys_PmmC();
004590  004986  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004591  004987  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004592  004988  //       : Can be captured to a buffer using the to( function
004593  004989  //       : Returns nothing.
004594  004990        
004595  004991  func sys_Driver(), 0;
004596  004992  // Syntax: sys_Driver();
004597  004993  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004598  004994  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004599  004995  //       : Can be captured to a buffer using the to( function
004600  004996  //       : Returns nothing.
004601  004997        
004602  004998  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004603  004999  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004604  005000  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004605  005001  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004606  005002  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004607  005003  //       : elements in each buffer. This will need to be greater than "width" for negative
004608  005004  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004609  005005  //       : pass 0 as the address for any unused traces
004610  005006  //       : X position is incremented each point by "xstep" pixels.
004611  005007  //       : Y values are derived from a Y buffer "newy" (signed values).
004612  005008  //       : 2 buffers need to be supplied, "newy" contains new
004613  005009  //       : points to be drawn, "oldy" contains most recent set
004614  005010  //       : of points to be un-drawn. After the waveform is drawn,
004615  005011  //       : "newy" buffer is automatically copied to "oldy" buffer.
004616  005012        
004617  005013        
004618  005014  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004619  005015  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004620  005016  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004621  005017  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004622  005018  //       : and calls "COMPLETEfunction" when done.
004623  005019  //       : "rate" is samples in 100 of samples per second
004624  005020  //       : Any unused IOx pins should have their buffer addresses set to 0
004625  005021  //       : For performance reasons samples are taken in chunks of 32, thus if you
004626  005022  //       : request 33 samples there will be a delay of 31 samples before
004627  005023  //       : "COMPLETEfunction" is called
004628  005024  //       : If Touch is enabled this function should be called no more than once per
004629  005025  //       : millisecond, otherwise touch behaviour could be eratic.
004630  005026        
004631  005027        
004632  005028  func sys_ErrorMessage("msgnum"), 1;
004633  005029        
004634  005030  //==============================//
004635  005031  // NeoPixel specific functions  //
004636  005032  //==============================//
004637  005033        
004638  005034  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004639  005035  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004640  005036  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004641  005037  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004642  005038  //       : data        : Address of data to be sent
004643  005039  //       : size        : number of colour 'sets' to follow
004644  005040  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004645  005041  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004646  005042  //       : Repeat      : Number of times to repeat the colours between first and last
004647  005043  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004648  005044  //       : Returns true if the pin number is legal (usually ignored)
004649  005045  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004650  005046  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004651  005047        
004652  005048  // NeoPixel related constants
004653  005049  #CONST
004654  005053  #END
004655  005054        
004656  005055  func __reserved85(), 0; // do not remove
004657  005056  func __reserved86(), 0; // do not remove
004658  005057        
004659  005058  //==============================================//
004660  005059  // spi flash device specific functions          //
004661  005060  //==============================================//
004662  005061        
004663  005062  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004664  005063  // Syntax   : spiflash_SIG("spi#","enablepin");
004665  005064  // Usage    : var := spiflash_SIG(SPI1, PA0);
004666  005065  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004667  005066  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004668  005067  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004669  005068  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004670  005069  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004671  005070  //          : byte is ignored.
004672  005071        
004673  005072  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004674  005073  // Syntax   : spiflash_ID("spi#","enablepin");
004675  005074  // Usage    : var := spiflash_ID(SPI1, PA0);
004676  005075  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004677  005076  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004678  005077  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004679  005078  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004680  005079  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004681  005080  //          : contains capacity. Refer to the device data sheet for further information.
004682  005081        
004683  005082  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004684  005083  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004685  005084  // Usage    : spiflash_BulkErase(SPI1, PA0);
004686  005085  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004687  005086  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004688  005087  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004689  005088  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004690  005089  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004691  005090  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004692  005091        
004693  005092  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004694  005093  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004695  005094  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004696  005095  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004697  005096  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004698  005097  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004699  005098  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004700  005099  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004701  005100  //          : blockAddress The address of the 64k FLASH block to be erased.
004702  005101  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004703  005102  //          : can take up to 3 milliseconds.
004704  005103        
004705  005104  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004706  005105  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004707  005106  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004708  005107  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004709  005108        
004710  005109  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004711  005110  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004712  005111  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004713  005112  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004714  005113  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004715  005114  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004716  005115  //       : returns number of characters read
004717  005116  //       : if "dest" is zero, data is read direct to GRAM window
004718  005117  //       :
004719  005118        
004720  005119  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004721  005120  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004722  005121  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004723  005122  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004724  005123  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004725  005124  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004726  005125  //       : returns number of bytes written
004727  005126  //       :
004728  005127        
004729  005128  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004730  005129  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004731  005130  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004732  005131  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004733  005132  //       : The image is displayed at x,y (with respect to top left corner).
004734  005133        
004735  005134  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004736  005135  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004737  005136  // Usage : spiflash_PutC('x', SPI1, PA0);
004738  005137  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004739  005138  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004740  005139  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004741  005140        
004742  005141  func spiflash_GetC("spi#", "enablepin"), 1;
004743  005142  // Syntax: spiflash_GetC("spi#", "enablepin");
004744  005143  // Usage : mychar := fgetC(SPI1, PA0);
004745  005144  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004746  005145  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004747  005146  //       : by subsequent reads or writes.
004748  005147  //       : returns next char from file
004749  005148        
004750  005149  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004751  005150  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004752  005151  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004753  005152  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004754  005153  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004755  005154  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004756  005155        
004757  005156  func spiflash_GetW("spi#", "enablepin"), 1;
004758  005157  // Syntax: spiflash_GetW("spi#", "enablepin");
004759  005158  // Usage : myword := fgetW(SPI1, PA0);
004760  005159  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004761  005160  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004762  005161  //       : by subsequent reads or writes.
004763  005162  // Notes : returns next word in file
004764  005163        
004765  005164  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004766  005165  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004767  005166  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004768  005167  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004769  005168  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004770  005169  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004771  005170  //       : returns number of characters written
004772  005171  //       :
004773  005172        
004774  005173  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004775  005174  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004776  005175  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004777  005176  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004778  005177  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004779  005178  //       : by subsequent reads or writes.
004780  005179  //       : returns pointer to string or null if failed.
004781  005180  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004782  005181  //       : NB:- only reads up to "size-1" characters into "string"
004783  005182  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004784  005183  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004785  005184  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004786  005185  //       : C] It reaches the end of file
004787  005186  //       : D] A read error occurs.
004788  005187        
004789  005188  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004790  005189  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004791  005190  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004792  005191  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004793  005192  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004794  005193  //       : return a function pointer to the allocation.
004795  005194  //       : The function can then be invoked just like any other
004796  005195  //       : function would be called via a function pointer.
004797  005196  //       : Parameters may be passed to it in a conventional way.
004798  005197  //       : The function may be discarded at any time when no
004799  005198  //       : longer required, thus freeing its memory resources.
004800  005199  //       : The loaded function can be discarded with mem_Free(..)
004801  005200  //       : eg:
004802  005201  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004803  005202  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004804  005203  //       : then elsewhere in your program:-
004805  005204  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004806  005205  //       : if(res == QUIT_APPLICATION) goto exitApp;
004807  005206  //       : Later in your program, when popupWindow is no longer
004808  005207  //       : required for the application:-
004809  005208  //       : res := mem_Free(popupWindow);
004810  005209  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004811  005210  //       : The callers stack is shared by the loaded function,
004812  005211  //       : however any global variables in the loaded function
004813  005212  //       : are private to that function.
004814  005213  //
004815  005214        
004816  005215  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004817  005216  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004818  005217  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004819  005218  // Notes : current program releases any allocated memory but
004820  005219  //       : retains the stack and global memory.
004821  005220  //       : If arglistptr is 0, no arguments are passed, else
004822  005221  //       : arglist points to an array, the first element being
004823  005222  //       : the number of elements in the array.
004824  005223  //       : func 'main' in the called program accepts
004825  005224  //       : the arguments, if any. The arguments can only
004826  005225  //       : be passed by value, no pointers or references can be
004827  005226  //       : used as all memory is cleared before the file
004828  005227  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004829  005228  //       : for functions that can pass by reference.
004830  005229        
004831  005230  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004832  005231  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004833  005232  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004834  005233  // Notes : returns like a function, current program
004835  005234  //       : calling program is kept active and control returns to it.
004836  005235  //       : If arglistptr is 0, no arguments are passed, else
004837  005236  //       : arglist points to an array, the first element being
004838  005237  //       : the number of elements in the array.
004839  005238  //       : func 'main' in the called program accepts the arguments.
004840  005239  //       : This function is similar to spiflash_LoadFunction(...), however,
004841  005240  //       : the function argument list is passed by pointer, and
004842  005241  //       : the memory consumed by the function is released as
004843  005242  //       : soon as the function completes.
004844  005243        
004845  005244  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004846  005245  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004847  005246  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004848  005247  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004849  005248  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004850  005249  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004851  005250  //       : Returns NULL if function fails.
004852  005251  //       : Returns a handle (pointer to the memory allocation) to the
004853  005252  //       : image control list that has been created.
004854  005253        
004855  005254  // Notes : This function Calculates the size of a chunk of memory required for
004856  005255  //       : a image list and populates it from the image control file ("*.dat")
004857  005256  //       : therefore, when imagelist is no longer required, you must de-allocate
004858  005257  //       : the image list memory by using eg:- mem_Free(hImagelist);
004859  005258  //       : to restore the heap.
004860  005259  //       :
004861  005260        
004862  005261  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004863  005262  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004864  005263  // Usage : spiflash_PlayWAV(SPI1, PA0);
004865  005264  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004866  005265  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004867  005266  //       : or writes.
004868  005267  //       : This function automatically grabs a chunk
004869  005268  //       : of memory for a file buffer, and a wave
004870  005269  //       : buffer. The minimum memory requirement is
004871  005270  //       : about 580 bytes for the disk io service and
004872  005271  //       : a minimum wave buffer size of 1024. The size
004873  005272  //       : of the wave buffer allocation
004874  005273  //       : can be increased by the snd_BufSize function.
004875  005274  //       : The default size 1024 bytes.
004876  005275  //       : NB the memory is only required during the
004877  005276  //       : duration of play, and is automatically
004878  005277  //       : released while not in use.
004879  005278  //       : See the Sound Class services for other associated controls.
004880  005279  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004881  005280  //       : If errors occured, the folling is returned
004882  005281  //       : -7  : Insufficient memory available for WAV buffer and file
004883  005282  //       : -6  : cant play this rate
004884  005283  //       : -5  : no data chunk found in first rsector
004885  005284  //       : -4  : no format data
004886  005285  //       : -3  : no wave chunk signature
004887  005286  //       : -2  : bad wave file format
004888  005287  //       : -1  : file not found
004889  005288        
004890  005289  //==============================================//
004891  005290  // more com functions                           //
004892  005291  //==============================================//
004893  005292        
004894  005293  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004895  005294  // Syntax   : com1_TXblock("buf", "bufsize");
004896  005295  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004897  005296  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004898  005297  //          : if a transmit buffer is active and space is available this function will return almost
004899  005298  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004900  005299        
004901  005300  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004902  005301  // Syntax   : com1_RXblock("buf", "bufsize");
004903  005302  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004904  005303  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004905  005304  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004906  005305  //          : immediately otherwise it will block until until the required bytes are received.
004907  005306        
004908  005307  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004909  005308  // Syntax   : com_TXblock("buf", "bufsize");
004910  005309  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004911  005310  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004912  005311  //          : if a transmit buffer is active and space is available this function will return almost
004913  005312  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004914  005313        
004915  005314  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004916  005315  // Syntax   : com_RXblock("buf", "bufsize");
004917  005316  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004918  005317  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004919  005318  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004920  005319  //          : immediately otherwise it will block until until the required bytes are received.
004921  005320        
004922  005321  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004923  005322  // Syntax   : com_TXblock("buf", "bufsize");
004924  005323  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004925  005324  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004926  005325  //          : if a transmit buffer is active and space is available this function will return almost
004927  005326  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004928  005327        
004929  005328  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004930  005329  // Syntax   : com_RXblock("buf", "bufsize");
004931  005330  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004932  005331  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004933  005332  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004934  005333  //          : immediately otherwise it will block until until the required bytes are received.
004935  005334        
004936  005335  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004937  005336  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004938  005337  // Usage : disp_BlitPixelsFromCOM1();
004939  005338  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004940  005339  //       : display from the specified com port.
004941  005340        
004942  005341  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004943  005342  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004944  005343  // Usage : disp_BlitPixelsFromCOM2();
004945  005344  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004946  005345  //       : display from the specified com port.
004947  005346        
004948  005347  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004949  005348  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004950  005349  // Usage : disp_BlitPixelsFromCOM3();
004951  005350  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004952  005351  //       : display from the specified com port.
004953  005352        
004954  005353        
004955  005354  //==============================================//
004956  005355  // crc generation functions                     //
004957  005356  //==============================================//
004958  005357        
004959  005358  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004960  005359  // *Notes   : (if you calculate all of the incoming data
004961  005360  //          : INCLUDING the CRC, the result should be 0x00
004962  005361  //          : This is equivalent to simple addition of all bytes
004963  005362  //          : and returning the negated sum an 8 bit value.
004964  005363  //          : For the standard test string "123456789",
004965  005364  //          : crc_CSUM_8 will return 0x0023.
004966  005365        
004967  005366        
004968  005367  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004969  005368  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004970  005369  //          : (if you calculate all of the incoming data
004971  005370  //          : INCLUDING the CRC, the result should be 0x0000
004972  005371  //          : For the standard test string "123456789",
004973  005372  //          : crc_16 will return 0xBB3D.
004974  005373        
004975  005374        
004976  005375  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004977  005376  // *Notes   : (if you calculate all of the incoming data
004978  005377  //          : INCLUDING the CRC, the result should be 0x0000
004979  005378  //          : For the standard test string "123456789",
004980  005379  //          : crc_MODBUS will return 0x4B37.
004981  005380        
004982  005381        
004983  005382  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004984  005383  // *Notes   : (if you calculate all of the incoming data
004985  005384  //          : INCLUDING the CRC, the result should be 0x0000
004986  005385  //          : For the standard test string "123456789",
004987  005386  //          : crc_CCITT will return the following:-
004988  005387  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004989  005388  //          : seed = 0xFFFF, result = 0x29B1
004990  005389  //          : seed = 0x1D0F, result = 0xE5CC
004991  005390        
004992  005391  func __reserved87(), 0; // do not remove
004993  005392  func __reserved88(), 0; // do not remove
004994  005393  func __reserved89(), 0; // do not remove
004995  005394        
004996  005395  //----------------------------------------------------------------------------//
004997  005396  //  functions to support buffered transmission and reception of break signal  //
004998  005397  //----------------------------------------------------------------------------//
004999  005398        
005000  005399  func com_TXbufferBrk("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
005001  005400  // Usage : com_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005002  005401  // Usage : com_TXbufferBrk(0, 0, 0);             // revert to non buffered service
005003  005402  // Notes : initialize a serial buffer for the COM0 output.
005004  005403  //       : The program must declare a var array as a circular buffer.
005005  005404  //       : When a TX buffer is declared for comms, the transmission
005006  005405  //       : of characters becomes non blocking. If the buffer has
005007  005406  //       : insufficient space to accept the next character from a
005008  005407  //       : serout_x() function, the excess characters will be ignored,
005009  005408  //       : and the com_Full_x() error will be asserted.   If the
005010  005409  //       : TX buffer is no longer required, just set the buffer pointer
005011  005410  //       : to zero, the size in this case doesnt matter and is ignored.
005012  005411  //       : The function can resize or reallocated to another buffer at
005013  005412  //       : any time. The buffer is flushed before any changes are made.
005014  005413  //       : "pin" designates an IO pin to control a bi-directional
005015  005414  //       : control device for half duplex mode. "pin" will go HI at the
005016  005415  //       : start of a transmission, and will return low after the final
005017  005416  //       : byte is transmitted. If not required, just set "pin" to zero.
005018  005417        
005019  005418  func com1_TXbufferBrk("buf", "bufsize", "pin"), 0;
005020  005419  // Usage : com1_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005021  005420  // Usage : com1_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005022  005421  // Notes : initialize a serial buffer for the COM0 output.
005023  005422  //       : The program must declare a var array as a circular buffer.
005024  005423  //       : When a TX buffer is declared for comms, the transmission
005025  005424  //       : of characters becomes non blocking. If the buffer has
005026  005425  //       : insufficient space to accept the next character from a
005027  005426  //       : serout_x() function, the excess characters will be ignored,
005028  005427  //       : and the com_Full_x() error will be asserted.   If the
005029  005428  //       : TX buffer is no longer required, just set the buffer pointer
005030  005429  //       : to zero, the size in this case doesnt matter and is ignored.
005031  005430  //       : The function can resize or reallocated to another buffer at
005032  005431  //       : any time. The buffer is flushed before any changes are made.
005033  005432  //       : "pin" designates an IO pin to control a bi-directional
005034  005433  //       : control device for half duplex mode. "pin" will go HI at the
005035  005434  //       : start of a transmission, and will return low after the final
005036  005435  //       : byte is transmitted. If not required, just set "pin" to zero.
005037  005436        
005038  005437  func com2_TXbufferBrk("buf", "bufsize", "pin"), 0;
005039  005438  // Usage : com2_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005040  005439  // Usage : com2_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005041  005440  // Notes : initialize a serial buffer for the COM0 output.
005042  005441  //       : The program must declare a var array as a circular buffer.
005043  005442  //       : When a TX buffer is declared for comms, the transmission
005044  005443  //       : of characters becomes non blocking. If the buffer has
005045  005444  //       : insufficient space to accept the next character from a
005046  005445  //       : serout_x() function, the excess characters will be ignored,
005047  005446  //       : and the com_Full_x() error will be asserted.   If the
005048  005447  //       : TX buffer is no longer required, just set the buffer pointer
005049  005448  //       : to zero, the size in this case doesnt matter and is ignored.
005050  005449  //       : The function can resize or reallocated to another buffer at
005051  005450  //       : any time. The buffer is flushed before any changes are made.
005052  005451  //       : "pin" designates an IO pin to control a bi-directional
005053  005452  //       : control device for half duplex mode. "pin" will go HI at the
005054  005453  //       : start of a transmission, and will return low after the final
005055  005454  //       : byte is transmitted. If not required, just set "pin" to zero.
005056  005455        
005057  005456  func com3_TXbufferBrk("buf", "bufsize", "pin"), 0;
005058  005457  // Usage : com3_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005059  005458  // Usage : com3_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005060  005459  // Notes : initialize a serial buffer for the COM0 output.
005061  005460  //       : The program must declare a var array as a circular buffer.
005062  005461  //       : When a TX buffer is declared for comms, the transmission
005063  005462  //       : of characters becomes non blocking. If the buffer has
005064  005463  //       : insufficient space to accept the next character from a
005065  005464  //       : serout_x() function, the excess characters will be ignored,
005066  005465  //       : and the com_Full_x() error will be asserted.   If the
005067  005466  //       : TX buffer is no longer required, just set the buffer pointer
005068  005467  //       : to zero, the size in this case doesnt matter and is ignored.
005069  005468  //       : The function can resize or reallocated to another buffer at
005070  005469  //       : any time. The buffer is flushed before any changes are made.
005071  005470  //       : "pin" designates an IO pin to control a bi-directional
005072  005471  //       : control device for half duplex mode. "pin" will go HI at the
005073  005472  //       : start of a transmission, and will return low after the final
005074  005473  //       : byte is transmitted. If not required, just set "pin" to zero.
005075  005474        
005076  005475  func com_InitBrk("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
005077  005476  // Syntax: com_InitBrk(buffer, bufsize, qualifier);
005078  005477  // Usage1: com_InitBrk(mybuf, 20, 0);
005079  005478  // Usage2: com_InitBrk(mybuf, 20, ':');
005080  005479  // Notes : initialize a serial capture buffer for the comms input
005081  005480  //       : The program must declare a var array as a circular buffer.
005082  005481  //       : Usage1 declares a circular buffer which will continually
005083  005482  //       : buffer characters.
005084  005483  //       : Usage2 must receive ':' before any characters will
005085  005484  //       : accumulate in the buffer.
005086  005485        
005087  005486  func com1_InitBrk("buf","bufsize","qualifier"), 0;
005088  005487  // Syntax: com1_InitBrk(buffer, bufsize, qualifier);
005089  005488  // Usage1: com1_InitBrk(mybuf, 20, 0);
005090  005489  // Usage2: com1_InitBrk(mybuf, 20, ':');
005091  005490  // Notes : initialize a serial capture buffer for the comms input
005092  005491  //       : The program must declare a var array as a circular buffer.
005093  005492  //       : Usage1 declares a circular buffer which will continually
005094  005493  //       : buffer characters.
005095  005494  //       : Usage2 must receive ':' before any characters will
005096  005495  //       : accumulate in the buffer.
005097  005496        
005098  005497  func com2_InitBrk("buf","bufsize","qualifier"), 0;
005099  005498  // Syntax: com2_InitBrk(buffer, bufsize, qualifier);
005100  005499  // Usage1: com2_InitBrk(mybuf, 20, 0);
005101  005500  // Usage2: com2_InitBrk(mybuf, 20, ':');
005102  005501  // Notes : initialize a serial capture buffer for the comms input
005103  005502  //       : The program must declare a var array as a circular buffer.
005104  005503  //       : Usage1 declares a circular buffer which will continually
005105  005504  //       : buffer characters.
005106  005505  //       : Usage2 must receive ':' before any characters will
005107  005506  //       : accumulate in the buffer.
005108  005507        
005109  005508  func com3_InitBrk("buf","bufsize","qualifier"), 0;
005110  005509  // Syntax: com3_InitBrk(buffer, bufsize, qualifier);
005111  005510  // Usage1: com3_InitBrk(mybuf, 20, 0);
005112  005511  // Usage2: com3_Init(mybuf, 20, ':');
005113  005512  // Notes : initialize a serial capture buffer for the comms input
005114  005513  //       : The program must declare a var array as a circular buffer.
005115  005514  //       : Usage1 declares a circular buffer which will continually
005116  005515  //       : buffer characters.
005117  005516  //       : Usage2 must receive ':' before any characters will
005118  005517  //       : accumulate in the buffer.
005119  005518        
005120  005519  //------------------------------------------------------------------//
005121  005520  //     break control constant                                       //
005122  005521  //------------------------------------------------------------------//
005123  005522  #constant BREAK      0xFFFD    // interpretation of the break signal
005124  005522  #constant BREAK      0xFFFD    // interpretation of the break signal
005125  005523        
005126  005524  //------------------------------------------------------------------//
005127  005525  // CONSTANTS
005128  005526  //------------------------------------------------------------------//
005129  005527        
005130  005528  #CONST
005131  005532  #END
005132  005533        
005133  005534  // timebase constants for timebase_init
005134  005535  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005135  005536  #CONST
005136  005547  #END
005137  005548        
005138  005549        
005139  005550  // generic constants
005140  005551  #CONST
005141  005559  #END
005142  005560        
005143  005561        
005144  005562        
005145  005563  //gfx_Get() related constants
005146  005564  #CONST
005147  005573  #END
005148  005574        
005149  005575        
005150  005576        
005151  005577        
005152  005578  #CONST
005153  005591  #END
005154  005592        
005155  005593        
005156  005594  #CONST
005157  005619  #END
005158  005620        
005159  005621        
005160  005622        
005161  005623        
005162  005624  // timer control  related constants
005163  005625  #CONST
005164  005634  #END
005165  005635        
005166  005636        
005167  005637        
005168  005638  //------------------------------------------------------------------------------
005169  005639  // system WORD variables accesible with peekW and pokeW or pointer access
005170  005640  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005171  005641  // can also be accessed with peekW and pokeW
005172  005642  //------------------------------------------------------------------------------
005173  005643        
005174  005644  #CONST
005175  005739  #END
005176  005740        
005177  005741  #CONST
005178  005906  #END
005179  005907        
005180  005908        
005181  005909        
005182  005910  //==================================================================================================
005183  005911        
005184  005912        
005185  005913        
005186  000013      #ENDIF
005187  000014        
005188  000015        
005189  000016  //===========================================================================================
005190  000017        
005191  000018        
005192  000002        
005193  000003        
005194  000004  // generated 02/08/2018 14:34:00
005195  000005        
005196  000006  #MODE FLASHBANK_1
005197  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005198  000008  #inherit "4DGL_16bitColours.fnc"
005199  000008  #inherit "4DGL_16bitColours.fnc"
005200  000004  */
005201  000005        
005202  000006        
005203  000007        
005204  000008  #CONST
005205  000149  #END
005206  000150        
005207  000009        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005208  000010  #inherit "VisualConst.inc"
005209  000010  #inherit "VisualConst.inc"
005210  000001  // Line Patterns
005211  000002  #constant  LPCOARSE    0xF0F0
005212  000002  #constant  LPCOARSE    0xF0F0
005213  000003  #constant  LPMEDIUM    0x3333
005214  000003  #constant  LPMEDIUM    0x3333
005215  000004  #constant  LPFINE      0xAAAA
005216  000004  #constant  LPFINE      0xAAAA
005217  000005  #constant  LPDASHDOT   0x03CF
005218  000005  #constant  LPDASHDOT   0x03CF
005219  000006  #constant  LPDASHDOTDOT 0x0333
005220  000006  #constant  LPDASHDOTDOT 0x0333
005221  000007  #constant  LPSOLID     0x0000
005222  000007  #constant  LPSOLID     0x0000
005223  000011        
005224  000012        
file C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMAConst.inc

005225  000013  #inherit "BCN3D_SIGMAConst.inc"
005226  000013  #inherit "BCN3D_SIGMAConst.inc"
005227  000001  // File generated 02/08/2018 14:33:23
005228  000002  // Warning! This is a generated file, any manual changes will be
005229  000003  // lost during the next generation.
005230  000004        
005231  000005  #constant  Strings3Count    0
005232  000005  #constant  Strings3Count    0
005233  000006  #constant  Strings3Size     1
005234  000006  #constant  Strings3Size     1
005235  000007  #constant  Strings1Count    0
005236  000007  #constant  Strings1Count    0
005237  000008  #constant  Strings1Size     1
005238  000008  #constant  Strings1Size     1
005239  000009  #constant  Strings8Count    0
005240  000009  #constant  Strings8Count    0
005241  000010  #constant  Strings8Size     1
005242  000010  #constant  Strings8Size     1
005243  000011  #constant  Strings12Count    0
005244  000011  #constant  Strings12Count    0
005245  000012  #constant  Strings12Size     1
005246  000012  #constant  Strings12Size     1
005247  000013  #constant  Strings23Count    0
005248  000013  #constant  Strings23Count    0
005249  000014  #constant  Strings23Size     1
005250  000014  #constant  Strings23Size     1
005251  000015  #constant  Strings16Count    0
005252  000015  #constant  Strings16Count    0
005253  000016  #constant  Strings16Size     1
005254  000016  #constant  Strings16Size     1
005255  000017  #constant  Strings2Count    0
005256  000017  #constant  Strings2Count    0
005257  000018  #constant  Strings2Size     1
005258  000018  #constant  Strings2Size     1
005259  000019  #constant  Strings7Count    0
005260  000019  #constant  Strings7Count    0
005261  000020  #constant  Strings7Size     1
005262  000020  #constant  Strings7Size     1
005263  000021  #constant  Strings9Count    0
005264  000021  #constant  Strings9Count    0
005265  000022  #constant  Strings9Size     1
005266  000022  #constant  Strings9Size     1
005267  000023  #constant  Strings10Count    0
005268  000023  #constant  Strings10Count    0
005269  000024  #constant  Strings10Size     1
005270  000024  #constant  Strings10Size     1
005271  000025  #constant  Strings27Count    0
005272  000025  #constant  Strings27Count    0
005273  000026  #constant  Strings27Size     1
005274  000026  #constant  Strings27Size     1
005275  000027  #constant  Strings48Count    0
005276  000027  #constant  Strings48Count    0
005277  000028  #constant  Strings48Size     1
005278  000028  #constant  Strings48Size     1
005279  000029  #constant  Strings13Count    0
005280  000029  #constant  Strings13Count    0
005281  000030  #constant  Strings13Size     1
005282  000030  #constant  Strings13Size     1
005283  000031  #constant  Strings38Count    0
005284  000031  #constant  Strings38Count    0
005285  000032  #constant  Strings38Size     1
005286  000032  #constant  Strings38Size     1
005287  000033  #constant  Strings53Count    0
005288  000033  #constant  Strings53Count    0
005289  000034  #constant  Strings53Size     1
005290  000034  #constant  Strings53Size     1
005291  000035  #constant  Strings11Count    1
005292  000035  #constant  Strings11Count    1
005293  000036  #constant  Strings11Size     7
005294  000036  #constant  Strings11Size     7
005295  000037  #constant  Strings39Count    0
005296  000037  #constant  Strings39Count    0
005297  000038  #constant  Strings39Size     1
005298  000038  #constant  Strings39Size     1
005299  000039  #constant  Strings44Count    0
005300  000039  #constant  Strings44Count    0
005301  000040  #constant  Strings44Size     1
005302  000040  #constant  Strings44Size     1
005303  000041  #constant  Strings49Count    1
005304  000041  #constant  Strings49Count    1
005305  000042  #constant  Strings49Size     12
005306  000042  #constant  Strings49Size     12
005307  000043  #constant  Strings52Count    0
005308  000043  #constant  Strings52Count    0
005309  000044  #constant  Strings52Size     1
005310  000044  #constant  Strings52Size     1
005311  000045  #constant  Strings50Count    0
005312  000045  #constant  Strings50Count    0
005313  000046  #constant  Strings50Size     1
005314  000046  #constant  Strings50Size     1
005315  000047  #constant  Strings55Count    0
005316  000047  #constant  Strings55Count    0
005317  000048  #constant  Strings55Size     1
005318  000048  #constant  Strings55Size     1
005319  000049  #constant  Strings5Count    0
005320  000049  #constant  Strings5Count    0
005321  000050  #constant  Strings5Size     1
005322  000050  #constant  Strings5Size     1
005323  000051  #constant  Strings6Count    0
005324  000051  #constant  Strings6Count    0
005325  000052  #constant  Strings6Size     1
005326  000052  #constant  Strings6Size     1
005327  000053  #constant  Strings0Count    0
005328  000053  #constant  Strings0Count    0
005329  000054  #constant  Strings0Size     1
005330  000054  #constant  Strings0Size     1
005331  000055  #constant  Strings4Count    1
005332  000055  #constant  Strings4Count    1
005333  000056  #constant  Strings4Size     12
005334  000056  #constant  Strings4Size     12
005335  000057  #constant  Strings14Count    0
005336  000057  #constant  Strings14Count    0
005337  000058  #constant  Strings14Size     1
005338  000058  #constant  Strings14Size     1
005339  000059  // object indexes into ImageControl
005340  000060  #CONST
005341  000769  #END
005342  000770        
005343  000771  #constant  Strings15Size     0
005344  000771  #constant  Strings15Size     0
005345  000772  #constant  Strings15StartH   0
005346  000772  #constant  Strings15StartH   0
005347  000773  #constant  Strings15StartL   0
005348  000773  #constant  Strings15StartL   0
005349  000774  #constant  Strings17Size     0
005350  000774  #constant  Strings17Size     0
005351  000775  #constant  Strings17StartH   0
005352  000775  #constant  Strings17StartH   0
005353  000776  #constant  Strings17StartL   0
005354  000776  #constant  Strings17StartL   0
005355  000777  #constant  Strings18Size     0
005356  000777  #constant  Strings18Size     0
005357  000778  #constant  Strings18StartH   0
005358  000778  #constant  Strings18StartH   0
005359  000779  #constant  Strings18StartL   0
005360  000779  #constant  Strings18StartL   0
005361  000780  #constant  Strings19Size     0
005362  000780  #constant  Strings19Size     0
005363  000781  #constant  Strings19StartH   0
005364  000781  #constant  Strings19StartH   0
005365  000782  #constant  Strings19StartL   0
005366  000782  #constant  Strings19StartL   0
005367  000783  #constant  Strings20Size     0
005368  000783  #constant  Strings20Size     0
005369  000784  #constant  Strings20StartH   0
005370  000784  #constant  Strings20StartH   0
005371  000785  #constant  Strings20StartL   0
005372  000785  #constant  Strings20StartL   0
005373  000786  #constant  Strings21Size     0
005374  000786  #constant  Strings21Size     0
005375  000787  #constant  Strings21StartH   0
005376  000787  #constant  Strings21StartH   0
005377  000788  #constant  Strings21StartL   0
005378  000788  #constant  Strings21StartL   0
005379  000789  #constant  Strings22Size     0
005380  000789  #constant  Strings22Size     0
005381  000790  #constant  Strings22StartH   0
005382  000790  #constant  Strings22StartH   0
005383  000791  #constant  Strings22StartL   0
005384  000791  #constant  Strings22StartL   0
005385  000792  #constant  Strings24Size     0
005386  000792  #constant  Strings24Size     0
005387  000793  #constant  Strings24StartH   0
005388  000793  #constant  Strings24StartH   0
005389  000794  #constant  Strings24StartL   0
005390  000794  #constant  Strings24StartL   0
005391  000795  #constant  Strings25Size     0
005392  000795  #constant  Strings25Size     0
005393  000796  #constant  Strings25StartH   0
005394  000796  #constant  Strings25StartH   0
005395  000797  #constant  Strings25StartL   0
005396  000797  #constant  Strings25StartL   0
005397  000798  #constant  Strings26Size     0
005398  000798  #constant  Strings26Size     0
005399  000799  #constant  Strings26StartH   0
005400  000799  #constant  Strings26StartH   0
005401  000800  #constant  Strings26StartL   0
005402  000800  #constant  Strings26StartL   0
005403  000801  #constant  Strings28Size     0
005404  000801  #constant  Strings28Size     0
005405  000802  #constant  Strings28StartH   0
005406  000802  #constant  Strings28StartH   0
005407  000803  #constant  Strings28StartL   0
005408  000803  #constant  Strings28StartL   0
005409  000804  #constant  Strings29Size     0
005410  000804  #constant  Strings29Size     0
005411  000805  #constant  Strings29StartH   0
005412  000805  #constant  Strings29StartH   0
005413  000806  #constant  Strings29StartL   0
005414  000806  #constant  Strings29StartL   0
005415  000807  #constant  Strings30Size     0
005416  000807  #constant  Strings30Size     0
005417  000808  #constant  Strings30StartH   0
005418  000808  #constant  Strings30StartH   0
005419  000809  #constant  Strings30StartL   0
005420  000809  #constant  Strings30StartL   0
005421  000810  #constant  Strings31Size     0
005422  000810  #constant  Strings31Size     0
005423  000811  #constant  Strings31StartH   0
005424  000811  #constant  Strings31StartH   0
005425  000812  #constant  Strings31StartL   0
005426  000812  #constant  Strings31StartL   0
005427  000813  #constant  Strings32Size     0
005428  000813  #constant  Strings32Size     0
005429  000814  #constant  Strings32StartH   0
005430  000814  #constant  Strings32StartH   0
005431  000815  #constant  Strings32StartL   0
005432  000815  #constant  Strings32StartL   0
005433  000816  #constant  Strings33Size     0
005434  000816  #constant  Strings33Size     0
005435  000817  #constant  Strings33StartH   0
005436  000817  #constant  Strings33StartH   0
005437  000818  #constant  Strings33StartL   0
005438  000818  #constant  Strings33StartL   0
005439  000819  #constant  Strings34Size     0
005440  000819  #constant  Strings34Size     0
005441  000820  #constant  Strings34StartH   0
005442  000820  #constant  Strings34StartH   0
005443  000821  #constant  Strings34StartL   0
005444  000821  #constant  Strings34StartL   0
005445  000822  #constant  Strings35Size     0
005446  000822  #constant  Strings35Size     0
005447  000823  #constant  Strings35StartH   0
005448  000823  #constant  Strings35StartH   0
005449  000824  #constant  Strings35StartL   0
005450  000824  #constant  Strings35StartL   0
005451  000825  #constant  Strings36Size     0
005452  000825  #constant  Strings36Size     0
005453  000826  #constant  Strings36StartH   0
005454  000826  #constant  Strings36StartH   0
005455  000827  #constant  Strings36StartL   0
005456  000827  #constant  Strings36StartL   0
005457  000828  #constant  Strings37Size     0
005458  000828  #constant  Strings37Size     0
005459  000829  #constant  Strings37StartH   0
005460  000829  #constant  Strings37StartH   0
005461  000830  #constant  Strings37StartL   0
005462  000830  #constant  Strings37StartL   0
005463  000831  #constant  Strings40Size     0
005464  000831  #constant  Strings40Size     0
005465  000832  #constant  Strings40StartH   0
005466  000832  #constant  Strings40StartH   0
005467  000833  #constant  Strings40StartL   0
005468  000833  #constant  Strings40StartL   0
005469  000834  #constant  Strings41Size     0
005470  000834  #constant  Strings41Size     0
005471  000835  #constant  Strings41StartH   0
005472  000835  #constant  Strings41StartH   0
005473  000836  #constant  Strings41StartL   0
005474  000836  #constant  Strings41StartL   0
005475  000837  #constant  Strings42Size     0
005476  000837  #constant  Strings42Size     0
005477  000838  #constant  Strings42StartH   0
005478  000838  #constant  Strings42StartH   0
005479  000839  #constant  Strings42StartL   0
005480  000839  #constant  Strings42StartL   0
005481  000840  #constant  Strings43Size     0
005482  000840  #constant  Strings43Size     0
005483  000841  #constant  Strings43StartH   0
005484  000841  #constant  Strings43StartH   0
005485  000842  #constant  Strings43StartL   0
005486  000842  #constant  Strings43StartL   0
005487  000843  #constant  Strings45Size     0
005488  000843  #constant  Strings45Size     0
005489  000844  #constant  Strings45StartH   0
005490  000844  #constant  Strings45StartH   0
005491  000845  #constant  Strings45StartL   0
005492  000845  #constant  Strings45StartL   0
005493  000846  #constant  Strings46Size     0
005494  000846  #constant  Strings46Size     0
005495  000847  #constant  Strings46StartH   0
005496  000847  #constant  Strings46StartH   0
005497  000848  #constant  Strings46StartL   0
005498  000848  #constant  Strings46StartL   0
005499  000849  #constant  Strings47Size     0
005500  000849  #constant  Strings47Size     0
005501  000850  #constant  Strings47StartH   0
005502  000850  #constant  Strings47StartH   0
005503  000851  #constant  Strings47StartL   0
005504  000851  #constant  Strings47StartL   0
005505  000852  #constant  Strings51Size     0
005506  000852  #constant  Strings51Size     0
005507  000853  #constant  Strings51StartH   0
005508  000853  #constant  Strings51StartH   0
005509  000854  #constant  Strings51StartL   0
005510  000854  #constant  Strings51StartL   0
005511  000855  #constant  Strings54Size     0
005512  000855  #constant  Strings54Size     0
005513  000856  #constant  Strings54StartH   0
005514  000856  #constant  Strings54StartH   0
005515  000857  #constant  Strings54StartL   0
005516  000857  #constant  Strings54StartL   0
005517  000858  #constant  Strings3StartH   0x0
005518  000858  #constant  Strings3StartH   0x0
005519  000859  #constant  Strings3StartL   0x0
005520  000859  #constant  Strings3StartL   0x0
005521  000860  #constant  Strings1StartH   0x0
005522  000860  #constant  Strings1StartH   0x0
005523  000861  #constant  Strings1StartL   0x200
005524  000861  #constant  Strings1StartL   0x200
005525  000862  #constant  Strings8StartH   0x0
005526  000862  #constant  Strings8StartH   0x0
005527  000863  #constant  Strings8StartL   0x400
005528  000863  #constant  Strings8StartL   0x400
005529  000864  #constant  Strings12StartH   0x0
005530  000864  #constant  Strings12StartH   0x0
005531  000865  #constant  Strings12StartL   0x600
005532  000865  #constant  Strings12StartL   0x600
005533  000866  #constant  Strings23StartH   0x0
005534  000866  #constant  Strings23StartH   0x0
005535  000867  #constant  Strings23StartL   0x800
005536  000867  #constant  Strings23StartL   0x800
005537  000868  #constant  Strings16StartH   0x0
005538  000868  #constant  Strings16StartH   0x0
005539  000869  #constant  Strings16StartL   0xA00
005540  000869  #constant  Strings16StartL   0xA00
005541  000870  #constant  Strings2StartH   0x0
005542  000870  #constant  Strings2StartH   0x0
005543  000871  #constant  Strings2StartL   0xC00
005544  000871  #constant  Strings2StartL   0xC00
005545  000872  #constant  Strings7StartH   0x0
005546  000872  #constant  Strings7StartH   0x0
005547  000873  #constant  Strings7StartL   0xE00
005548  000873  #constant  Strings7StartL   0xE00
005549  000874  #constant  Strings9StartH   0x0
005550  000874  #constant  Strings9StartH   0x0
005551  000875  #constant  Strings9StartL   0x1000
005552  000875  #constant  Strings9StartL   0x1000
005553  000876  #constant  Strings10StartH   0x0
005554  000876  #constant  Strings10StartH   0x0
005555  000877  #constant  Strings10StartL   0x1200
005556  000877  #constant  Strings10StartL   0x1200
005557  000878  #constant  Strings27StartH   0x0
005558  000878  #constant  Strings27StartH   0x0
005559  000879  #constant  Strings27StartL   0x1400
005560  000879  #constant  Strings27StartL   0x1400
005561  000880  #constant  Strings48StartH   0x0
005562  000880  #constant  Strings48StartH   0x0
005563  000881  #constant  Strings48StartL   0x1600
005564  000881  #constant  Strings48StartL   0x1600
005565  000882  #constant  Strings13StartH   0x0
005566  000882  #constant  Strings13StartH   0x0
005567  000883  #constant  Strings13StartL   0x1800
005568  000883  #constant  Strings13StartL   0x1800
005569  000884  #constant  Strings38StartH   0x0
005570  000884  #constant  Strings38StartH   0x0
005571  000885  #constant  Strings38StartL   0x1A00
005572  000885  #constant  Strings38StartL   0x1A00
005573  000886  #constant  Strings53StartH   0x0
005574  000886  #constant  Strings53StartH   0x0
005575  000887  #constant  Strings53StartL   0x1C00
005576  000887  #constant  Strings53StartL   0x1C00
005577  000888  #constant  Strings11StartH   0x0
005578  000888  #constant  Strings11StartH   0x0
005579  000889  #constant  Strings11StartL   0x1E00
005580  000889  #constant  Strings11StartL   0x1E00
005581  000890  #constant  Strings39StartH   0x0
005582  000890  #constant  Strings39StartH   0x0
005583  000891  #constant  Strings39StartL   0x2000
005584  000891  #constant  Strings39StartL   0x2000
005585  000892  #constant  Strings44StartH   0x0
005586  000892  #constant  Strings44StartH   0x0
005587  000893  #constant  Strings44StartL   0x2200
005588  000893  #constant  Strings44StartL   0x2200
005589  000894  #constant  Strings49StartH   0x0
005590  000894  #constant  Strings49StartH   0x0
005591  000895  #constant  Strings49StartL   0x2400
005592  000895  #constant  Strings49StartL   0x2400
005593  000896  #constant  Strings52StartH   0x0
005594  000896  #constant  Strings52StartH   0x0
005595  000897  #constant  Strings52StartL   0x2600
005596  000897  #constant  Strings52StartL   0x2600
005597  000898  #constant  Strings50StartH   0x0
005598  000898  #constant  Strings50StartH   0x0
005599  000899  #constant  Strings50StartL   0x2800
005600  000899  #constant  Strings50StartL   0x2800
005601  000900  #constant  Strings55StartH   0x0
005602  000900  #constant  Strings55StartH   0x0
005603  000901  #constant  Strings55StartL   0x2A00
005604  000901  #constant  Strings55StartL   0x2A00
005605  000902  #constant  Strings5StartH   0x0
005606  000902  #constant  Strings5StartH   0x0
005607  000903  #constant  Strings5StartL   0x2C00
005608  000903  #constant  Strings5StartL   0x2C00
005609  000904  #constant  Strings6StartH   0x0
005610  000904  #constant  Strings6StartH   0x0
005611  000905  #constant  Strings6StartL   0x2E00
005612  000905  #constant  Strings6StartL   0x2E00
005613  000906  #constant  Strings0StartH   0x0
005614  000906  #constant  Strings0StartH   0x0
005615  000907  #constant  Strings0StartL   0x3000
005616  000907  #constant  Strings0StartL   0x3000
005617  000908  #constant  Strings4StartH   0x0
005618  000908  #constant  Strings4StartH   0x0
005619  000909  #constant  Strings4StartL   0x3200
005620  000909  #constant  Strings4StartL   0x3200
005621  000910  #constant  Strings14StartH   0x0
005622  000910  #constant  Strings14StartH   0x0
005623  000911  #constant  Strings14StartL   0x3400
005624  000911  #constant  Strings14StartL   0x3400
005625  000912  #IFNOT EXISTS NOGLOBALS
005626  000913  var hndl ;
005627  000914  #ENDIF
005628  000014        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005629  000015  #inherit "CLPrintStrings.inc"
005630  000015  #inherit "CLPrintStrings.inc"
005631  000001  func PrintStrings(var ID, var *msgid, var String)
005632  000002      var StringID, i, ch, offs32[2], res32[2];
005633  000003      StringID := oStringss[1+ID] ;
005634  000004      if (String)
005635  000005          stringsCV[ID] := -1 ;
005636  000006      else
005637  000007          stringsCV[ID] := msgid ;
005638  000008      endif
005639  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005640  000010      txt_FontID(hFonts[ID]) ;
005641  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005642  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005643  000013        
005644  000014      if (*(StringID + Ofs_String_Transparent))
005645  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005646  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005647  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005648  000018      else
005649  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005650  000020          gfx_Clipping(ON) ;
005651  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005652  000022          gfx_Clipping(OFF) ;
005653  000023        
005654  000024      endif
005655  000025        
005656  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005657  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005658  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005659  000029        
005660  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005661  000031        
005662  000032      if (String)
005663  000033          i := 0 ;
005664  000034          ch := msgid[i++] ;
005665  000035          while (ch != 0)
005666  000036              putch(ch) ;
005667  000037              ch := msgid[i++] ;
005668  000038          wend
005669  000039      else
005670  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005671  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005672  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005673  000043          uadd_3232(res32,res32,offs32) ;
005674  000044          file_Seek(hstrings, res32[1], res32[0]);
005675  000045          repeat
005676  000046              if (*(StringID + Ofs_String_Ansi))
005677  000047                  ch := file_GetC(hstrings) ;
005678  000048              else
005679  000049                  ch := file_GetW(hstrings) ;
005680  000050              endif
005681  000051              putch(ch) ;
005682  000052          until (ch == 0) ;
005683  000053      endif
005684  000054        
005685  000055  endfunc
005686  000056        
005687  000016        
005688  000017  #constant IPDatasize 22
005689  000017  #constant IPDatasize 22
005690  000018        
005691  000019  #CONST
005692  000023  #END
005693  000024        
005694  000025  #CONST
005695  000135  #END
005696  000136        
005697  001016  #END
5698  4FE6
5699  4FE7
5700  4FE8
5701  4FE9
5702  4FEA
5703  4FEB
5704  4FEC
5705  4FED
5706  4FEE
5707  4FEF
5708  4FF0
5709  4FF1
5710  4FF2
5711  4FF3
5712  4FF4
5713  4FF5
5714  4FF6
5715  4FF7
5716  4FF8
5717  4FF9
5718  4FFA
5719  4FFB
5720  4FFC
5721  4FFD
5722  4FFE
5723  4FFF
5724  5000
5725  5001
5726  5002
5727  5003
5728  5004
5729  5005
5730  5006
5731  5007
5732  5008
5733  5009
5734  500A
5735  500B
5736  500C
5737  500D
5738  500E
5739  500F
5740  5010
5741  5011
5742  5012
5743  5013
5744  5014
5745  5015
5746  5016
5747  5017
5748  5018
5749  5019
5750  501A
5751  501B
5752  501C
5753  501D
5754  501E
5755  501F
5756  5020
5757  5021
5758  5022
5759  5023
5760  5024
5761  5025
5762  5026
5763  5027
5764  5028
5765  5029
5766  502A
5767  502B
5768  502C
5769  502D
5770  502E
5771  502F
5772  5030
5773  5031
5774  5032
5775  5033
5776  5034
5777  5035
5778  5036
5779  5037
5780  5038
5781  5039
5782  503A
5783  503B
5784  503C
5785  503D
5786  503E
5787  503F
5788  5040
5789  5041
5790  5042
5791  5043
5792  5044
5793  5045
5794  5046
5795  5047
5796  5048
5797  5049
5798  504A
5799  504B
5800  504C
5801  504D
5802  504E
5803  504F
5804  5050
5805  5051
5806  5052
5807  5053
5808  5054
5809  5055
5810  5056
5811  5057
5812  5058
5813  5059
5814  505A
5815  505B
5816  505C
5817  505D
5818  505E
5819  505F
5820  5060
5821  5061
5822  5062
5823  5063
5824  5064
5825  5065
5826  5066
5827  5067
5828  5068
5829  5069
5830  506A
5831  506B
5832  506C
5833  506D
5834  506E
5835  506F
5836  5070
5837  5071
5838  5072
5839  5073
5840  5074
5841  5075
5842  5076
5843  5077
5844  5078
5845  5079
5846  507A
5847  507B
5848  507C
5849  507D
5850  507E
5851  507F
5852  5080
5853  5081
5854  5082
5855  5083
5856  5084
5857  5085
5858  5086
5859  5087
5860  5088
5861  5089
5862  508A
5863  508B
5864  508C
5865  508D
5866  508E
5867  508F
5868  5090
5869  5091
5870  5092
5871  5093
5872  5094
5873  5095
5874  5096
5875  5097
5876  5098
5877  5099
5878  509A
5879  509B
5880  509C
5881  509D
5882  509E
5883  509F
5884  50A0
5885  50A1
5886  50A2
5887  50A3
5888  50A4
5889  50A5
5890  50A6
5891  50A7
5892  50A8
5893  50A9
5894  50AA
5895  50AB
5896  50AC
5897  50AD
5898  50AE
5899  50AF
5900  50B0
5901  50B1
5902  50B2
5903  50B3
5904  50B4
5905  50B5
5906  50B6
5907  50B7
5908  50B8
5909  50B9
5910  50BA
5911  50BB
5912  50BC
5913  50BD
5914  50BE
5915  50BF
5916  50C0
5917  50C1
5918  50C2
5919  50C3
5920  50C4
5921  50C5
5922  50C6
5923  50C7
5924  50C8
5925  50C9
5926  50CA
5927  50CB
5928  50CC
5929  50CD
5930  50CE
5931  50CF
5932  50D0
5933  50D1
5934  50D2
5935  50D3
5936  50D4
5937  50D5
5938  50D6
5939  50D7
5940  50D8
5941  50D9
5942  50DA
5943  50DB
5944  50DC
5945  50DD
5946  50DE
5947  50DF
5948  50E0
5949  50E1
5950  50E2
5951  50E3
5952  50E4
5953  50E5
5954  50E6
5955  50E7
5956  50E8
5957  50E9
5958  50EA
5959  50EB
5960  50EC
5961  50ED
5962  50EE
5963  50EF
5964  50F0
5965  50F1
5966  50F2
5967  50F3
5968  50F4
5969  50F5
5970  50F6
5971  50F7
5972  50F8
5973  50F9
5974  50FA
5975  50FB
5976  50FC
5977  50FD
5978  50FE
5979  50FF
5980  5100
5981  5101
5982  5102
5983  5103
5984  5104
5985  5105
5986  5106
5987  5107
5988  5108
5989  5109
5990  510A
5991  510B
5992  510C
5993  510D
5994  510E
5995  510F
5996  5110
5997  5111
5998  5112
5999  5113
6000  5114
6001  5115
6002  5116
6003  5117
6004  5118
6005  5119
6006  511A
6007  511B
6008  511C
6009  511D
6010  511E
6011  511F
6012  5120
6013  5121
6014  5122
6015  5123
6016  5124
6017  5125
6018  5126
6019  5127
6020  5128
6021  5129
6022  512A
6023  512B
6024  512C
6025  512D
6026  512E
6027  512F
6028  5130
6029  5131
6030  5132
6031  5133
6032  5134
6033  5135
6034  5136
6035  5137
6036  5138
6037  5139
6038  513A
6039  513B
6040  513C
6041  513D
6042  513E
6043  513F
6044  5140
6045  5141
6046  5142
6047  5143
6048  5144
6049  5145
6050  5146
6051  5147
6052  5148
6053  5149
6054  514A
6055  514B
6056  514C
6057  514D
6058  514E
6059  514F
6060  5150
6061  5151
6062  5152
6063  5153
6064  5154
6065  5155
6066  5156
6067  5157
6068  5158
6069  5159
6070  515A
6071  515B
6072  515C
6073  515D
6074  515E
6075  515F
6076  5160
6077  5161
6078  5162
6079  5163
6080  5164
6081  5165
6082  5166
6083  5167
6084  5168
6085  5169
6086  516A
6087  516B
6088  516C
6089  516D
6090  516E
6091  516F
6092  5170
6093  5171
6094  5172
6095  5173
6096  5174
6097  5175
6098  5176
6099  5177
6100  5178
6101  5179
6102  517A
6103  517B
6104  517C
6105  517D
6106  517E
6107  517F
6108  5180
6109  5181
6110  5182
6111  5183
6112  5184
6113  5185
6114  5186
6115  5187
6116  5188
6117  5189
6118  518A
6119  518B
6120  518C
6121  518D
6122  518E
6123  518F
6124  5190
6125  5191
6126  5192
6127  5193
6128  5194
6129  5195
6130  5196
6131  5197
6132  5198
6133  5199
6134  519A
6135  519B
6136  519C
6137  519D
6138  519E
6139  519F
6140  51A0
6141  51A1
6142  51A2
6143  51A3
6144  51A4
6145  51A5
6146  51A6
6147  51A7
6148  51A8
6149  51A9
6150  51AA
6151  51AB
6152  51AC
6153  51AD
6154  51AE
6155  51AF
6156  51B0
6157  51B1
6158  51B2
6159  51B3
6160  51B4
6161  51B5
6162  51B6
6163  51B7
6164  51B8
6165  51B9
6166  51BA
6167  51BB
6168  51BC
6169  51BD
6170  51BE
6171  51BF
6172  51C0
6173  51C1
6174  51C2
6175  51C3
6176  51C4
6177  51C5
6178  51C6
6179  51C7
6180  51C8
6181  51C9
6182  51CA
6183  51CB
6184  51CC
6185  51CD
6186  51CE
6187  51CF
6188  51D0
6189  51D1
6190  51D2
6191  51D3
6192  51D4
6193  51D5
6194  51D6
6195  51D7
6196  51D8
6197  51D9
6198  51DA
6199  51DB
6200  51DC
6201  51DD
6202  51DE
6203  51DF
6204  51E0
6205  51E1
6206  51E2
6207  51E3
6208  51E4
6209  51E5
6210  51E6
6211  51E7
6212  51E8
6213  51E9
6214  51EA
6215  51EB
6216  51EC
6217  51ED
6218  51EE
6219  51EF
6220  51F0
6221  51F1
6222  51F2
6223  51F3
6224  51F4
6225  51F5
6226  51F6
6227  51F7
6228  51F8
6229  51F9
6230  51FA
6231  51FB
6232  51FC
6233  51FD
6234  51FE
6235  51FF
6236  5200
6237  5201
6238  5202
6239  5203
6240  5204
6241  5205
6242  5206
6243  5207
6244  5208
6245  5209
6246  520A
6247  520B
6248  520C
6249  520D
6250  520E
6251  520F
6252  5210
6253  5211
6254  5212
6255  5213
6256  5214
6257  5215
6258  5216
6259  5217
6260  5218
6261  5219
6262  521A
6263  521B
6264  521C
6265  521D
6266  521E
6267  521F
6268  5220
6269  5221
6270  5222
6271  5223
6272  5224
6273  5225
6274  5226
6275  5227
6276  5228
6277  5229
6278  522A
6279  522B
6280  522C
6281  522D
6282  522E
6283  522F
6284  5230
6285  5231
6286  5232
6287  5233
6288  5234
6289  5235
6290  5236
6291  5237
6292  5238
6293  5239
6294  523A
6295  523B
6296  523C
6297  523D
6298  523E
6299  523F
6300  5240
6301  5241
6302  5242
6303  5243
6304  5244
6305  5245
6306  5246
6307  5247
6308  5248
6309  5249
6310  524A
6311  524B
6312  524C
6313  524D
6314  524E
6315  524F
6316  5250
6317  5251
6318  5252
6319  5253
6320  5254
6321  5255
6322  5256
6323  5257
6324  5258
6325  5259
6326  525A
6327  525B
6328  525C
6329  525D
6330  525E
6331  525F
6332  5260
6333  5261
6334  5262
6335  5263
6336  5264
6337  5265
6338  5266
6339  5267
6340  5268
6341  5269
6342  526A
6343  526B
6344  526C
6345  526D
6346  526E
6347  526F
6348  5270
6349  5271
6350  5272
6351  5273
6352  5274
6353  5275
6354  5276
6355  5277
6356  5278
6357  5279
6358  527A
6359  527B
6360  527C
6361  527D
6362  527E
6363  527F
6364  5280
6365  5281
6366  5282
6367  5283
6368  5284
6369  5285
6370  5286
6371  5287
6372  5288
6373  5289
6374  528A
6375  528B
6376  528C
6377  528D
6378  528E
6379  528F
6380  5290
6381  5291
6382  5292
6383  5293
6384  5294
6385  5295
6386  5296
6387  5297
6388  5298
6389  5299
6390  529A
6391  529B
6392  529C
6393  529D
6394  529E
6395  529F
6396  52A0
6397  52A1
6398  52A2
6399  52A3
6400  52A4
6401  52A5
6402  52A6
6403  52A7
6404  52A8
6405  52A9
6406  52AA
6407  52AB
6408  52AC
6409  52AD
6410  52AE
6411  52AF
6412  52B0
6413  52B1
6414  52B2
6415  52B3
6416  52B4
6417  52B5
6418  52B6
6419  52B7
6420  52B8
6421  52B9
6422  52BA
6423  52BB
6424  52BC
6425  52BD
6426  52BE
6427  52BF
6428  52C0
6429  52C1
6430  52C2
6431  52C3
6432  52C4
6433  52C5
6434  52C6
6435  52C7
6436  52C8
6437  52C9
6438  52CA
6439  52CB
6440  52CC
6441  52CD
6442  52CE
6443  52CF
6444  52D0
6445  52D1
6446  52D2
6447  52D3
6448  52D4
6449  52D5
6450  52D6
6451  52D7
6452  52D8
6453  52D9
6454  52DA
6455  52DB
6456  52DC
6457  52DD
6458  52DE
6459  52DF
6460  52E0
6461  52E1
6462  52E2
6463  52E3
6464  52E4
6465  52E5
6466  52E6
6467  52E7
6468  52E8
6469  52E9
6470  52EA
6471  52EB
6472  52EC
6473  52ED
6474  52EE
6475  52EF
6476  52F0
6477  52F1
6478  52F2
6479  52F3
6480  52F4
6481  52F5
6482  52F6
6483  52F7
6484  52F8
6485  52F9
6486  52FA
6487  52FB
6488  52FC
6489  52FD
6490  52FE
6491  52FF
6492  5300
6493  5301
6494  5302
6495  5303
6496  5304
6497  5305
6498  5306
6499  5307
6500  5308
6501  5309
6502  530A
6503  530B
6504  530C
6505  530D
6506  530E
6507  530F
6508  5310
6509  5311
6510  5312
6511  5313
6512  5314
6513  5315
6514  5316
6515  5317
6516  5318
6517  5319
6518  531A
6519  531B
6520  531C
6521  531D
6522  531E
6523  531F
6524  5320
6525  5321
6526  5322
6527  5323
6528  5324
6529  5325
6530  5326
6531  5327
6532  5328
6533  5329
6534  532A
6535  532B
6536  532C
6537  532D
6538  532E
6539  532F
6540  5330
6541  5331
6542  5332
6543  5333
6544  5334
6545  5335
6546  5336
6547  5337
6548  5338
6549  5339
6550  533A
6551  533B
6552  533C
6553  533D
6554  533E
6555  533F
6556  5340
6557  5341
6558  5342
6559  5343
6560  5344
6561  5345
6562  5346
6563  5347
6564  5348
6565  5349
6566  534A
6567  534B
6568  534C
6569  534D
6570  534E
6571  534F
6572  5350
6573  5351
6574  5352
6575  5353
6576  5354
6577  5355
6578  5356
6579  5357
6580  5358
6581  5359
6582  535A
6583  535B
6584  535C
6585  535D
6586  535E
6587  535F
6588  5360
6589  5361
6590  5362
6591  5363
6592  5364
6593  5365
6594  5366
6595  5367
6596  5368
6597  5369
6598  536A
6599  536B
6600  536C
6601  536D
6602  536E
6603  536F
6604  5370
6605  5371
6606  5372
6607  5373
6608  5374
6609  5375
6610  5376
6611  5377
6612  5378
6613  5379
6614  537A
6615  537B
6616  537C
6617  537D
6618  537E
6619  537F
6620  5380
6621  5381
6622  5382
6623  5383
6624  5384
6625  5385
6626  5386
6627  5387
6628  5388
6629  5389
6630  538A
6631  538B
6632  538C
6633  538D
6634  538E
6635  538F
6636  5390
6637  5391
6638  5392
6639  5393
6640  5394
6641  5395
6642  5396
6643  5397
6644  5398
6645  5399
6646  539A
6647  539B
6648  539C
6649  539D
6650  539E
6651  539F
6652  53A0
6653  53A1
6654  53A2
6655  53A3
6656  53A4
6657  53A5
6658  53A6
6659  53A7
6660  53A8
6661  53A9
6662  53AA
6663  53AB
6664  53AC
6665  53AD
6666  53AE
6667  53AF
6668  53B0
6669  53B1
6670  53B2
6671  53B3
6672  53B4
6673  53B5
6674  53B6
6675  53B7
6676  53B8
6677  53B9
6678  53BA
6679  53BB
6680  53BC
6681  53BD
6682  53BE
6683  53BF
6684  53C0
6685  53C1
6686  53C2
6687  53C3
6688  53C4
6689  53C5
6690  53C6
6691  53C7
6692  53C8
6693  53C9
6694  53CA
6695  53CB
6696  53CC
6697  53CD
6698  53CE
6699  53CF
6700  53D0
6701  53D1
6702  53D2
6703  53D3
6704  53D4
6705  53D5
6706  53D6
6707  53D7
6708  53D8
6709  53D9
6710  53DA
6711  53DB
6712  53DC
6713  53DD
6714  53DE
6715  53DF
6716  53E0
6717  53E1
6718  53E2
6719  53E3
6720  53E4
6721  53E5
6722  53E6
6723  53E7
6724  53E8
6725  53E9
6726  53EA
6727  53EB
6728  53EC
6729  53ED
6730  53EE
6731  53EF
6732  53F0
6733  53F1
6734  53F2
6735  53F3
6736  53F4
6737  53F5
6738  53F6
6739  53F7
6740  53F8
6741  53F9
6742  53FA
6743  53FB
6744  53FC
6745  53FD
6746  53FE
6747  53FF
6748  5400
6749  5401
6750  5402
6751  5403
6752  5404
6753  5405
6754  5406
6755  5407
6756  5408
6757  5409
6758  540A
6759  540B
6760  540C
6761  540D
6762  540E
6763  540F
6764  5410
6765  5411
6766  5412
6767  5413
6768  5414
6769  5415
6770  5416
6771  5417
6772  5418
6773  5419
6774  541A
6775  541B
6776  541C
6777  541D
6778  541E
6779  541F
6780  5420
6781  5421
6782  5422
6783  5423
6784  5424
6785  5425
6786  5426
6787  5427
6788  5428
6789  5429
6790  542A
6791  542B
6792  542C
6793  542D
6794  542E
6795  542F
6796  5430
6797  5431
6798  5432
6799  5433
6800  5434
6801  5435
6802  5436
6803  5437
6804  5438
6805  5439
6806  543A
6807  543B
6808  543C
6809  543D
6810  543E
6811  543F
6812  5440
6813  5441
6814  5442
6815  5443
6816  5444
6817  5445
6818  5446
6819  5447
6820  5448
6821  5449
6822  544A
6823  544B
6824  544C
6825  544D
6826  544E
6827  544F
6828  5450
6829  5451
6830  5452
6831  5453
6832  5454
6833  5455
6834  5456
6835  5457
6836  5458
6837  5459
6838  545A
6839  545B
6840  545C
6841  545D
6842  545E
6843  545F
6844  5460
6845  5461
6846  5462
6847  5463
6848  5464
6849  5465
6850  5466
6851  5467
6852  5468
6853  5469
6854  546A
6855  546B
6856  546C
6857  546D
6858  546E
6859  546F
6860  5470
6861  5471
6862  5472
6863  5473
6864  5474
6865  5475
6866  5476
6867  5477
6868  5478
6869  5479
6870  547A
6871  547B
6872  547C
6873  547D
6874  547E
6875  547F
6876  5480
6877  5481
6878  5482
6879  5483
6880  5484
6881  5485
6882  5486
6883  5487
6884  5488
6885  5489
6886  548A
6887  548B
6888  548C
6889  548D
6890  548E
6891  548F
6892  5490
6893  5491
6894  5492
6895  5493
6896  5494
6897  5495
6898  5496
6899  5497
6900  5498
6901  5499
6902  549A
6903  549B
6904  549C
6905  549D
6906  549E
6907  549F
6908  54A0
6909  54A1
6910  54A2
6911  54A3
6912  54A4
6913  54A5
6914  54A6
6915  54A7
6916  54A8
6917  54A9
6918  54AA
6919  54AB
6920  54AC
6921  54AD
6922  54AE
6923  54AF
6924  54B0
6925  54B1
6926  54B2
6927  54B3
6928  54B4
6929  54B5
6930  54B6
6931  54B7
6932  54B8
6933  54B9
6934  54BA
6935  54BB
6936  54BC
6937  54BD
6938  54BE
6939  54BF
6940  54C0
6941  54C1
6942  54C2
6943  54C3
6944  54C4
6945  54C5
6946  54C6
6947  54C7
6948  54C8
6949  54C9
6950  54CA
6951  54CB
6952  54CC
6953  54CD
6954  54CE
6955  54CF
6956  54D0
6957  54D1
6958  54D2
6959  54D3
6960  54D4
6961  54D5
6962  54D6
6963  54D7
6964  54D8
6965  54D9
6966  54DA
6967  54DB
6968  54DC
6969  54DD
6970  54DE
6971  54DF
6972  54E0
6973  54E1
6974  54E2
6975  54E3
6976  54E4
6977  54E5
6978  54E6
6979  54E7
6980  54E8
6981  54E9
6982  54EA
6983  54EB
6984  54EC
6985  54ED
6986  54EE
6987  54EF
6988  54F0
6989  54F1
6990  54F2
6991  54F3
6992  54F4
6993  54F5
6994  54F6
6995  54F7
6996  54F8
6997  54F9
6998  54FA
6999  54FB
7000  54FC
7001  54FD
7002  54FE
7003  54FF
7004  5500
7005  5501
7006  5502
7007  5503
7008  5504
7009  5505
7010  5506
7011  5507
7012  5508
7013  5509
7014  550A
7015  550B
7016  550C
7017  550D
7018  550E
7019  550F
7020  5510
7021  5511
7022  5512
7023  5513
7024  5514
7025  5515
7026  5516
7027  5517
7028  5518
7029  5519
7030  551A
7031  551B
7032  551C
7033  551D
7034  551E
7035  551F
7036  5520
7037  5521
7038  5522
7039  5523
7040  5524
7041  5525
7042  5526
7043  5527
7044  5528
7045  5529
7046  552A
7047  552B
7048  552C
7049  552D
7050  552E
7051  552F
7052  5530
7053  5531
7054  5532
7055  5533
7056  5534
7057  5535
7058  5536
7059  5537
7060  5538
7061  5539
7062  553A
7063  553B
7064  553C
7065  553D
7066  553E
7067  553F
7068  5540
7069  5541
7070  5542
7071  5543
7072  5544
7073  5545
7074  5546
7075  5547
7076  5548
7077  5549
7078  554A
7079  554B
7080  554C
7081  554D
7082  554E
7083  554F
7084  5550
7085  5551
7086  5552
7087  5553
7088  5554
7089  5555
7090  5556
7091  5557
7092  5558
7093  5559
7094  555A
7095  555B
7096  555C
7097  555D
7098  555E
7099  555F
7100  5560
7101  5561
7102  5562
7103  5563
7104  5564
7105  5565
7106  5566
7107  5567
7108  5568
7109  5569
7110  556A
7111  556B
7112  556C
7113  556D
7114  556E
7115  556F
7116  5570
7117  5571
7118  5572
7119  5573
7120  5574
7121  5575
7122  5576
7123  5577
7124  5578
7125  5579
7126  557A
7127  557B
7128  557C
7129  557D
7130  557E
7131  557F
7132  5580
7133  5581
7134  5582
7135  5583
7136  5584
7137  5585
7138  5586
7139  5587
7140  5588
7141  5589
7142  558A
7143  558B
7144  558C
7145  558D
7146  558E
7147  558F
7148  5590
7149  5591
7150  5592
7151  5593
7152  5594
7153  5595
7154  5596
7155  5597
7156  5598
7157  5599
7158  559A
7159  559B
7160  559C
7161  559D
7162  559E
7163  559F
7164  55A0
7165  55A1
7166  55A2
7167  55A3
7168  55A4
7169  55A5
7170  55A6
7171  55A7
7172  55A8
7173  55A9
7174  55AA
7175  55AB
7176  55AC
7177  55AD
7178  55AE
7179  55AF
7180  55B0
7181  55B1
7182  55B2
7183  55B3
7184  55B4
7185  55B5
7186  55B6
7187  55B7
7188  55B8
7189  55B9
7190  55BA
7191  55BB
7192  55BC
7193  55BD
7194  55BE
7195  55BF
7196  55C0
7197  55C1
7198  55C2
7199  55C3
7200  55C4
7201  55C5
7202  55C6
7203  55C7
7204  55C8
7205  55C9
7206  55CA
7207  55CB
7208  55CC
7209  55CD
7210  55CE
7211  55CF
7212  55D0
7213  55D1
7214  55D2
7215  55D3
7216  55D4
7217  55D5
7218  55D6
7219  55D7
7220  55D8
7221  55D9
7222  55DA
7223  55DB
7224  55DC
7225  55DD
7226  55DE
7227  55DF
7228  55E0
7229  55E1
7230  55E2
7231  55E3
7232  55E4
7233  55E5
7234  55E6
7235  55E7
7236  55E8
7237  55E9
7238  55EA
7239  55EB
7240  55EC
7241  55ED
7242  55EE
7243  55EF
7244  55F0
7245  55F1
7246  55F2
7247  55F3
7248  55F4
7249  55F5
7250  55F6
7251  55F7
7252  55F8
7253  55F9
7254  55FA
7255  55FB
7256  55FC
7257  55FD
7258  55FE
7259  55FF
7260  5600
7261  5601
7262  5602
7263  5603
7264  5604
7265  5605
7266  5606
7267  5607
7268  5608
7269  5609
7270  560A
7271  560B
7272  560C
7273  560D
7274  560E
7275  560F
7276  5610
7277  5611
7278  5612
7279  5613
7280  5614
7281  5615
7282  5616
7283  5617
7284  5618
7285  5619
7286  561A
7287  561B
7288  561C
7289  561D
7290  561E
7291  561F
7292  5620
7293  5621
7294  5622
7295  5623
7296  5624
7297  5625
7298  5626
7299  5627
7300  5628
7301  5629
7302  562A
7303  562B
7304  562C
7305  562D
7306  562E
7307  562F
7308  5630
7309  5631
7310  5632
7311  5633
7312  5634
7313  5635
7314  5636
7315  5637
7316  5638
7317  5639
7318  563A
7319  563B
7320  563C
7321  563D
7322  563E
7323  563F
7324  5640
7325  5641
7326  5642
7327  5643
7328  5644
7329  5645
7330  5646
7331  5647
7332  5648
7333  5649
7334  564A
7335  564B
7336  564C
7337  564D
7338  564E
7339  564F
7340  5650
7341  5651
7342  5652
7343  5653
7344  5654
7345  5655
7346  5656
7347  5657
7348  5658
7349  5659
7350  565A
7351  565B
7352  565C
7353  565D
7354  565E
7355  565F
7356  5660
7357  5661
7358  5662
7359  5663
7360  5664
7361  5665
7362  5666
7363  5667
7364  5668
7365  5669
7366  566A
7367  566B
7368  566C
7369  566D
7370  566E
7371  566F
7372  5670
7373  5671
7374  5672
7375  5673
7376  5674
7377  5675
7378  5676
7379  5677
7380  5678
7381  5679
7382  567A
7383  567B
7384  567C
7385  567D
7386  567E
7387  567F
7388  5680
7389  5681
7390  5682
7391  5683
7392  5684
7393  5685
7394  5686
7395  5687
7396  5688
7397  5689
7398  568A
7399  568B
7400  568C
7401  568D
7402  568E
7403  568F
7404  5690
7405  5691
7406  5692
7407  5693
7408  5694
7409  5695
7410  5696
7411  5697
7412  5698
7413  5699
7414  569A
7415  569B
7416  569C
7417  569D
7418  569E
7419  569F
7420  56A0
7421  56A1
7422  56A2
7423  56A3
7424  56A4
7425  56A5
7426  56A6
7427  56A7
7428  56A8
7429  56A9
7430  56AA
7431  56AB
7432  56AC
7433  56AD
7434  56AE
7435  56AF
7436  56B0
7437  56B1
7438  56B2
7439  56B3
7440  56B4
7441  56B5
7442  56B6
7443  56B7
7444  56B8
7445  56B9
7446  56BA
7447  56BB
7448  56BC
7449  56BD
7450  56BE
7451  56BF
7452  56C0
7453  56C1
7454  56C2
7455  56C3
7456  56C4
7457  56C5
7458  56C6
7459  56C7
7460  56C8
7461  56C9
7462  56CA
7463  56CB
7464  56CC
7465  56CD
7466  56CE
7467  56CF
7468  56D0
7469  56D1
7470  56D2
7471  56D3
7472  56D4
7473  56D5
7474  56D6
7475  56D7
7476  56D8
7477  56D9
7478  56DA
7479  56DB
7480  56DC
7481  56DD
7482  56DE
7483  56DF
7484  56E0
7485  56E1
7486  56E2
7487  56E3
7488  56E4
7489  56E5
7490  56E6
7491  56E7
7492  56E8
7493  56E9
7494  56EA
7495  56EB
7496  56EC
7497  56ED
7498  56EE
7499  56EF
7500  56F0
7501  56F1
7502  56F2
7503  56F3
7504  56F4
7505  56F5
7506  56F6
7507  56F7
7508  56F8
7509  56F9
7510  56FA
7511  56FB
7512  56FC
7513  56FD
7514  56FE
7515  56FF
7516  5700
7517  5701
7518  5702
7519  5703
7520  5704
7521  5705
7522  5706
7523  5707
7524  5708
7525  5709
7526  570A
7527  570B
7528  570C
7529  570D
7530  570E
7531  570F
7532  5710
7533  5711
7534  5712
7535  5713
7536  5714
7537  5715
7538  5716
7539  5717
7540  5718
7541  5719
7542  571A
7543  571B
7544  571C
7545  571D
7546  571E
7547  571F
7548  5720
7549  5721
7550  5722
7551  5723
7552  5724
7553  5725
7554  5726
7555  5727
7556  5728
7557  5729
7558  572A
7559  572B
7560  572C
7561  572D
7562  572E
7563  572F
7564  5730
7565  5731
7566  5732
7567  5733
7568  5734
7569  5735
7570  5736
7571  5737
7572  5738
7573  5739
7574  573A
7575  573B
7576  573C
7577  573D
7578  573E
7579  573F
7580  5740
7581  5741
7582  5742
7583  5743
7584  5744
7585  5745
7586  5746
7587  5747
7588  5748
7589  5749
7590  574A
7591  574B
7592  574C
7593  574D
7594  574E
7595  574F
7596  5750
7597  5751
7598  5752
7599  5753
7600  5754
7601  5755
7602  5756
7603  5757
7604  5758
7605  5759
7606  575A
7607  575B
7608  575C
7609  575D
7610  575E
7611  575F
7612  5760
7613  5761
7614  5762
7615  5763
7616  5764
7617  5765
7618  5766
7619  5767
7620  5768
7621  5769
7622  576A
7623  576B
7624  576C
7625  576D
7626  576E
7627  576F
7628  5770
7629  5771
7630  5772
7631  5773
7632  5774
7633  5775
7634  5776
7635  5777
7636  5778
7637  5779
7638  577A
7639  577B
7640  577C
7641  577D
7642  577E
7643  577F
7644  5780
7645  5781
7646  5782
7647  5783
7648  5784
7649  5785
7650  5786
7651  5787
7652  5788
7653  5789
7654  578A
7655  578B
7656  578C
7657  578D
7658  578E
7659  578F
7660  5790
7661  5791
7662  5792
7663  5793
7664  5794
7665  5795
7666  5796
7667  5797
7668  5798
7669  5799
7670  579A
7671  579B
7672  579C
7673  579D
7674  579E
7675  579F
7676  57A0
7677  57A1
7678  57A2
7679  57A3
7680  57A4
7681  57A5
7682  57A6
7683  57A7
7684  57A8
7685  57A9
7686  57AA
7687  57AB
7688  57AC
7689  57AD
7690  57AE
7691  57AF
7692  57B0
7693  57B1
7694  57B2
7695  57B3
7696  57B4
7697  57B5
7698  57B6
7699  57B7
7700  57B8
7701  57B9
7702  57BA
7703  57BB
7704  57BC
7705  57BD
7706  57BE
7707  57BF
7708  57C0
7709  57C1
7710  57C2
7711  57C3
7712  57C4
7713  57C5
7714  57C6
7715  57C7
7716  57C8
7717  57C9
7718  57CA
7719  57CB
7720  57CC
7721  57CD
7722  57CE
7723  57CF
7724  57D0
7725  57D1
7726  57D2
7727  57D3
7728  57D4
7729  57D5
7730  57D6
7731  57D7
7732  57D8
7733  57D9
7734  57DA
7735  57DB
7736  57DC
7737  57DD
7738  57DE
7739  57DF
7740  57E0
7741  57E1
7742  57E2
7743  57E3
7744  57E4
7745  57E5
7746  57E6
7747  57E7
7748  57E8
7749  57E9
7750  57EA
7751  57EB
7752  57EC
7753  57ED
7754  57EE
7755  57EF
7756  57F0
7757  57F1
7758  57F2
7759  57F3
7760  57F4
7761  57F5
7762  57F6
7763  57F7
7764  57F8
7765  57F9
7766  57FA
7767  57FB
7768  57FC
7769  57FD
7770  57FE
7771  57FF
7772  5800
7773  5801
7774  5802
7775  5803
7776  5804
7777  5805
7778  5806
7779  5807
7780  5808
7781  5809
7782  580A
7783  580B
7784  580C
7785  580D
7786  580E
7787  580F
7788  5810
7789  5811
7790  5812
7791  5813
7792  5814
7793  5815
7794  5816
7795  5817
7796  5818
7797  5819
7798  581A
7799  581B
7800  581C
7801  581D
7802  581E
7803  581F
7804  5820
7805  5821
7806  5822
7807  5823
7808  5824
7809  5825
7810  5826
7811  5827
7812  5828
7813  5829
7814  582A
7815  582B
7816  582C
7817  582D
7818  582E
7819  582F
7820  5830
7821  5831
7822  5832
7823  5833
7824  5834
7825  5835
7826  5836
7827  5837
7828  5838
7829  5839
7830  583A
7831  583B
7832  583C
7833  583D
7834  583E
7835  583F
7836  5840
7837  5841
7838  5842
7839  5843
7840  5844
7841  5845
7842  5846
7843  5847
7844  5848
7845  5849
7846  584A
7847  584B
7848  584C
7849  584D
7850  584E
7851  584F
7852  5850
7853  5851
7854  5852
7855  5853
7856  5854
7857  5855
7858  5856
7859  5857
7860  5858
7861  5859
7862  585A
7863  585B
7864  585C
7865  585D
7866  585E
7867  585F
7868  5860
7869  5861
7870  5862
7871  5863
7872  5864
7873  5865
7874  5866
7875  5867
7876  5868
7877  5869
7878  586A
7879  586B
7880  586C
7881  586D
7882  586E
7883  586F
7884  5870
7885  5871
7886  5872
7887  5873
7888  5874
7889  5875
7890  5876
7891  5877
7892  5878
7893  5879
7894  587A
7895  587B
7896  587C
7897  587D
7898  587E
7899  587F
7900  5880
7901  5881
7902  5882
7903  5883
7904  5884
7905  5885
7906  5886
7907  5887
7908  5888
7909  5889
7910  588A
7911  588B
7912  588C
7913  588D
7914  588E
7915  588F
7916  5890
7917  5891
7918  5892
7919  5893
7920  5894
7921  5895
7922  5896
7923  5897
7924  5898
7925  5899
7926  589A
7927  589B
7928  589C
7929  589D
7930  589E
7931  589F
7932  58A0
7933  58A1
7934  58A2
7935  58A3
7936  58A4
7937  58A5
7938  58A6
7939  58A7
7940  58A8
7941  58A9
7942  58AA
7943  58AB
7944  58AC
7945  58AD
7946  58AE
7947  58AF
7948  58B0
7949  58B1
7950  58B2
7951  58B3
7952  58B4
7953  58B5
7954  58B6
7955  58B7
7956  58B8
7957  58B9
7958  58BA
7959  58BB
7960  58BC
7961  58BD
7962  58BE
7963  58BF
7964  58C0
7965  58C1
7966  58C2
7967  58C3
7968  58C4
7969  58C5
7970  58C6
7971  58C7
7972  58C8
7973  58C9
7974  58CA
7975  58CB
7976  58CC
7977  58CD
7978  58CE
7979  58CF
7980  58D0
7981  58D1
7982  58D2
7983  58D3
7984  58D4
7985  58D5
7986  58D6
7987  58D7
7988  58D8
7989  58D9
7990  58DA
7991  58DB
7992  58DC
7993  58DD
7994  58DE
7995  58DF
7996  58E0
7997  58E1
7998  58E2
7999  58E3
8000  58E4
8001  58E5
8002  58E6
8003  58E7
8004  58E8
8005  58E9
8006  58EA
8007  58EB
8008  58EC
8009  58ED
8010  58EE
8011  58EF
8012  58F0
8013  58F1
8014  58F2
8015  58F3
8016  58F4
8017  58F5
8018  58F6
8019  58F7
8020  58F8
8021  58F9
8022  58FA
8023  58FB
8024  58FC
8025  58FD
8026  58FE
8027  58FF
8028  5900
8029  5901
8030  5902
8031  5903
8032  5904
8033  5905
8034  5906
8035  5907
8036  5908
8037  5909
8038  590A
8039  590B
8040  590C
8041  590D
8042  590E
8043  590F
8044  5910
8045  5911
8046  5912
8047  5913
8048  5914
8049  5915
8050  5916
8051  5917
8052  5918
8053  5919
8054  591A
8055  591B
8056  591C
8057  591D
8058  591E
8059  591F
8060  5920
8061  5921
8062  5922
8063  5923
8064  5924
8065  5925
8066  5926
8067  5927
8068  5928
8069  5929
8070  592A
8071  592B
8072  592C
8073  592D
8074  592E
8075  592F
8076  5930
8077  5931
8078  5932
8079  5933
8080  5934
8081  5935
8082  5936
8083  5937
8084  5938
8085  5939
8086  593A
8087  593B
8088  593C
8089  593D
8090  593E
8091  593F
8092  5940
8093  5941
8094  5942
8095  5943
8096  5944
8097  5945
8098  5946
8099  5947
8100  5948
8101  5949
8102  594A
8103  594B
8104  594C
8105  594D
8106  594E
8107  594F
8108  5950
8109  5951
8110  5952
8111  5953
8112  5954
8113  5955
8114  5956
8115  5957
8116  5958
8117  5959
8118  595A
8119  595B
8120  595C
8121  595D
8122  595E
8123  595F
8124  5960
8125  5961
8126  5962
8127  5963
8128  5964
8129  5965
8130  5966
8131  5967
8132  5968
8133  5969
8134  596A
8135  596B
8136  596C
8137  596D
8138  596E
8139  596F
8140  5970
8141  5971
8142  5972
8143  5973
8144  5974
8145  5975
8146  5976
8147  5977
8148  5978
8149  5979
8150  597A
8151  597B
8152  597C
8153  597D
8154  597E
8155  597F
8156  5980
8157  5981
8158  5982
8159  5983
8160  5984
8161  5985
8162  5986
8163  5987
8164  5988
8165  5989
8166  598A
8167  598B
8168  598C
8169  598D
8170  598E
8171  598F
8172  5990
8173  5991
8174  5992
8175  5993
8176  5994
8177  5995
8178  5996
8179  5997
8180  5998
8181  5999
8182  599A
8183  599B
8184  599C
8185  599D
8186  599E
8187  599F
8188  59A0
8189  59A1
8190  59A2
8191  59A3
8192  59A4
8193  59A5
8194  59A6
8195  59A7
8196  59A8
8197  59A9
8198  59AA
8199  59AB
8200  59AC
8201  59AD
8202  59AE
8203  59AF
8204  59B0
8205  59B1
8206  59B2
8207  59B3
8208  59B4
8209  59B5
8210  59B6
8211  59B7
8212  59B8
8213  59B9
8214  59BA
8215  59BB
8216  59BC
8217  59BD
8218  59BE
8219  59BF
8220  59C0
8221  59C1
8222  59C2
8223  59C3
8224  59C4
8225  59C5
8226  59C6
8227  59C7
8228  59C8
8229  59C9
8230  59CA
8231  59CB
8232  59CC
8233  59CD
8234  59CE
8235  59CF
8236  59D0
8237  59D1
8238  59D2
8239  59D3
8240  59D4
8241  59D5
8242  59D6
8243  59D7
8244  59D8
8245  59D9
8246  59DA
8247  59DB
8248  59DC
8249  59DD
8250  59DE
8251  59DF
8252  59E0
8253  59E1
8254  59E2
8255  59E3
8256  59E4
8257  59E5
8258  59E6
8259  59E7
8260  59E8
8261  59E9
8262  59EA
8263  59EB
8264  59EC
8265  59ED
8266  59EE
8267  59EF
8268  59F0
8269  59F1
8270  59F2
8271  59F3
8272  59F4
8273  59F5
8274  59F6
8275  59F7
8276  59F8
8277  59F9
8278  59FA
8279  59FB
8280  59FC
8281  59FD
8282  59FE
8283  59FF
8284  5A00
8285  5A01
8286  5A02
8287  5A03
8288  5A04
8289  5A05
8290  5A06
8291  5A07
8292  5A08
8293  5A09
8294  5A0A
8295  5A0B
8296  5A0C
8297  5A0D
8298  5A0E
8299  5A0F
8300  5A10
8301  5A11
8302  5A12
8303  5A13
8304  5A14
8305  5A15
8306  5A16
8307  5A17
8308  5A18
8309  5A19
8310  5A1A
8311  5A1B
8312  5A1C
8313  5A1D
8314  5A1E
8315  5A1F
8316  5A20
8317  5A21
8318  5A22
8319  5A23
8320  5A24
8321  5A25
8322  5A26
8323  5A27
8324  5A28
8325  5A29
8326  5A2A
8327  5A2B
8328  5A2C
8329  5A2D
8330  5A2E
8331  5A2F
8332  5A30
8333  5A31
8334  5A32
8335  5A33
8336  5A34
8337  5A35
8338  5A36
8339  5A37
8340  5A38
8341  5A39
8342  5A3A
8343  5A3B
8344  5A3C
8345  5A3D
8346  5A3E
8347  5A3F
8348  5A40
8349  5A41
8350  5A42
8351  5A43
8352  5A44
8353  5A45
8354  5A46
8355  5A47
8356  5A48
8357  5A49
8358  5A4A
8359  5A4B
8360  5A4C
8361  5A4D
8362  5A4E
8363  5A4F
8364  5A50
8365  5A51
8366  5A52
8367  5A53
8368  5A54
8369  5A55
8370  5A56
8371  5A57
8372  5A58
8373  5A59
8374  5A5A
8375  5A5B
8376  5A5C
8377  5A5D
8378  5A5E
8379  5A5F
8380  5A60
8381  5A61
8382  5A62
8383  5A63
8384  5A64
8385  5A65
8386  5A66
8387  5A67
8388  5A68
8389  5A69
8390  5A6A
8391  5A6B
8392  5A6C
8393  5A6D
8394  5A6E
8395  5A6F
8396  5A70
8397  5A71
8398  5A72
8399  5A73
8400  5A74
8401  5A75
8402  5A76
8403  5A77
8404  5A78
8405  5A79
8406  5A7A
8407  5A7B
8408  5A7C
8409  5A7D
8410  5A7E
8411  5A7F
8412  5A80
8413  5A81
8414  5A82
8415  5A83
8416  5A84
8417  5A85
8418  5A86
8419  5A87
8420  5A88
8421  5A89
8422  5A8A
8423  5A8B
8424  5A8C
8425  5A8D
8426  5A8E
8427  5A8F
8428  5A90
8429  5A91
8430  5A92
8431  5A93
8432  5A94
8433  5A95
8434  5A96
8435  5A97
8436  5A98
8437  5A99
8438  5A9A
8439  5A9B
8440  5A9C
8441  5A9D
8442  5A9E
8443  5A9F
8444  5AA0
8445  5AA1
8446  5AA2
8447  5AA3
8448  5AA4
8449  5AA5
8450  5AA6
8451  5AA7
8452  5AA8
8453  5AA9
8454  5AAA
8455  5AAB
8456  5AAC
8457  5AAD
8458  5AAE
8459  5AAF
8460  5AB0
8461  5AB1
8462  5AB2
8463  5AB3
8464  5AB4
8465  5AB5
8466  5AB6
8467  5AB7
8468  5AB8
8469  5AB9
8470  5ABA
8471  5ABB
8472  5ABC
8473  5ABD
8474  5ABE
8475  5ABF
8476  5AC0
8477  5AC1
8478  5AC2
8479  5AC3
8480  5AC4
8481  5AC5
8482  5AC6
8483  5AC7
8484  5AC8
8485  5AC9
8486  5ACA
8487  5ACB
8488  5ACC
8489  5ACD
8490  5ACE
8491  5ACF
8492  5AD0
8493  5AD1
8494  5AD2
8495  5AD3
8496  5AD4
8497  5AD5
8498  5AD6
8499  5AD7
8500  5AD8
8501  5AD9
8502  5ADA
8503  5ADB
8504  5ADC
8505  5ADD
8506  5ADE
8507  5ADF
8508  5AE0
8509  5AE1
8510  5AE2
8511  5AE3
8512  5AE4
8513  5AE5
8514  5AE6
8515  5AE7
8516  5AE8
8517  5AE9
8518  5AEA
8519  5AEB
8520  5AEC
8521  5AED
8522  5AEE
8523  5AEF
8524  5AF0
8525  5AF1
8526  5AF2
8527  5AF3
8528  5AF4
8529  5AF5
8530  5AF6
8531  5AF7
8532  5AF8
8533  5AF9
8534  5AFA
8535  5AFB
8536  5AFC
8537  5AFD
8538  5AFE
8539  5AFF
8540  5B00
8541  5B01
8542  5B02
8543  5B03
8544  5B04
8545  5B05
8546  5B06
8547  5B07
8548  5B08
8549  5B09
8550  5B0A
8551  5B0B
8552  5B0C
8553  5B0D
8554  5B0E
8555  5B0F
8556  5B10
8557  5B11
8558  5B12
8559  5B13
8560  5B14
8561  5B15
8562  5B16
8563  5B17
8564  5B18
8565  5B19
8566  5B1A
8567  5B1B
8568  5B1C
8569  5B1D
8570  5B1E
8571  5B1F
8572  5B20
8573  5B21
8574  5B22
8575  5B23
8576  5B24
8577  5B25
8578  5B26
8579  5B27
8580  5B28
8581  5B29
8582  5B2A
8583  5B2B
8584  5B2C
8585  5B2D
8586  5B2E
8587  5B2F
8588  5B30
8589  5B31
8590  5B32
8591  5B33
8592  5B34
8593  5B35
8594  5B36
8595  5B37
8596  5B38
8597  5B39
8598  5B3A
8599  5B3B
8600  5B3C
8601  5B3D
8602  5B3E
8603  5B3F
8604  5B40
8605  5B41
8606  5B42
8607  5B43
8608  5B44
8609  5B45
8610  5B46
8611  5B47
8612  5B48
8613  5B49
8614  5B4A
8615  5B4B
8616  5B4C
8617  5B4D
8618  5B4E
8619  5B4F
8620  5B50
8621  5B51
8622  5B52
8623  5B53
8624  5B54
8625  5B55
8626  5B56
8627  5B57
8628  5B58
8629  5B59
8630  5B5A
8631  5B5B
8632  5B5C
8633  5B5D
8634  5B5E
8635  5B5F
8636  5B60
8637  5B61
8638  5B62
8639  5B63
8640  5B64
8641  5B65
8642  5B66
8643  5B67
8644  5B68
8645  5B69
8646  5B6A
8647  5B6B
8648  5B6C
8649  5B6D
8650  5B6E
8651  5B6F
8652  5B70
8653  5B71
8654  5B72
8655  5B73
8656  5B74
8657  5B75
8658  5B76
8659  5B77
8660  5B78
8661  5B79
8662  5B7A
8663  5B7B
8664  5B7C
8665  5B7D
8666  5B7E
8667  5B7F
8668  5B80
8669  5B81
8670  5B82
8671  5B83
8672  5B84
8673  5B85
8674  5B86
8675  5B87
8676  5B88
8677  5B89
8678  5B8A
8679  5B8B
8680  5B8C
8681  5B8D
8682  5B8E
8683  5B8F
8684  5B90
8685  5B91
8686  5B92
8687  5B93
8688  5B94
8689  5B95
8690  5B96
8691  5B97
8692  5B98
8693  5B99
8694  5B9A
8695  5B9B
8696  5B9C
8697  5B9D
8698  5B9E
8699  5B9F
8700  5BA0
8701  5BA1
8702  5BA2
8703  5BA3
8704  5BA4
8705  5BA5
8706  5BA6
8707  5BA7
8708  5BA8
8709  5BA9
8710  5BAA
8711  5BAB
8712  5BAC
8713  5BAD
8714  5BAE
8715  5BAF
8716  5BB0
8717  5BB1
8718  5BB2
8719  5BB3
8720  5BB4
8721  5BB5
8722  5BB6
8723  5BB7
8724  5BB8
8725  5BB9
8726  5BBA
8727  5BBB
8728  5BBC
8729  5BBD
8730  5BBE
8731  5BBF
8732  5BC0
8733  5BC1
8734  5BC2
8735  5BC3
8736  5BC4
8737  5BC5
8738  5BC6
8739  5BC7
8740  5BC8
8741  5BC9
8742  5BCA
8743  5BCB
8744  5BCC
8745  5BCD
8746  5BCE
8747  5BCF
8748  5BD0
8749  5BD1
8750  5BD2
8751  5BD3
8752  5BD4
8753  5BD5
8754  5BD6
8755  5BD7
8756  5BD8
8757  5BD9
8758  5BDA
8759  5BDB
8760  5BDC
8761  5BDD
8762  5BDE
8763  5BDF
8764  5BE0
8765  5BE1
8766  5BE2
8767  5BE3
8768  5BE4
8769  5BE5
8770  5BE6
8771  5BE7
8772  5BE8
8773  5BE9
8774  5BEA
8775  5BEB
8776  5BEC
8777  5BED
8778  5BEE
8779  5BEF
8780  5BF0
8781  5BF1
8782  5BF2
8783  5BF3
8784  5BF4
8785  5BF5
8786  5BF6
8787  5BF7
8788  5BF8
8789  5BF9
8790  5BFA
8791  5BFB
8792  5BFC
8793  5BFD
8794  5BFE
8795  5BFF
8796  5C00
8797  5C01
8798  5C02
8799  5C03
8800  5C04
8801  5C05
8802  5C06
8803  5C07
8804  5C08
8805  5C09
8806  5C0A
8807  5C0B
8808  5C0C
8809  5C0D
8810  5C0E
8811  5C0F
8812  5C10
8813  5C11
8814  5C12
8815  5C13
8816  5C14
8817  5C15
8818  5C16
8819  5C17
8820  5C18
8821  5C19
8822  5C1A
8823  5C1B
8824  5C1C
8825  5C1D
8826  5C1E
8827  5C1F
8828  5C20
8829  5C21
8830  5C22
8831  5C23
8832  5C24
8833  5C25
8834  5C26
8835  5C27
8836  5C28
8837  5C29
8838  5C2A
8839  5C2B
8840  5C2C
8841  5C2D
8842  5C2E
8843  5C2F
8844  5C30
8845  5C31
8846  5C32
8847  5C33
8848  5C34
8849  5C35
8850  5C36
8851  5C37
8852  5C38
8853  5C39
8854  5C3A
8855  5C3B
8856  5C3C
8857  5C3D
8858  5C3E
8859  5C3F
8860  5C40
8861  5C41
8862  5C42
8863  5C43
8864  5C44
8865  5C45
8866  5C46
8867  5C47
8868  5C48
8869  5C49
8870  5C4A
8871  5C4B
8872  5C4C
8873  5C4D
8874  5C4E
8875  5C4F
8876  5C50
8877  5C51
8878  5C52
8879  5C53
8880  5C54
8881  5C55
8882  5C56
8883  5C57
8884  5C58
8885  5C59
8886  5C5A
8887  5C5B
8888  5C5C
8889  5C5D
8890  5C5E
8891  5C5F
8892  5C60
8893  5C61
8894  5C62
8895  5C63
8896  5C64
8897  5C65
8898  5C66
8899  5C67
8900  5C68
8901  5C69
8902  5C6A
8903  5C6B
8904  5C6C
8905  5C6D
8906  5C6E
8907  5C6F
8908  5C70
8909  5C71
8910  5C72
8911  5C73
8912  5C74
8913  5C75
8914  5C76
8915  5C77
8916  5C78
8917  5C79
8918  5C7A
8919  5C7B
8920  5C7C
8921  5C7D
8922  5C7E
8923  5C7F
8924  5C80
8925  5C81
8926  5C82
8927  5C83
8928  5C84
8929  5C85
8930  5C86
8931  5C87
8932  5C88
8933  5C89
8934  5C8A
8935  5C8B
8936  5C8C
8937  5C8D
8938  5C8E
8939  5C8F
8940  5C90
8941  5C91
8942  5C92
8943  5C93
8944  5C94
8945  5C95
8946  5C96
8947  5C97
8948  5C98
8949  5C99
8950  5C9A
8951  5C9B
8952  5C9C
8953  5C9D
8954  5C9E
8955  5C9F
8956  5CA0
8957  5CA1
8958  5CA2
8959  5CA3
8960  5CA4
8961  5CA5
8962  5CA6
8963  5CA7
8964  5CA8
8965  5CA9
8966  5CAA
8967  5CAB
8968  5CAC
8969  5CAD
8970  5CAE
8971  5CAF
8972  5CB0
8973  5CB1
8974  5CB2
8975  5CB3
8976  5CB4
8977  5CB5
8978  5CB6
8979  5CB7
8980  5CB8
8981  5CB9
8982  5CBA
8983  5CBB
8984  5CBC
8985  5CBD
8986  5CBE
8987  5CBF
8988  5CC0
8989  5CC1
8990  5CC2
8991  5CC3
8992  5CC4
8993  5CC5
8994  5CC6
8995  5CC7
8996  5CC8
8997  5CC9
8998  5CCA
8999  5CCB
9000  5CCC
9001  5CCD
9002  5CCE
9003  5CCF
9004  5CD0
9005  5CD1
9006  5CD2
9007  5CD3
9008  5CD4
9009  5CD5
9010  5CD6
9011  5CD7
9012  5CD8
9013  5CD9
9014  5CDA
9015  5CDB
9016  5CDC
9017  5CDD
9018  5CDE
9019  5CDF
9020  5CE0
9021  5CE1
9022  5CE2
9023  5CE3
9024  5CE4
9025  5CE5
9026  5CE6
9027  5CE7
9028  5CE8
9029  5CE9
9030  5CEA
9031  5CEB
9032  5CEC
9033  5CED
9034  5CEE
9035  5CEF
9036  5CF0
9037  5CF1
9038  5CF2
9039  5CF3
9040  5CF4
9041  5CF5
9042  5CF6
9043  5CF7
9044  5CF8
9045  5CF9
9046  5CFA
9047  5CFB
9048  5CFC
9049  5CFD
9050  5CFE
9051  5CFF
9052  5D00
9053  5D01
9054  5D02
9055  5D03
9056  5D04
9057  5D05
9058  5D06
9059  5D07
9060  5D08
9061  5D09
9062  5D0A
9063  5D0B
9064  5D0C
9065  5D0D
9066  5D0E
9067  5D0F
9068  5D10
9069  5D11
9070  5D12
9071  5D13
9072  5D14
9073  5D15
9074  5D16
9075  5D17
9076  5D18
9077  5D19
9078  5D1A
9079  5D1B
9080  5D1C
9081  5D1D
9082  5D1E
9083  5D1F
9084  5D20
9085  5D21
9086  5D22
9087  5D23
9088  5D24
9089  5D25
9090  5D26
9091  5D27
9092  5D28
9093  5D29
9094  5D2A
9095  5D2B
9096  5D2C
9097  5D2D
9098  5D2E
9099  5D2F
9100  5D30
9101  5D31
9102  5D32
9103  5D33
9104  5D34
9105  5D35
9106  5D36
9107  5D37
9108  5D38
9109  5D39
9110  5D3A
9111  5D3B
9112  5D3C
9113  5D3D
9114  5D3E
9115  5D3F
9116  5D40
9117  5D41
9118  5D42
9119  5D43
9120  5D44
9121  5D45
9122  5D46
9123  5D47
9124  5D48
9125  5D49
9126  5D4A
9127  5D4B
9128  5D4C
9129  5D4D
9130  5D4E
9131  5D4F
9132  5D50
9133  5D51
9134  5D52
9135  5D53
9136  5D54
9137  5D55
9138  5D56
9139  5D57
9140  5D58
9141  5D59
9142  5D5A
9143  5D5B
9144  5D5C
9145  5D5D
9146  5D5E
9147  5D5F
9148  5D60
9149  5D61
9150  5D62
9151  5D63
9152  5D64
9153  5D65
9154  5D66
9155  5D67
9156  5D68
9157  5D69
9158  5D6A
9159  5D6B
9160  5D6C
9161  5D6D
9162  5D6E
9163  5D6F
9164  5D70
9165  5D71
9166  5D72
9167  5D73
9168  5D74
9169  5D75
9170  5D76
9171  5D77
9172  5D78
9173  5D79
9174  5D7A
9175  5D7B
9176  5D7C
9177  5D7D
9178  5D7E
9179  5D7F
9180  5D80
9181  5D81
9182  5D82
9183  5D83
9184  5D84
9185  5D85
9186  5D86
9187  5D87
9188  5D88
9189  5D89
9190  5D8A
9191  5D8B
9192  5D8C
9193  5D8D
9194  5D8E
9195  5D8F
9196  5D90
9197  5D91
9198  5D92
9199  5D93
9200  5D94
9201  5D95
9202  5D96
9203  5D97
9204  5D98
9205  5D99
9206  5D9A
9207  5D9B
9208  5D9C
9209  5D9D
9210  5D9E
9211  5D9F
9212  5DA0
9213  5DA1
9214  5DA2
9215  5DA3
9216  5DA4
9217  5DA5
9218  5DA6
9219  5DA7
9220  5DA8
9221  5DA9
9222  5DAA
9223  5DAB
9224  5DAC
9225  5DAD
9226  5DAE
9227  5DAF
9228  5DB0
9229  5DB1
9230  5DB2
9231  5DB3
9232  5DB4
9233  5DB5
9234  5DB6
9235  5DB7
9236  5DB8
9237  5DB9
9238  5DBA
9239  5DBB
9240  5DBC
9241  5DBD
9242  5DBE
9243  5DBF
9244  5DC0
9245  5DC1
9246  5DC2
9247  5DC3
9248  5DC4
9249  5DC5
9250  5DC6
9251  5DC7
9252  5DC8
9253  5DC9
9254  5DCA
9255  5DCB
9256  5DCC
9257  5DCD
9258  5DCE
9259  5DCF
9260  5DD0
9261  5DD1
9262  5DD2
9263  5DD3
9264  5DD4
9265  5DD5
9266  5DD6
9267  5DD7
9268  5DD8
9269  5DD9
9270  5DDA
9271  5DDB
9272  5DDC
9273  5DDD
9274  5DDE
9275  5DDF
9276  5DE0
9277  5DE1
9278  5DE2
9279  5DE3
9280  5DE4
9281  5DE5
9282  5DE6
9283  5DE7
9284  5DE8
9285  5DE9
9286  5DEA
9287  5DEB
9288  5DEC
9289  5DED
9290  5DEE
9291  5DEF
9292  5DF0
9293  5DF1
9294  5DF2
9295  5DF3
9296  5DF4
9297  5DF5
9298  5DF6
9299  5DF7
9300  5DF8
9301  5DF9
9302  5DFA
9303  5DFB
9304  5DFC
9305  5DFD
9306  5DFE
9307  5DFF
9308  5E00
9309  5E01
9310  5E02
9311  5E03
9312  5E04
9313  5E05
9314  5E06
9315  5E07
9316  5E08
9317  5E09
9318  5E0A
9319  5E0B
9320  5E0C
9321  5E0D
9322  5E0E
9323  5E0F
9324  5E10
9325  5E11
9326  5E12
9327  5E13
9328  5E14
9329  5E15
9330  5E16
9331  5E17
9332  5E18
9333  5E19
9334  5E1A
9335  5E1B
9336  5E1C
9337  5E1D
9338  5E1E
9339  5E1F
9340  5E20
9341  5E21
9342  5E22
9343  5E23
9344  5E24
9345  5E25
9346  5E26
9347  5E27
9348  5E28
9349  5E29
9350  5E2A
9351  5E2B
9352  5E2C
9353  5E2D
9354  5E2E
9355  5E2F
9356  5E30
9357  5E31
9358  5E32
9359  5E33
9360  5E34
9361  5E35
9362  5E36
9363  5E37
9364  5E38
9365  5E39
9366  5E3A
9367  5E3B
9368  5E3C
9369  5E3D
9370  5E3E
9371  5E3F
9372  5E40
9373  5E41
9374  5E42
9375  5E43
9376  5E44
9377  5E45
9378  5E46
9379  5E47
9380  5E48
9381  5E49
9382  5E4A
9383  5E4B
9384  5E4C
9385  5E4D
9386  5E4E
9387  5E4F
9388  5E50
9389  5E51
9390  5E52
9391  5E53
9392  5E54
9393  5E55
9394  5E56
9395  5E57
9396  5E58
9397  5E59
9398  5E5A
9399  5E5B
9400  5E5C
9401  5E5D
9402  5E5E
9403  5E5F
9404  5E60
9405  5E61
9406  5E62
9407  5E63
9408  5E64
9409  5E65
9410  5E66
9411  5E67
9412  5E68
9413  5E69
9414  5E6A
9415  5E6B
9416  5E6C
9417  5E6D
9418  5E6E
9419  5E6F
9420  5E70
9421  5E71
9422  5E72
9423  5E73
9424  5E74
9425  5E75
9426  5E76
9427  5E77
9428  5E78
9429  5E79
9430  5E7A
9431  5E7B
9432  5E7C
9433  5E7D
9434  5E7E
9435  5E7F
9436  5E80
9437  5E81
9438  5E82
9439  5E83
9440  5E84
9441  5E85
9442  5E86
9443  5E87
9444  5E88
9445  5E89
9446  5E8A
9447  5E8B
9448  5E8C
9449  5E8D
9450  5E8E
9451  5E8F
9452  5E90
9453  5E91
9454  5E92
9455  5E93
9456  5E94
9457  5E95
9458  5E96
9459  5E97
9460  5E98
9461  5E99
9462  5E9A
9463  5E9B
9464  5E9C
9465  5E9D
9466  5E9E
9467  5E9F
9468  5EA0
9469  5EA1
9470  5EA2
9471  5EA3
9472  5EA4
9473  5EA5
9474  5EA6
9475  5EA7
9476  5EA8
9477  5EA9
9478  5EAA
9479  5EAB
9480  5EAC
9481  5EAD
9482  5EAE
9483  5EAF
9484  5EB0
9485  5EB1
9486  5EB2
9487  5EB3
9488  5EB4
9489  5EB5
9490  5EB6
9491  5EB7
9492  5EB8
9493  5EB9
9494  5EBA
9495  5EBB
9496  5EBC
9497  5EBD
9498  5EBE
9499  5EBF
9500  5EC0
9501  5EC1
9502  5EC2
9503  5EC3
9504  5EC4
9505  5EC5
9506  5EC6
9507  5EC7
9508  5EC8
9509  5EC9
9510  5ECA
9511  5ECB
9512  5ECC
9513  5ECD
9514  5ECE
9515  5ECF
9516  5ED0
9517  5ED1
9518  5ED2
9519  5ED3
9520  5ED4
9521  5ED5
9522  5ED6
9523  5ED7
9524  5ED8
9525  5ED9
9526  5EDA
9527  5EDB
9528  5EDC
9529  5EDD
9530  5EDE
9531  5EDF
9532  5EE0
9533  5EE1
9534  5EE2
9535  5EE3
9536  5EE4
9537  5EE5
9538  5EE6
9539  5EE7
9540  5EE8
9541  5EE9
9542  5EEA
9543  5EEB
9544  5EEC
9545  5EED
9546  5EEE
9547  5EEF
9548  5EF0
9549  5EF1
9550  5EF2
9551  5EF3
9552  5EF4
9553  5EF5
9554  5EF6
9555  5EF7
9556  5EF8
9557  5EF9
9558  5EFA
9559  5EFB
9560  5EFC
9561  5EFD
9562  5EFE
9563  5EFF
9564  5F00
9565  5F01
9566  5F02
9567  5F03
9568  5F04
9569  5F05
9570  5F06
9571  5F07
9572  5F08
9573  5F09
9574  5F0A
9575  5F0B
9576  5F0C
9577  5F0D
9578  5F0E
9579  5F0F
9580  5F10
9581  5F11
9582  5F12
9583  5F13
9584  5F14
9585  5F15
9586  5F16
9587  5F17
9588  5F18
9589  5F19
9590  5F1A
9591  5F1B
9592  5F1C
9593  5F1D
9594  5F1E
9595  5F1F
9596  5F20
9597  5F21
9598  5F22
9599  5F23
9600  5F24
9601  5F25
9602  5F26
9603  5F27
9604  5F28
9605  5F29
9606  5F2A
9607  5F2B
9608  5F2C
9609  5F2D
9610  5F2E
9611  5F2F
9612  5F30
9613  5F31
9614  5F32
9615  5F33
9616  5F34
9617  5F35
9618  5F36
9619  5F37
9620  5F38
9621  5F39
9622  5F3A
9623  5F3B
9624  5F3C
9625  5F3D
9626  5F3E
9627  5F3F
9628  5F40
9629  5F41
9630  5F42
9631  5F43
9632  5F44
9633  5F45
9634  5F46
9635  5F47
9636  5F48
9637  5F49
9638  5F4A
9639  5F4B
9640  5F4C
9641  5F4D
9642  5F4E
9643  5F4F
9644  5F50
9645  5F51
9646  5F52
9647  5F53
9648  5F54
9649  5F55
9650  5F56
9651  5F57
9652  5F58
9653  5F59
9654  5F5A
9655  5F5B
9656  5F5C
9657  5F5D
9658  5F5E
9659  5F5F
9660  5F60
9661  5F61
9662  5F62
9663  5F63
9664  5F64
9665  5F65
9666  5F66
9667  5F67
9668  5F68
9669  5F69
9670  5F6A
9671  5F6B
9672  5F6C
9673  5F6D
9674  5F6E
9675  5F6F
9676  5F70
9677  5F71
9678  5F72
9679  5F73
9680  5F74
9681  5F75
9682  5F76
9683  5F77
9684  5F78
9685  5F79
9686  5F7A
9687  5F7B
9688  5F7C
9689  5F7D
9690  5F7E
9691  5F7F
9692  5F80
9693  5F81
9694  5F82
9695  5F83
9696  5F84
9697  5F85
9698  5F86
9699  5F87
9700  5F88
9701  5F89
9702  5F8A
9703  5F8B
9704  5F8C
9705  5F8D
9706  5F8E
9707  5F8F
9708  5F90
9709  5F91
9710  5F92
9711  5F93
9712  5F94
9713  5F95
9714  5F96
9715  5F97
9716  5F98
9717  5F99
9718  5F9A
9719  5F9B
9720  5F9C
9721  5F9D
9722  5F9E
9723  5F9F
9724  5FA0
9725  5FA1
9726  5FA2
9727  5FA3
9728  5FA4
9729  5FA5
9730  5FA6
9731  5FA7
9732  5FA8
9733  5FA9
9734  5FAA
9735  5FAB
9736  5FAC
9737  5FAD
9738  5FAE
9739  5FAF
9740  5FB0
9741  5FB1
9742  5FB2
9743  5FB3
9744  5FB4
9745  5FB5
9746  5FB6
9747  5FB7
9748  5FB8
9749  5FB9
9750  5FBA
9751  5FBB
9752  5FBC
9753  5FBD
9754  5FBE
9755  5FBF
9756  5FC0
9757  5FC1
9758  5FC2
9759  5FC3
9760  5FC4
9761  5FC5
9762  5FC6
9763  5FC7
9764  5FC8
9765  5FC9
9766  5FCA
9767  5FCB
9768  5FCC
9769  5FCD
9770  5FCE
9771  5FCF
9772  5FD0
9773  5FD1
9774  5FD2
9775  5FD3
9776  5FD4
9777  5FD5
9778  5FD6
9779  5FD7
9780  5FD8
9781  5FD9
9782  5FDA
9783  5FDB
9784  5FDC
9785  5FDD
9786  5FDE
9787  5FDF
9788  5FE0
9789  5FE1
9790  5FE2
9791  5FE3
9792  5FE4
9793  5FE5
9794  5FE6
9795  5FE7
9796  5FE8
9797  5FE9
9798  5FEA
9799  5FEB
9800  5FEC
9801  5FED
9802  5FEE
9803  5FEF
9804  5FF0
9805  5FF1
9806  5FF2
9807  5FF3
9808  5FF4
9809  5FF5
9810  5FF6
9811  5FF7
9812  5FF8
9813  5FF9
9814  5FFA
9815  5FFB
9816  5FFC
9817  5FFD
9818  5FFE
9819  5FFF
9820  6000
9821  6001
9822  6002
9823  6003
9824  6004
9825  6005
9826  6006
9827  6007
9828  6008
9829  6009
9830  600A
9831  600B
9832  600C
9833  600D
9834  600E
9835  600F
9836  6010
9837  6011
9838  6012
9839  6013
9840  6014
9841  6015
9842  6016
9843  6017
9844  6018
9845  6019
9846  601A
9847  601B
9848  601C
9849  601D
9850  601E
9851  601F
9852  6020
9853  6021
9854  6022
9855  6023
9856  6024
9857  6025
9858  6026
9859  6027
9860  6028
9861  6029
9862  602A
9863  602B
9864  602C
9865  602D
9866  602E
9867  602F
9868  6030
9869  6031
9870  6032
9871  6033
9872  6034
9873  6035
9874  6036
9875  6037
9876  6038
9877  6039
9878  603A
9879  603B
9880  603C
9881  603D
9882  603E
9883  603F
9884  6040
9885  6041
9886  6042
9887  6043
9888  6044
9889  6045
9890  6046
9891  6047
9892  6048
9893  6049
9894  604A
9895  604B
9896  604C
9897  604D
9898  604E
9899  604F
9900  6050
9901  6051
9902  6052
9903  6053
9904  6054
9905  6055
9906  6056
9907  6057
9908  6058
9909  6059
9910  605A
9911  605B
9912  605C
9913  605D
9914  605E
9915  605F
9916  6060
9917  6061
9918  6062
9919  6063
9920  6064
9921  6065
9922  6066
9923  6067
9924  6068
9925  6069
9926  606A
9927  606B
9928  606C
9929  606D
9930  606E
9931  606F
9932  6070
9933  6071
9934  6072
9935  6073
9936  6074
9937  6075
9938  6076
9939  6077
9940  6078
9941  6079
9942  607A
9943  607B
9944  607C
9945  607D
9946  607E
9947  607F
9948  6080
9949  6081
9950  6082
9951  6083
9952  6084
9953  6085
9954  6086
9955  6087
9956  6088
9957  6089
9958  608A
9959  608B
9960  608C
9961  608D
9962  608E
9963  608F
9964  6090
9965  6091
9966  6092
9967  6093
9968  6094
9969  6095
9970  6096
9971  6097
9972  6098
9973  6099
9974  609A
9975  609B
9976  609C
9977  609D
9978  609E
9979  609F
9980  60A0
9981  60A1
9982  60A2
9983  60A3
9984  60A4
9985  60A5
9986  60A6
9987  60A7
9988  60A8
9989  60A9
9990  60AA
9991  60AB
9992  60AC
9993  60AD
9994  60AE
9995  60AF
9996  60B0
9997  60B1
9998  60B2
9999  60B3
10000  60B4
10001  60B5
10002  60B6
10003  60B7
10004  60B8
10005  60B9
10006  60BA
10007  60BB
10008  60BC
10009  60BD
10010  60BE
10011  60BF
10012  60C0
10013  60C1
10014  60C2
10015  60C3
10016  60C4
10017  60C5
10018  60C6
10019  60C7
10020  60C8
10021  60C9
10022  60CA
10023  60CB
10024  60CC
10025  60CD
10026  60CE
10027  60CF
10028  60D0
10029  60D1
10030  60D2
10031  60D3
10032  60D4
10033  60D5
10034  60D6
10035  60D7
10036  60D8
10037  60D9
10038  60DA
10039  60DB
10040  60DC
10041  60DD
10042  60DE
10043  60DF
10044  60E0
10045  60E1
10046  60E2
10047  60E3
10048  60E4
10049  60E5
10050  60E6
10051  60E7
10052  60E8
10053  60E9
10054  60EA
10055  60EB
10056  60EC
10057  60ED
10058  60EE
10059  60EF
10060  60F0
10061  60F1
10062  60F2
10063  60F3
10064  60F4
10065  60F5
10066  60F6
10067  60F7
10068  60F8
10069  60F9
10070  60FA
10071  60FB
10072  60FC
10073  60FD
10074  60FE
10075  60FF
10076  6100
10077  6101
10078  6102
10079  6103
10080  6104
10081  6105
10082  6106
10083  6107
10084  6108
10085  6109
10086  610A
10087  610B
10088  610C
10089  610D
10090  610E
10091  610F
10092  6110
10093  6111
10094  6112
10095  6113
10096  6114
10097  6115
10098  6116
10099  6117
10100  6118
10101  6119
10102  611A
10103  611B
10104  611C
10105  611D
10106  611E
10107  611F
10108  6120
10109  6121
10110  6122
10111  6123
10112  6124
10113  6125
10114  6126
10115  6127
10116  6128
10117  6129
10118  612A
10119  612B
10120  612C
10121  612D
10122  612E
10123  612F
10124  6130
10125  6131
10126  6132
10127  6133
10128  6134
10129  6135
10130  6136
10131  6137
10132  6138
10133  6139
10134  613A
10135  613B
10136  613C
10137  613D
10138  613E
10139  613F
10140  6140
10141  6141
10142  6142
10143  6143
10144  6144
10145  6145
10146  6146
10147  6147
10148  6148
10149  6149
10150  614A
10151  614B
10152  614C
10153  614D
10154  614E
10155  614F
10156  6150
10157  6151
10158  6152
10159  6153
10160  6154
10161  6155
10162  6156
10163  6157
10164  6158
10165  6159
10166  615A
10167  615B
10168  615C
10169  615D
10170  615E
10171  615F
10172  6160
10173  6161
10174  6162
10175  6163
10176  6164
10177  6165
10178  6166
10179  6167
10180  6168
10181  6169
10182  616A
10183  616B
10184  616C
10185  616D
10186  616E
10187  616F
10188  6170
10189  6171
10190  6172
10191  6173
10192  6174
10193  6175
10194  6176
10195  6177
10196  6178
10197  6179
10198  617A
10199  617B
10200  617C
10201  617D
10202  617E
10203  617F
10204  6180
10205  6181
10206  6182
10207  6183
10208  6184
10209  6185
10210  6186
10211  6187
10212  6188
10213  6189
10214  618A
10215  618B
10216  618C
10217  618D
10218  618E
10219  618F
10220  6190
10221  6191
10222  6192
10223  6193
10224  6194
10225  6195
10226  6196
10227  6197
10228  6198
10229  6199
10230  619A
10231  619B
10232  619C
10233  619D
10234  619E
10235  619F
10236  61A0
10237  61A1
10238  61A2
10239  61A3
10240  61A4
10241  61A5
10242  61A6
10243  61A7
10244  61A8
10245  61A9
10246  61AA
10247  61AB
10248  61AC
10249  61AD
10250  61AE
10251  61AF
10252  61B0
10253  61B1
10254  61B2
10255  61B3
10256  61B4
10257  61B5
10258  61B6
10259  61B7
10260  61B8
10261  61B9
10262  61BA
10263  61BB
10264  61BC
10265  61BD
10266  61BE
10267  61BF
10268  61C0
10269  61C1
10270  61C2
10271  61C3
10272  61C4
10273  61C5
10274  61C6
10275  61C7
10276  61C8
10277  61C9
10278  61CA
10279  61CB
10280  61CC
10281  61CD
10282  61CE
10283  61CF
10284  61D0
10285  61D1
10286  61D2
10287  61D3
10288  61D4
10289  61D5
10290  61D6
10291  61D7
10292  61D8
10293  61D9
10294  61DA
10295  61DB
10296  61DC
10297  61DD
10298  61DE
10299  61DF
10300  61E0
10301  61E1
10302  61E2
10303  61E3
10304  61E4
10305  61E5
10306  61E6
10307  61E7
10308  61E8
10309  61E9
10310  61EA
10311  61EB
10312  61EC
10313  61ED
10314  61EE
10315  61EF
10316  61F0
10317  61F1
10318  61F2
10319  61F3
10320  61F4
10321  61F5
10322  61F6
10323  61F7
10324  61F8
10325  61F9
10326  61FA
10327  61FB
10328  61FC
10329  61FD
10330  61FE
10331  61FF
10332  6200
10333  6201
10334  6202
10335  6203
10336  6204
10337  6205
10338  6206
10339  6207
10340  6208
10341  6209
10342  620A
10343  620B
10344  620C
10345  620D
10346  620E
10347  620F
10348  6210
10349  6211
10350  6212
10351  6213
10352  6214
10353  6215
10354  6216
10355  6217
10356  6218
10357  6219
10358  621A
10359  621B
10360  621C
10361  621D
10362  621E
10363  621F
10364  6220
10365  6221
10366  6222
10367  6223
10368  6224
10369  6225
10370  6226
10371  6227
10372  6228
10373  6229
10374  622A
10375  622B
10376  622C
10377  622D
10378  622E
10379  622F
10380  6230
10381  6231
10382  6232
10383  6233
10384  6234
10385  6235
10386  6236
10387  6237
10388  6238
10389  6239
10390  623A
10391  623B
10392  623C
10393  623D
10394  623E
10395  623F
10396  6240
10397  6241
10398  6242
10399  6243
10400  6244
10401  6245
10402  6246
10403  6247
10404  6248
10405  6249
10406  624A
10407  624B
10408  624C
10409  624D
10410  624E
10411  624F
10412  6250
10413  6251
10414  6252
10415  6253
10416  6254
10417  6255
10418  6256
10419  6257
10420  6258
10421  6259
10422  625A
10423  625B
10424  625C
10425  625D
10426  625E
10427  625F
10428  6260
10429  6261
10430  6262
10431  6263
10432  6264
10433  6265
10434  6266
10435  6267
10436  6268
10437  6269
10438  626A
10439  626B
10440  626C
10441  626D
10442  626E
10443  626F
10444  6270
10445  6271
10446  6272
10447  6273
10448  6274
10449  6275
10450  6276
10451  6277
10452  6278
10453  6279
10454  627A
10455  627B
10456  627C
10457  627D
10458  627E
10459  627F
10460  6280
10461  6281
10462  6282
10463  6283
10464  6284
10465  6285
10466  6286
10467  6287
10468  6288
10469  6289
10470  628A
10471  628B
10472  628C
10473  628D
10474  628E
10475  628F
10476  6290
10477  6291
10478  6292
10479  6293
10480  6294
10481  6295
10482  6296
10483  6297
10484  6298
10485  6299
10486  629A
10487  629B
10488  629C
10489  629D
10490  629E
10491  629F
10492  62A0
10493  62A1
10494  62A2
10495  62A3
10496  62A4
10497  62A5
10498  62A6
10499  62A7
10500  62A8
10501  62A9
10502  62AA
10503  62AB
10504  62AC
10505  62AD
10506  62AE
10507  62AF
10508  62B0
10509  62B1
10510  62B2
10511  62B3
10512  62B4
10513  62B5
10514  62B6
10515  62B7
10516  62B8
10517  62B9
10518  62BA
10519  62BB
10520  62BC
10521  62BD
10522  62BE
10523  62BF
10524  62C0
10525  62C1
10526  62C2
10527  62C3
10528  62C4
10529  62C5
10530  62C6
10531  62C7
10532  62C8
10533  62C9
10534  62CA
10535  62CB
10536  62CC
10537  62CD
10538  62CE
10539  62CF
10540  62D0
10541  62D1
10542  62D2
10543  62D3
10544  62D4
10545  62D5
10546  62D6
10547  62D7
10548  62D8
10549  62D9
10550  62DA
10551  62DB
10552  62DC
10553  62DD
10554  62DE
10555  62DF
10556  62E0
10557  62E1
10558  62E2
10559  62E3
10560  62E4
10561  62E5
10562  62E6
10563  62E7
10564  62E8
10565  62E9
10566  62EA
10567  62EB
10568  62EC
10569  62ED
10570  62EE
10571  62EF
10572  62F0
10573  62F1
10574  62F2
10575  62F3
10576  62F4
10577  62F5
10578  62F6
10579  62F7
10580  62F8
10581  62F9
10582  62FA
10583  62FB
10584  62FC
10585  62FD
10586  62FE
10587  62FF
10588  6300
10589  6301
10590  6302
10591  6303
10592  6304
10593  6305
10594  6306
10595  6307
10596  6308
10597  6309
10598  630A
10599  630B
10600  630C
10601  630D
10602  630E
10603  630F
10604  6310
10605  6311
10606  6312
10607  6313
10608  6314
10609  6315
10610  6316
10611  6317
10612  6318
10613  6319
10614  631A
10615  631B
10616  631C
10617  631D
10618  631E
10619  631F
10620  6320
10621  6321
10622  6322
10623  6323
10624  6324
10625  6325
10626  6326
10627  6327
10628  6328
10629  6329
10630  632A
10631  632B
10632  632C
10633  632D
10634  632E
10635  632F
10636  6330
10637  6331
10638  6332
10639  6333
10640  6334
10641  6335
10642  6336
10643  6337
10644  6338
10645  6339
10646  633A
10647  633B
10648  633C
10649  633D
10650  633E
10651  633F
10652  6340
10653  6341
10654  6342
10655  6343
10656  6344
10657  6345
10658  6346
10659  6347
10660  6348
10661  6349
10662  634A
10663  634B
10664  634C
10665  634D
10666  634E
10667  634F
10668  6350
10669  6351
10670  6352
10671  6353
10672  6354
10673  6355
10674  6356
10675  6357
10676  6358
10677  6359
10678  635A
10679  635B
10680  635C
10681  635D
10682  635E
10683  635F
10684  6360
10685  6361
10686  6362
10687  6363
10688  6364
10689  6365
10690  6366
10691  6367
10692  6368
10693  6369
10694  636A
10695  636B
10696  636C
10697  636D
10698  636E
10699  636F
10700  6370
10701  6371
10702  6372
10703  6373
10704  6374
10705  6375
10706  6376
10707  6377
10708  6378
10709  6379
10710  637A
10711  637B
10712  637C
10713  637D
10714  637E
10715  637F
10716  6380
10717  6381
10718  6382
10719  6383
10720  6384
10721  6385
10722  6386
10723  6387
10724  6388
10725  6389
10726  638A
10727  638B
10728  638C
10729  638D
10730  638E
10731  638F
10732  6390
10733  6391
10734  6392
10735  6393
10736  6394
10737  6395
10738  6396
10739  6397
10740  6398
10741  6399
10742  639A
10743  639B
10744  639C
10745  639D
10746  639E
10747  639F
10748  63A0
10749  63A1
10750  63A2
10751  63A3
10752  63A4
10753  63A5
10754  63A6
10755  63A7
10756  63A8
10757  63A9
10758  63AA
10759  63AB
10760  63AC
10761  63AD
10762  63AE
10763  63AF
10764  63B0
10765  63B1
10766  63B2
10767  63B3
10768  63B4
10769  63B5
10770  63B6
10771  63B7
10772  63B8
10773  63B9
10774  63BA
10775  63BB
10776  63BC
10777  63BD
10778  63BE
10779  63BF
10780  63C0
10781  63C1
10782  63C2
10783  63C3
10784  63C4
10785  63C5
10786  63C6
10787  63C7
10788  63C8
10789  63C9
10790  63CA
10791  63CB
10792  63CC
10793  63CD
10794  63CE
10795  63CF
10796  63D0
10797  63D1
10798  63D2
10799  63D3
10800  63D4
10801  63D5
10802  63D6
10803  63D7
10804  63D8
10805  63D9
10806  63DA
10807  63DB
10808  63DC
10809  63DD
10810  63DE
10811  63DF
10812  63E0
10813  63E1
10814  63E2
10815  63E3
10816  63E4
10817  63E5
10818  63E6
10819  63E7
10820  63E8
10821  63E9
10822  63EA
10823  63EB
10824  63EC
10825  63ED
10826  63EE
10827  63EF
10828  63F0
10829  63F1
10830  63F2
10831  63F3
10832  63F4
10833  63F5
10834  63F6
10835  63F7
10836  63F8
10837  63F9
10838  63FA
10839  63FB
10840  63FC
10841  63FD
10842  63FE
10843  63FF
10844  6400
10845  6401
10846  6402
10847  6403
10848  6404
10849  6405
10850  6406
10851  6407
10852  6408
10853  6409
10854  640A
10855  640B
10856  640C
10857  640D
10858  640E
10859  640F
10860  6410
10861  6411
10862  6412
10863  6413
10864  6414
10865  6415
10866  6416
10867  6417
10868  6418
10869  6419
10870  641A
10871  641B
10872  641C
10873  641D
10874  641E
10875  641F
10876  6420
10877  6421
10878  6422
10879  6423
10880  6424
10881  6425
10882  6426
10883  6427
10884  6428
10885  6429
10886  642A
10887  642B
10888  642C
10889  642D
10890  642E
10891  642F
10892  6430
10893  6431
10894  6432
10895  6433
10896  6434
10897  6435
10898  6436
10899  6437
10900  6438
10901  6439
10902  643A
10903  643B
10904  643C
10905  643D
10906  643E
10907  643F
10908  6440
10909  6441
10910  6442
10911  6443
10912  6444
10913  6445
10914  6446
10915  6447
10916  6448
10917  6449
10918  644A
10919  644B
10920  644C
10921  644D
10922  644E
10923  644F
10924  6450
10925  6451
10926  6452
10927  6453
10928  6454
10929  6455
10930  6456
10931  6457
10932  6458
10933  6459
10934  645A
10935  645B
10936  645C
10937  645D
10938  645E
10939  645F
10940  6460
10941  6461
10942  6462
10943  6463
10944  6464
10945  6465
10946  6466
10947  6467
10948  6468
10949  6469
10950  646A
10951  646B
10952  646C
10953  646D
10954  646E
10955  646F
10956  6470
10957  6471
10958  6472
10959  6473
10960  6474
10961  6475
10962  6476
10963  6477
10964  6478
10965  6479
10966  647A
10967  647B
10968  647C
10969  647D
10970  647E
10971  647F
10972  6480
10973  6481
10974  6482
10975  6483
10976  6484
10977  6485
10978  6486
10979  6487
10980  6488
10981  6489
10982  648A
10983  648B
10984  648C
10985  648D
10986  648E
10987  648F
10988  6490
10989  6491
10990  6492
10991  6493
10992  6494
10993  6495
10994  6496
10995  6497
10996  6498
10997  6499
10998  649A
10999  649B
11000  649C
11001  649D
11002  649E
11003  649F
11004  64A0
11005  64A1
11006  64A2
11007  64A3
11008  64A4
11009  64A5
11010  64A6
11011  64A7
11012  64A8
11013  64A9
11014  64AA
11015  64AB
11016  64AC
11017  64AD
11018  64AE
11019  64AF
11020  64B0
11021  64B1
11022  64B2
11023  64B3
11024  64B4
11025  64B5
11026  64B6
11027  64B7
11028  64B8
11029  64B9
11030  64BA
11031  64BB
11032  64BC
11033  64BD
11034  64BE
11035  64BF
11036  64C0
11037  64C1
11038  64C2
11039  64C3
11040  64C4
11041  64C5
11042  64C6
11043  64C7
11044  64C8
11045  64C9
11046  64CA
11047  64CB
11048  64CC
11049  64CD
11050  64CE
11051  64CF
11052  64D0
11053  64D1
11054  64D2
11055  64D3
11056  64D4
11057  64D5
11058  64D6
11059  64D7
11060  64D8
11061  64D9
11062  64DA
11063  64DB
11064  64DC
11065  64DD
11066  64DE
11067  64DF
11068  64E0
11069  64E1
11070  64E2
11071  64E3
11072  64E4
11073  64E5
11074  64E6
11075  64E7
11076  64E8
11077  64E9
11078  64EA
11079  64EB
11080  64EC
11081  64ED
11082  64EE
11083  64EF
11084  64F0
11085  64F1
11086  64F2
11087  64F3
11088  64F4
11089  64F5
11090  64F6
11091  64F7
11092  64F8
11093  64F9
11094  64FA
11095  64FB
11096  64FC
11097  64FD
11098  64FE
11099  64FF
11100  6500
11101  6501
11102  6502
11103  6503
11104  6504
11105  6505
11106  6506
11107  6507
11108  6508
11109  6509
11110  650A
11111  650B
11112  650C
11113  650D
11114  650E
11115  650F
11116  6510
11117  6511
11118  6512
11119  6513
11120  6514
11121  6515
11122  6516
11123  6517
11124  6518
11125  6519
11126  651A
11127  651B
11128  651C
11129  651D
11130  651E
11131  651F
11132  6520
11133  6521
11134  6522
11135  6523
11136  6524
11137  6525
11138  6526
11139  6527
11140  6528
11141  6529
11142  652A
11143  652B
11144  652C
11145  652D
11146  652E
11147  652F
11148  6530
11149  6531
11150  6532
11151  6533
11152  6534
11153  6535
11154  6536
11155  6537
11156  6538
11157  6539
11158  653A
11159  653B
11160  653C
11161  653D
11162  653E
11163  653F
11164  6540
11165  6541
11166  6542
11167  6543
11168  6544
11169  6545
11170  6546
11171  6547
11172  6548
11173  6549
11174  654A
11175  654B
11176  654C
11177  654D
11178  654E
11179  654F
11180  6550
11181  6551
11182  6552
11183  6553
11184  6554
11185  6555
11186  6556
11187  6557
11188  6558
11189  6559
11190  655A
11191  655B
11192  655C
11193  655D
11194  655E
11195  655F
11196  6560
11197  6561
11198  6562
11199  6563
11200  6564
11201  6565
11202  6566
11203  6567
11204  6568
11205  6569
11206  656A
11207  656B
11208  656C
11209  656D
11210  656E
11211  656F
11212  6570
11213  6571
11214  6572
11215  6573
11216  6574
11217  6575
11218  6576
11219  6577
11220  6578
11221  6579
11222  657A
11223  657B
11224  657C
11225  657D
11226  657E
11227  657F
11228  6580
11229  6581
11230  6582
11231  6583
11232  6584
11233  6585
11234  6586
11235  6587
11236  6588
11237  6589
11238  658A
11239  658B
11240  658C
11241  658D
11242  658E
11243  658F
11244  6590
11245  6591
11246  6592
11247  6593
11248  6594
11249  6595
11250  6596
11251  6597
11252  6598
11253  6599
11254  659A
11255  659B
11256  659C
11257  659D
11258  659E
11259  659F
11260  65A0
11261  65A1
11262  65A2
11263  65A3
11264  65A4
11265  65A5
11266  65A6
11267  65A7
11268  65A8
11269  65A9
11270  65AA
11271  65AB
11272  65AC
11273  65AD
11274  65AE
11275  65AF
11276  65B0
11277  65B1
11278  65B2
11279  65B3
11280  65B4
11281  65B5
11282  65B6
11283  65B7
11284  65B8
11285  65B9
11286  65BA
11287  65BB
11288  65BC
11289  65BD
11290  65BE
11291  65BF
11292  65C0
11293  65C1
11294  65C2
11295  65C3
11296  65C4
11297  65C5
11298  65C6
11299  65C7
11300  65C8
11301  65C9
11302  65CA
11303  65CB
11304  65CC
11305  65CD
11306  65CE
11307  65CF
11308  65D0
11309  65D1
11310  65D2
11311  65D3
11312  65D4
11313  65D5
11314  65D6
11315  65D7
11316  65D8
11317  65D9
11318  65DA
11319  65DB
11320  65DC
11321  65DD
11322  65DE
11323  65DF
11324  65E0
11325  65E1
11326  65E2
11327  65E3
11328  65E4
11329  65E5
11330  65E6
11331  65E7
11332  65E8
11333  65E9
11334  65EA
11335  65EB
11336  65EC
11337  65ED
11338  65EE
11339  65EF
11340  65F0
11341  65F1
11342  65F2
11343  65F3
11344  65F4
11345  65F5
11346  65F6
11347  65F7
11348  65F8
11349  65F9
11350  65FA
11351  65FB
11352  65FC
11353  65FD
11354  65FE
11355  65FF
11356  6600
11357  6601
11358  6602
11359  6603
11360  6604
11361  6605
11362  6606
11363  6607
11364  6608
11365  6609
11366  660A
11367  660B
11368  660C
11369  660D
11370  660E
11371  660F
11372  6610
11373  6611
11374  6612
11375  6613
11376  6614
11377  6615
11378  6616
11379  6617
11380  6618
11381  6619
11382  661A
11383  661B
11384  661C
11385  661D
11386  661E
11387  661F
11388  6620
11389  6621
11390  6622
11391  6623
11392  6624
11393  6625
11394  6626
11395  6627
11396  6628
11397  6629
11398  662A
11399  662B
11400  662C
11401  662D
11402  662E
11403  662F
11404  6630
11405  6631
11406  6632
11407  6633
11408  6634
11409  6635
11410  6636
11411  6637
11412  6638
11413  6639
11414  663A
11415  663B
11416  663C
11417  663D
11418  663E
11419  663F
11420  6640
11421  6641
11422  6642
11423  6643
11424  6644
11425  6645
11426  6646
11427  6647
11428  6648
11429  6649
11430  664A
11431  664B
11432  664C
11433  664D
11434  664E
11435  664F
11436  6650
11437  6651
11438  6652
11439  6653
11440  6654
11441  6655
11442  6656
11443  6657
11444  6658
11445  6659
11446  665A
11447  665B
11448  665C
11449  665D
11450  665E
11451  665F
11452  6660
11453  6661
11454  6662
11455  6663
11456  6664
11457  6665
11458  6666
11459  6667
11460  6668
11461  6669
11462  666A
11463  666B
11464  666C
11465  666D
11466  666E
11467  666F
11468  6670
11469  6671
11470  6672
11471  6673
11472  6674
11473  6675
11474  6676
11475  6677
11476  6678
11477  6679
11478  667A
11479  667B
11480  667C
11481  667D
11482  667E
11483  667F
11484  6680
11485  6681
11486  6682
11487  6683
11488  6684
11489  6685
11490  6686
11491  6687
11492  6688
11493  6689
11494  668A
11495  668B
11496  668C
11497  668D
11498  668E
11499  668F
11500  6690
11501  6691
11502  6692
11503  6693
11504  6694
11505  6695
11506  6696
11507  6697
11508  6698
11509  6699
11510  669A
11511  669B
11512  669C
11513  669D
11514  669E
11515  669F
11516  66A0
11517  66A1
11518  66A2
11519  66A3
11520  66A4
11521  66A5
11522  66A6
11523  66A7
11524  66A8
11525  66A9
11526  66AA
11527  66AB
11528  66AC
11529  66AD
11530  66AE
11531  66AF
11532  66B0
11533  66B1
11534  66B2
11535  66B3
11536  66B4
11537  66B5
11538  66B6
11539  66B7
11540  66B8
11541  66B9
11542  66BA
11543  66BB
11544  66BC
11545  66BD
11546  66BE
11547  66BF
11548  66C0
11549  66C1
11550  66C2
11551  66C3
11552  66C4
11553  66C5
11554  66C6
11555  66C7
11556  66C8
11557  66C9
11558  66CA
11559  66CB
11560  66CC
11561  66CD
11562  66CE
11563  66CF
11564  66D0
11565  66D1
11566  66D2
11567  66D3
11568  66D4
11569  66D5
11570  66D6
11571  66D7
11572  66D8
11573  66D9
11574  66DA
11575  66DB
11576  66DC
11577  66DD
11578  66DE
11579  66DF
11580  66E0
11581  66E1
11582  66E2
11583  66E3
11584  66E4
11585  66E5
11586  66E6
11587  66E7
11588  66E8
11589  66E9
11590  66EA
11591  66EB
11592  66EC
11593  66ED
11594  66EE
11595  66EF
11596  66F0
11597  66F1
11598  66F2
11599  66F3
11600  66F4
11601  66F5
11602  66F6
11603  66F7
11604  66F8
11605  66F9
11606  66FA
11607  66FB
11608  66FC
11609  66FD
11610  66FE
11611  66FF
11612  6700
11613  6701
11614  6702
11615  6703
11616  6704
11617  6705
11618  6706
11619  6707
11620  6708
11621  6709
11622  670A
11623  670B
11624  670C
11625  670D
11626  670E
11627  670F
11628  6710
11629  6711
11630  6712
11631  6713
11632  6714
11633  6715
11634  6716
11635  6717
11636  6718
11637  6719
11638  671A
11639  671B
11640  671C
11641  671D
11642  671E
11643  671F
11644  6720
11645  6721
11646  6722
11647  6723
11648  6724
11649  6725
11650  6726
11651  6727
11652  6728
11653  6729
11654  672A
11655  672B
11656  672C
11657  672D
11658  672E
11659  672F
11660  6730
11661  6731
11662  6732
11663  6733
11664  6734
11665  6735
11666  6736
11667  6737
11668  6738
11669  6739
11670  673A
11671  673B
11672  673C
11673  673D
11674  673E
11675  673F
11676  6740
11677  6741
11678  6742
11679  6743
11680  6744
11681  6745
11682  6746
11683  6747
11684  6748
11685  6749
11686  674A
11687  674B
11688  674C
11689  674D
11690  674E
11691  674F
11692  6750
11693  6751
11694  6752
11695  6753
11696  6754
11697  6755
11698  6756
11699  6757
11700  6758
11701  6759
11702  675A
11703  675B
11704  675C
11705  675D
11706  675E
11707  675F
11708  6760
11709  6761
11710  6762
11711  6763
11712  6764
11713  6765
11714  6766
11715  6767
11716  6768
11717  6769
11718  676A
11719  676B
11720  676C
11721  676D
11722  676E
11723  676F
11724  6770
11725  6771
11726  6772
11727  6773
11728  6774
11729  6775
11730  6776
11731  6777
11732  6778
11733  6779
11734  677A
11735  677B
11736  677C
11737  677D
11738  677E
11739  677F
11740  6780
11741  6781
11742  6782
11743  6783
11744  6784
11745  6785
11746  6786
11747  6787
11748  6788
11749  6789
11750  678A
11751  678B
11752  678C
11753  678D
11754  678E
11755  678F
11756  6790
11757  6791
11758  6792
11759  6793
11760  6794
11761  6795
11762  6796
11763  6797
11764  6798
11765  6799
11766  679A
11767  679B
11768  679C
11769  679D
11770  679E
11771  679F
11772  67A0
11773  67A1
11774  67A2
11775  67A3
11776  67A4
11777  67A5
11778  67A6
11779  67A7
11780  67A8
11781  67A9
11782  67AA
11783  67AB
11784  67AC
11785  67AD
11786  67AE
11787  67AF
11788  67B0
11789  67B1
11790  67B2
11791  67B3
11792  67B4
11793  67B5
11794  67B6
11795  67B7
11796  67B8
11797  67B9
11798  67BA
11799  67BB
11800  67BC
11801  67BD
11802  67BE
11803  67BF
11804  67C0
11805  67C1
11806  67C2
11807  67C3
11808  67C4
11809  67C5
11810  67C6
11811  67C7
11812  67C8
11813  67C9
11814  67CA
11815  67CB
11816  67CC
11817  67CD
11818  67CE
11819  67CF
11820  67D0
11821  67D1
11822  67D2
11823  67D3
11824  67D4
11825  67D5
11826  67D6
11827  67D7
11828  67D8
11829  67D9
11830  67DA
11831  67DB
11832  67DC
11833  67DD
11834  67DE
11835  67DF
11836  67E0
11837  67E1
11838  67E2
11839  67E3
11840  67E4
11841  67E5
11842  67E6
11843  67E7
11844  67E8
11845  67E9
11846  67EA
11847  67EB
11848  67EC
11849  67ED
11850  67EE
11851  67EF
11852  67F0
11853  67F1
11854  67F2
11855  67F3
11856  67F4
11857  67F5
11858  67F6
11859  67F7
11860  67F8
11861  67F9
11862  67FA
11863  67FB
11864  67FC
11865  67FD
11866  67FE
11867  67FF
11868  6800
11869  6801
11870  6802
11871  6803
11872  6804
11873  6805
11874  6806
11875  6807
11876  6808
11877  6809
11878  680A
11879  680B
11880  680C
11881  680D
11882  680E
11883  680F
11884  6810
11885  6811
11886  6812
11887  6813
11888  6814
11889  6815
11890  6816
11891  6817
11892  6818
11893  6819
11894  681A
11895  681B
11896  681C
11897  681D
11898  681E
11899  681F
11900  6820
11901  6821
11902  6822
11903  6823
11904  6824
11905  6825
11906  6826
11907  6827
11908  6828
11909  6829
11910  682A
11911  682B
11912  682C
11913  682D
11914  682E
11915  682F
11916  6830
11917  6831
11918  6832
11919  6833
11920  6834
11921  6835
11922  6836
11923  6837
11924  6838
11925  6839
11926  683A
11927  683B
11928  683C
11929  683D
11930  683E
11931  683F
11932  6840
11933  6841
11934  6842
11935  6843
11936  6844
11937  6845
11938  6846
11939  6847
11940  6848
11941  6849
11942  684A
11943  684B
11944  684C
11945  684D
11946  684E
11947  684F
11948  6850
11949  6851
11950  6852
11951  6853
11952  6854
11953  6855
11954  6856
11955  6857
11956  6858
11957  6859
11958  685A
11959  685B
11960  685C
11961  685D
11962  685E
11963  685F
11964  6860
11965  6861
11966  6862
11967  6863
11968  6864
11969  6865
11970  6866
11971  6867
11972  6868
11973  6869
11974  686A
11975  686B
11976  686C
11977  686D
11978  686E
11979  686F
11980  6870
11981  6871
11982  6872
11983  6873
11984  6874
11985  6875
11986  6876
11987  6877
11988  6878
11989  6879
11990  687A
11991  687B
11992  687C
11993  687D
11994  687E
11995  687F
11996  6880
11997  6881
11998  6882
11999  6883
12000  6884
12001  6885
12002  6886
12003  6887
12004  6888
12005  6889
12006  688A
12007  688B
12008  688C
12009  688D
12010  688E
12011  688F
12012  6890
12013  6891
12014  6892
12015  6893
12016  6894
12017  6895
12018  6896
12019  6897
12020  6898
12021  6899
12022  689A
12023  689B
12024  689C
12025  689D
12026  689E
12027  689F
12028  68A0
12029  68A1
12030  68A2
12031  68A3
12032  68A4
12033  68A5
12034  68A6
12035  68A7
12036  68A8
12037  68A9
12038  68AA
12039  68AB
12040  68AC
12041  68AD
12042  68AE
12043  68AF
12044  68B0
12045  68B1
12046  68B2
12047  68B3
12048  68B4
12049  68B5
12050  68B6
12051  68B7
12052  68B8
12053  68B9
12054  68BA
12055  68BB
12056  68BC
12057  68BD
12058  68BE
12059  68BF
12060  68C0
12061  68C1
12062  68C2
12063  68C3
12064  68C4
12065  68C5
12066  68C6
12067  68C7
12068  68C8
12069  68C9
12070  68CA
12071  68CB
12072  68CC
12073  68CD
12074  68CE
12075  68CF
12076  68D0
12077  68D1
12078  68D2
12079  68D3
12080  68D4
12081  68D5
12082  68D6
12083  68D7
12084  68D8
12085  68D9
12086  68DA
12087  68DB
12088  68DC
12089  68DD
12090  68DE
12091  68DF
12092  68E0
12093  68E1
12094  68E2
12095  68E3
12096  68E4
12097  68E5
12098  68E6
12099  68E7
12100  68E8
12101  68E9
12102  68EA
12103  68EB
12104  68EC
12105  68ED
12106  68EE
12107  68EF
12108  68F0
12109  68F1
12110  68F2
12111  68F3
12112  68F4
12113  68F5
12114  68F6
12115  68F7
12116  68F8
12117  68F9
12118  68FA
12119  68FB
12120  68FC
12121  68FD
12122  68FE
12123  68FF
12124  6900
12125  6901
12126  6902
12127  6903
12128  6904
12129  6905
12130  6906
12131  6907
12132  6908
12133  6909
12134  690A
12135  690B
12136  690C
12137  690D
12138  690E
12139  690F
12140  6910
12141  6911
12142  6912
12143  6913
12144  6914
12145  6915
12146  6916
12147  6917
12148  6918
12149  6919
12150  691A
12151  691B
12152  691C
12153  691D
12154  691E
12155  691F
12156  6920
12157  6921
12158  6922
12159  6923
12160  6924
12161  6925
12162  6926
12163  6927
12164  6928
12165  6929
12166  692A
12167  692B
12168  692C
12169  692D
12170  692E
12171  692F
12172  6930
12173  6931
12174  6932
12175  6933
12176  6934
12177  6935
12178  6936
12179  6937
12180  6938
12181  6939
12182  693A
12183  693B
12184  693C
12185  693D
12186  693E
12187  693F
12188  6940
12189  6941
12190  6942
12191  6943
12192  6944
12193  6945
12194  6946
12195  6947
12196  6948
12197  6949
12198  694A
12199  694B
12200  694C
12201  694D
12202  694E
12203  694F
12204  6950
12205  6951
12206  6952
12207  6953
12208  6954
12209  6955
12210  6956
12211  6957
12212  6958
12213  6959
12214  695A
12215  695B
12216  695C
12217  695D
12218  695E
12219  695F
12220  6960
12221  6961
12222  6962
12223  6963
12224  6964
12225  6965
12226  6966
12227  6967
12228  6968
12229  6969
12230  696A
12231  696B
12232  696C
12233  696D
12234  696E
12235  696F
12236  6970
12237  6971
12238  6972
12239  6973
12240  6974
12241  6975
12242  6976
12243  6977
12244  6978
12245  6979
12246  697A
12247  697B
12248  697C
12249  697D
12250  697E
12251  697F
12252  6980
12253  6981
12254  6982
12255  6983
12256  6984
12257  6985
12258  6986
12259  6987
12260  6988
12261  6989
12262  698A
12263  698B
12264  698C
12265  698D
12266  698E
12267  698F
12268  6990
12269  6991
12270  6992
12271  6993
12272  6994
12273  6995
12274  6996
12275  6997
12276  6998
12277  6999
12278  699A
12279  699B
12280  699C
12281  699D
12282  699E
12283  699F
12284  69A0
12285  69A1
12286  69A2
12287  69A3
12288  69A4
12289  69A5
12290  69A6
12291  69A7
12292  69A8
12293  69A9
12294  69AA
12295  69AB
12296  69AC
12297  69AD
12298  69AE
12299  69AF
12300  69B0
12301  69B1
12302  69B2
12303  69B3
12304  69B4
12305  69B5
12306  69B6
12307  69B7
12308  69B8
12309  69B9
12310  69BA
12311  69BB
12312  69BC
12313  69BD
12314  69BE
12315  69BF
12316  69C0
12317  69C1
12318  69C2
12319  69C3
12320  69C4
12321  69C5
12322  69C6
12323  69C7
12324  69C8
12325  69C9
12326  69CA
12327  69CB
12328  69CC
12329  69CD
12330  69CE
12331  69CF
12332  69D0
12333  69D1
12334  69D2
12335  69D3
12336  69D4
12337  69D5
12338  69D6
12339  69D7
12340  69D8
12341  69D9
12342  69DA
12343  69DB
12344  69DC
12345  69DD
12346  69DE
12347  69DF
12348  69E0
12349  69E1
12350  69E2
12351  69E3
12352  69E4
12353  69E5
12354  69E6
12355  69E7
12356  69E8
12357  69E9
12358  69EA
12359  69EB
12360  69EC
12361  69ED
12362  69EE
12363  69EF
12364  69F0
12365  69F1
12366  69F2
12367  69F3
12368  69F4
12369  69F5
12370  69F6
12371  69F7
12372  69F8
12373  69F9
12374  69FA
12375  69FB
12376  69FC
12377  69FD
12378  69FE
12379  69FF
12380  6A00
12381  6A01
12382  6A02
12383  6A03
12384  6A04
12385  6A05
12386  6A06
12387  6A07
12388  6A08
12389  6A09
12390  6A0A
12391  6A0B
12392  6A0C
12393  6A0D
12394  6A0E
12395  6A0F
12396  6A10
12397  6A11
12398  6A12
12399  6A13
12400  6A14
12401  6A15
12402  6A16
12403  6A17
12404  6A18
12405  6A19
12406  6A1A
12407  6A1B
12408  6A1C
12409  6A1D
12410  6A1E
12411  6A1F
12412  6A20
12413  6A21
12414  6A22
12415  6A23
12416  6A24
12417  6A25
12418  6A26
12419  6A27
12420  6A28
12421  6A29
12422  6A2A
12423  6A2B
12424  6A2C
12425  6A2D
12426  6A2E
12427  6A2F
12428  6A30
12429  6A31
12430  6A32
12431  6A33
12432  6A34
12433  6A35
12434  6A36
12435  6A37
12436  6A38
12437  6A39
12438  6A3A
12439  6A3B
12440  6A3C
12441  6A3D
12442  6A3E
12443  6A3F
12444  6A40
12445  6A41
12446  6A42
12447  6A43
12448  6A44
12449  6A45
12450  6A46
12451  6A47
12452  6A48
12453  6A49
12454  6A4A
12455  6A4B
12456  6A4C
12457  6A4D
12458  6A4E
12459  6A4F
12460  6A50
12461  6A51
12462  6A52
12463  6A53
12464  6A54
12465  6A55
12466  6A56
12467  6A57
12468  6A58
12469  6A59
12470  6A5A
12471  6A5B
12472  6A5C
12473  6A5D
12474  6A5E
12475  6A5F
12476  6A60
12477  6A61
12478  6A62
12479  6A63
12480  6A64
12481  6A65
12482  6A66
12483  6A67
12484  6A68
12485  6A69
12486  6A6A
12487  6A6B
12488  6A6C
12489  6A6D
12490  6A6E
12491  6A6F
12492  6A70
12493  6A71
12494  6A72
12495  6A73
12496  6A74
12497  6A75
12498  6A76
12499  6A77
12500  6A78
12501  6A79
12502  6A7A
12503  6A7B
12504  6A7C
12505  6A7D
12506  6A7E
12507  6A7F
12508  6A80
12509  6A81
12510  6A82
12511  6A83
12512  6A84
12513  6A85
12514  6A86
12515  6A87
12516  6A88
12517  6A89
12518  6A8A
12519  6A8B
12520  6A8C
12521  6A8D
12522  6A8E
12523  6A8F
12524  6A90
12525  6A91
12526  6A92
12527  6A93
12528  6A94
12529  6A95
12530  6A96
12531  6A97
12532  6A98
12533  6A99
12534  6A9A
12535  6A9B
12536  6A9C
12537  6A9D
12538  6A9E
12539  6A9F
12540  6AA0
12541  6AA1
12542  6AA2
12543  6AA3
12544  6AA4
12545  6AA5
12546  6AA6
12547  6AA7
12548  6AA8
12549  6AA9
12550  6AAA
12551  6AAB
12552  6AAC
12553  6AAD
12554  6AAE
12555  6AAF
12556  6AB0
12557  6AB1
12558  6AB2
12559  6AB3
12560  6AB4
12561  6AB5
12562  6AB6
12563  6AB7
12564  6AB8
12565  6AB9
12566  6ABA
12567  6ABB
12568  6ABC
12569  6ABD
12570  6ABE
12571  6ABF
12572  6AC0
12573  6AC1
12574  6AC2
12575  6AC3
12576  6AC4
12577  6AC5
12578  6AC6
12579  6AC7
12580  6AC8
12581  6AC9
12582  6ACA
12583  6ACB
12584  6ACC
12585  6ACD
12586  6ACE
12587  6ACF
12588  6AD0
12589  6AD1
12590  6AD2
12591  6AD3
12592  6AD4
12593  6AD5
12594  6AD6
12595  6AD7
12596  6AD8
12597  6AD9
12598  6ADA
12599  6ADB
12600  6ADC
12601  6ADD
12602  6ADE
12603  6ADF
12604  6AE0
12605  6AE1
12606  6AE2
12607  6AE3
12608  6AE4
12609  6AE5
12610  6AE6
12611  6AE7
12612  6AE8
12613  6AE9
12614  6AEA
12615  6AEB
12616  6AEC
12617  6AED
12618  6AEE
12619  6AEF
12620  6AF0
12621  6AF1
12622  6AF2
12623  6AF3
12624  6AF4
12625  6AF5
12626  6AF6
12627  6AF7
12628  6AF8
12629  6AF9
12630  6AFA
12631  6AFB
12632  6AFC
12633  6AFD
12634  6AFE
12635  6AFF
12636  6B00
12637  6B01
12638  6B02
12639  6B03
12640  6B04
12641  6B05
12642  6B06
12643  6B07
12644  6B08
12645  6B09
12646  6B0A
12647  6B0B
12648  6B0C
12649  6B0D
12650  6B0E
12651  6B0F
12652  6B10
12653  6B11
12654  6B12
12655  6B13
12656  6B14
12657  6B15
12658  6B16
12659  6B17
12660  6B18
12661  6B19
12662  6B1A
12663  6B1B
12664  6B1C
12665  6B1D
12666  6B1E
12667  6B1F
12668  6B20
12669  6B21
12670  6B22
12671  6B23
12672  6B24
12673  6B25
12674  6B26
12675  6B27
12676  6B28
12677  6B29
12678  6B2A
12679  6B2B
12680  6B2C
12681  6B2D
12682  6B2E
12683  6B2F
12684  6B30
12685  6B31
12686  6B32
12687  6B33
12688  6B34
12689  6B35
12690  6B36
12691  6B37
12692  6B38
12693  6B39
12694  6B3A
12695  6B3B
12696  6B3C
12697  6B3D
12698  6B3E
12699  6B3F
12700  6B40
12701  6B41
12702  6B42
12703  6B43
12704  6B44
12705  6B45
12706  6B46
12707  6B47
12708  6B48
12709  6B49
12710  6B4A
12711  6B4B
12712  6B4C
12713  6B4D
12714  6B4E
12715  6B4F
12716  6B50
12717  6B51
12718  6B52
12719  6B53
12720  6B54
12721  6B55
12722  6B56
12723  6B57
12724  6B58
12725  6B59
12726  6B5A
12727  6B5B
12728  6B5C
12729  6B5D
12730  6B5E
12731  6B5F
12732  6B60
12733  6B61
12734  6B62
12735  6B63
12736  6B64
12737  6B65
12738  6B66
12739  6B67
12740  6B68
12741  6B69
12742  6B6A
12743  6B6B
12744  6B6C
12745  6B6D
12746  6B6E
12747  6B6F
12748  6B70
12749  6B71
12750  6B72
12751  6B73
12752  6B74
12753  6B75
12754  6B76
12755  6B77
12756  6B78
12757  6B79
12758  6B7A
12759  6B7B
12760  6B7C
12761  6B7D
12762  6B7E
12763  6B7F
12764  6B80
12765  6B81
12766  6B82
12767  6B83
12768  6B84
12769  6B85
12770  6B86
12771  6B87
12772  6B88
12773  6B89
12774  6B8A
12775  6B8B
12776  6B8C
12777  6B8D
12778  6B8E
12779  6B8F
12780  6B90
12781  6B91
12782  6B92
12783  6B93
12784  6B94
12785  6B95
12786  6B96
12787  6B97
12788  6B98
12789  6B99
12790  6B9A
12791  6B9B
12792  6B9C
12793  6B9D
12794  6B9E
12795  6B9F
12796  6BA0
12797  6BA1
12798  6BA2
12799  6BA3
12800  6BA4
12801  6BA5
12802  6BA6
12803  6BA7
12804  6BA8
12805  6BA9
12806  6BAA
12807  6BAB
12808  6BAC
12809  6BAD
12810  6BAE
12811  6BAF
12812  6BB0
12813  6BB1
12814  6BB2
12815  6BB3
12816  6BB4
12817  6BB5
12818  6BB6
12819  6BB7
12820  6BB8
12821  6BB9
12822  6BBA
12823  6BBB
12824  6BBC
12825  6BBD
12826  6BBE
12827  6BBF
12828  6BC0
12829  6BC1
12830  6BC2
12831  6BC3
12832  6BC4
12833  6BC5
12834  6BC6
12835  6BC7
12836  6BC8
12837  6BC9
12838  6BCA
12839  6BCB
12840  6BCC
12841  6BCD
12842  6BCE
12843  6BCF
12844  6BD0
12845  6BD1
12846  6BD2
12847  6BD3
12848  6BD4
12849  6BD5
12850  6BD6
12851  6BD7
12852  6BD8
12853  6BD9
12854  6BDA
12855  6BDB
12856  6BDC
12857  6BDD
12858  6BDE
12859  6BDF
12860  6BE0
12861  6BE1
12862  6BE2
12863  6BE3
12864  6BE4
12865  6BE5
12866  6BE6
12867  6BE7
12868  6BE8
12869  6BE9
12870  6BEA
12871  6BEB
12872  6BEC
12873  6BED
12874  6BEE
12875  6BEF
12876  6BF0
12877  6BF1
12878  6BF2
12879  6BF3
12880  6BF4
12881  6BF5
12882  6BF6
12883  6BF7
12884  6BF8
12885  6BF9
12886  6BFA
12887  6BFB
12888  6BFC
12889  6BFD
12890  6BFE
12891  6BFF
12892  6C00
12893  6C01
12894  6C02
12895  6C03
12896  6C04
12897  6C05
12898  6C06
12899  6C07
12900  6C08
12901  6C09
12902  6C0A
12903  6C0B
12904  6C0C
12905  6C0D
12906  6C0E
12907  6C0F
12908  6C10
12909  6C11
12910  6C12
12911  6C13
12912  6C14
12913  6C15
12914  6C16
12915  6C17
12916  6C18
12917  6C19
12918  6C1A
12919  6C1B
12920  6C1C
12921  6C1D
12922  6C1E
12923  6C1F
12924  6C20
12925  6C21
12926  6C22
12927  6C23
12928  6C24
12929  6C25
12930  6C26
12931  6C27
12932  6C28
12933  6C29
12934  6C2A
12935  6C2B
12936  6C2C
12937  6C2D
12938  6C2E
12939  6C2F
12940  6C30
12941  6C31
12942  6C32
12943  6C33
12944  6C34
12945  6C35
12946  6C36
12947  6C37
12948  6C38
12949  6C39
12950  6C3A
12951  6C3B
12952  6C3C
12953  6C3D
12954  6C3E
12955  6C3F
12956  6C40
12957  6C41
12958  6C42
12959  6C43
12960  6C44
12961  6C45
12962  6C46
12963  6C47
12964  6C48
12965  6C49
12966  6C4A
12967  6C4B
12968  6C4C
12969  6C4D
12970  6C4E
12971  6C4F
12972  6C50
12973  6C51
12974  6C52
12975  6C53
12976  6C54
12977  6C55
12978  6C56
12979  6C57
12980  6C58
12981  6C59
12982  6C5A
12983  6C5B
12984  6C5C
12985  6C5D
12986  6C5E
12987  6C5F
12988  6C60
12989  6C61
12990  6C62
12991  6C63
12992  6C64
12993  6C65
12994  6C66
12995  6C67
12996  6C68
12997  6C69
12998  6C6A
12999  6C6B
13000  6C6C
13001  6C6D
13002  6C6E
13003  6C6F
13004  6C70
13005  6C71
13006  6C72
13007  6C73
13008  6C74
13009  6C75
13010  6C76
13011  6C77
13012  6C78
13013  6C79
13014  6C7A
13015  6C7B
13016  6C7C
13017  6C7D
13018  6C7E
13019  6C7F
13020  6C80
13021  6C81
13022  6C82
13023  6C83
13024  6C84
13025  6C85
13026  6C86
13027  6C87
13028  6C88
13029  6C89
13030  6C8A
13031  6C8B
13032  6C8C
13033  6C8D
13034  6C8E
13035  6C8F
13036  6C90
13037  6C91
13038  6C92
13039  6C93
13040  6C94
13041  6C95
13042  6C96
13043  6C97
13044  6C98
13045  6C99
13046  6C9A
13047  6C9B
13048  6C9C
13049  6C9D
13050  6C9E
13051  6C9F
13052  6CA0
13053  6CA1
13054  6CA2
13055  6CA3
13056  6CA4
13057  6CA5
13058  6CA6
13059  6CA7
13060  6CA8
13061  6CA9
13062  6CAA
13063  6CAB
13064  6CAC
13065  6CAD
13066  6CAE
13067  6CAF
13068  6CB0
13069  6CB1
13070  6CB2
13071  6CB3
13072  6CB4
13073  6CB5
13074  6CB6
13075  6CB7
13076  6CB8
13077  6CB9
13078  6CBA
13079  6CBB
13080  6CBC
13081  6CBD
13082  6CBE
13083  6CBF
13084  6CC0
13085  6CC1
13086  6CC2
13087  6CC3
13088  6CC4
13089  6CC5
13090  6CC6
13091  6CC7
13092  6CC8
13093  6CC9
13094  6CCA
13095  6CCB
13096  6CCC
13097  6CCD
13098  6CCE
13099  6CCF
13100  6CD0
13101  6CD1
13102  6CD2
13103  6CD3
13104  6CD4
13105  6CD5
13106  6CD6
13107  6CD7
13108  6CD8
13109  6CD9
13110  6CDA
13111  6CDB
13112  6CDC
13113  6CDD
13114  6CDE
13115  6CDF
13116  6CE0
13117  6CE1
13118  6CE2
13119  6CE3
13120  6CE4
13121  6CE5
13122  6CE6
13123  6CE7
13124  6CE8
13125  6CE9
13126  6CEA
13127  6CEB
13128  6CEC
13129  6CED
13130  6CEE
13131  6CEF
13132  6CF0
13133  6CF1
13134  6CF2
13135  6CF3
13136  6CF4
13137  6CF5
13138  6CF6
13139  6CF7
13140  6CF8
13141  6CF9
13142  6CFA
13143  6CFB
13144  6CFC
13145  6CFD
13146  6CFE
13147  6CFF
13148  6D00
13149  6D01
13150  6D02
13151  6D03
13152  6D04
13153  6D05
13154  6D06
13155  6D07
13156  6D08
13157  6D09
13158  6D0A
13159  6D0B
13160  6D0C
13161  6D0D
13162  6D0E
13163  6D0F
13164  6D10
13165  6D11
13166  6D12
13167  6D13
13168  6D14
13169  6D15
13170  6D16
13171  6D17
13172  6D18
13173  6D19
13174  6D1A
13175  6D1B
13176  6D1C
13177  6D1D
13178  6D1E
13179  6D1F
13180  6D20
13181  6D21
13182  6D22
13183  6D23
13184  6D24
13185  6D25
13186  6D26
13187  6D27
13188  6D28
13189  6D29
13190  6D2A
13191  6D2B
13192  6D2C
13193  6D2D
13194  6D2E
13195  6D2F
13196  6D30
13197  6D31
13198  6D32
13199  6D33
13200  6D34
13201  6D35
13202  6D36
13203  6D37
13204  6D38
13205  6D39
13206  6D3A
13207  6D3B
13208  6D3C
13209  6D3D
13210  6D3E
13211  6D3F
13212  6D40
13213  6D41
13214  6D42
13215  6D43
13216  6D44
13217  6D45
13218  6D46
13219  6D47
13220  6D48
13221  6D49
13222  6D4A
13223  6D4B
13224  6D4C
13225  6D4D
13226  6D4E
13227  6D4F
13228  6D50
13229  6D51
13230  6D52
13231  6D53
13232  6D54
13233  6D55
13234  6D56
13235  6D57
13236  6D58
13237  6D59
13238  6D5A
13239  6D5B
13240  6D5C
13241  6D5D
13242  6D5E
13243  6D5F
13244  6D60
13245  6D61
13246  6D62
13247  6D63
13248  6D64
13249  6D65
13250  6D66
13251  6D67
13252  6D68
13253  6D69
13254  6D6A
13255  6D6B
13256  6D6C
13257  6D6D
13258  6D6E
13259  6D6F
13260  6D70
13261  6D71
13262  6D72
13263  6D73
13264  6D74
13265  6D75
13266  6D76
13267  6D77
13268  6D78
13269  6D79
13270  6D7A
13271  6D7B
13272  6D7C
13273  6D7D
13274  6D7E
13275  6D7F
13276  6D80
13277  6D81
13278  6D82
13279  6D83
13280  6D84
13281  6D85
13282  6D86
13283  6D87
13284  6D88
13285  6D89
13286  6D8A
13287  6D8B
13288  6D8C
13289  6D8D
13290  6D8E
13291  6D8F
13292  6D90
13293  6D91
13294  6D92
13295  6D93
13296  6D94
13297  6D95
13298  6D96
13299  6D97
13300  6D98
13301  6D99
13302  6D9A
13303  6D9B
13304  6D9C
13305  6D9D
13306  6D9E
13307  6D9F
13308  6DA0
13309  6DA1
13310  6DA2
13311  6DA3
13312  6DA4
13313  6DA5
13314  6DA6
13315  6DA7
13316  6DA8
13317  6DA9
13318  6DAA
13319  6DAB
13320  6DAC
13321  6DAD
13322  6DAE
13323  6DAF
13324  6DB0
13325  6DB1
13326  6DB2
13327  6DB3
13328  6DB4
13329  6DB5
13330  6DB6
13331  6DB7
13332  6DB8
13333  6DB9
13334  6DBA
13335  6DBB
13336  6DBC
13337  6DBD
13338  6DBE
13339  6DBF
13340  6DC0
13341  6DC1
13342  6DC2
13343  6DC3
13344  6DC4
13345  6DC5
13346  6DC6
13347  6DC7
13348  6DC8
13349  6DC9
13350  6DCA
13351  6DCB
13352  6DCC
13353  6DCD
13354  6DCE
13355  6DCF
13356  6DD0
13357  6DD1
13358  6DD2
13359  6DD3
13360  6DD4
13361  6DD5
13362  6DD6
13363  6DD7
13364  6DD8
13365  6DD9
13366  6DDA
13367  6DDB
13368  6DDC
13369  6DDD
13370  6DDE
13371  6DDF
13372  6DE0
13373  6DE1
13374  6DE2
13375  6DE3
13376  6DE4
13377  6DE5
13378  6DE6
13379  6DE7
13380  6DE8
13381  6DE9
13382  6DEA
13383  6DEB
13384  6DEC
13385  6DED
13386  6DEE
13387  6DEF
13388  6DF0
13389  6DF1
13390  6DF2
13391  6DF3
13392  6DF4
13393  6DF5
13394  6DF6
13395  6DF7
13396  6DF8
13397  6DF9
13398  6DFA
13399  6DFB
13400  6DFC
13401  6DFD
13402  6DFE
13403  6DFF
13404  6E00
13405  6E01
13406  6E02
13407  6E03
13408  6E04
13409  6E05
13410  6E06
13411  6E07
13412  6E08
13413  6E09
13414  6E0A
13415  6E0B
13416  6E0C
13417  6E0D
13418  6E0E
13419  6E0F
13420  6E10
13421  6E11
13422  6E12
13423  6E13
13424  6E14
13425  6E15
13426  6E16
13427  6E17
13428  6E18
13429  6E19
13430  6E1A
13431  6E1B
13432  6E1C
13433  6E1D
13434  6E1E
13435  6E1F
13436  6E20
13437  6E21
13438  6E22
13439  6E23
13440  6E24
13441  6E25
13442  6E26
13443  6E27
13444  6E28
13445  6E29
13446  6E2A
13447  6E2B
13448  6E2C
13449  6E2D
13450  6E2E
13451  6E2F
13452  6E30
13453  6E31
13454  6E32
13455  6E33
13456  6E34
13457  6E35
13458  6E36
13459  6E37
13460  6E38
13461  6E39
13462  6E3A
13463  6E3B
13464  6E3C
13465  6E3D
13466  6E3E
13467  6E3F
13468  6E40
13469  6E41
13470  6E42
13471  6E43
13472  6E44
13473  6E45
13474  6E46
13475  6E47
13476  6E48
13477  6E49
13478  6E4A
13479  6E4B
13480  6E4C
13481  6E4D
13482  6E4E
13483  6E4F
13484  6E50
13485  6E51
13486  6E52
13487  6E53
13488  6E54
13489  6E55
13490  6E56
13491  6E57
13492  6E58
13493  6E59
13494  6E5A
13495  6E5B
13496  6E5C
13497  6E5D
13498  6E5E
13499  6E5F
13500  6E60
13501  6E61
13502  6E62
13503  6E63
13504  6E64
13505  6E65
13506  6E66
13507  6E67
13508  6E68
13509  6E69
13510  6E6A
13511  6E6B
13512  6E6C
13513  6E6D
13514  6E6E
13515  6E6F
13516  6E70
13517  6E71
13518  6E72
13519  6E73
13520  6E74
13521  6E75
13522  6E76
13523  6E77
13524  6E78
13525  6E79
13526  6E7A
13527  6E7B
13528  6E7C
13529  6E7D
13530  6E7E
13531  6E7F
13532  6E80
13533  6E81
13534  6E82
13535  6E83
13536  6E84
13537  6E85
13538  6E86
13539  6E87
13540  6E88
13541  6E89
13542  6E8A
13543  6E8B
13544  6E8C
13545  6E8D
13546  6E8E
13547  6E8F
13548  6E90
13549  6E91
13550  6E92
13551  6E93
13552  6E94
13553  6E95
13554  6E96
13555  6E97
13556  6E98
13557  6E99
13558  6E9A
13559  6E9B
13560  6E9C
13561  6E9D
13562  6E9E
13563  6E9F
13564  6EA0
13565  6EA1
13566  6EA2
13567  6EA3
13568  6EA4
13569  6EA5
13570  6EA6
13571  6EA7
13572  6EA8
13573  6EA9
13574  6EAA
13575  6EAB
13576  6EAC
13577  6EAD
13578  6EAE
13579  6EAF
13580  6EB0
13581  6EB1
13582  6EB2
13583  6EB3
13584  6EB4
13585  6EB5
13586  6EB6
13587  6EB7
13588  6EB8
13589  6EB9
13590  6EBA
13591  6EBB
13592  6EBC
13593  6EBD
13594  6EBE
13595  6EBF
13596  6EC0
13597  6EC1
13598  6EC2
13599  6EC3
13600  6EC4
13601  6EC5
13602  6EC6
13603  6EC7
13604  6EC8
13605  6EC9
13606  6ECA
13607  6ECB
13608  6ECC
13609  6ECD
13610  6ECE
13611  6ECF
13612  6ED0
13613  6ED1
13614  6ED2
13615  6ED3
13616  6ED4
13617  6ED5
13618  6ED6
13619  6ED7
13620  6ED8
13621  6ED9
13622  6EDA
13623  6EDB
13624  6EDC
13625  6EDD
13626  6EDE
13627  6EDF
13628  6EE0
13629  6EE1
13630  6EE2
13631  6EE3
13632  6EE4
13633  6EE5
13634  6EE6
13635  6EE7
13636  6EE8
13637  6EE9
13638  6EEA
13639  6EEB
13640  6EEC
13641  6EED
13642  6EEE
13643  6EEF
13644  6EF0
13645  6EF1
13646  6EF2
13647  6EF3
13648  6EF4
13649  6EF5
13650  6EF6
13651  6EF7
13652  6EF8
13653  6EF9
13654  6EFA
13655  6EFB
13656  6EFC
13657  6EFD
13658  6EFE
13659  6EFF
13660  6F00
13661  6F01
13662  6F02
13663  6F03
13664  6F04
13665  6F05
13666  6F06
13667  6F07
13668  6F08
13669  6F09
13670  6F0A
13671  6F0B
13672  6F0C
13673  6F0D
13674  6F0E
13675  6F0F
13676  6F10
13677  6F11
13678  6F12
13679  6F13
13680  6F14
13681  6F15
13682  6F16
13683  6F17
13684  6F18
13685  6F19
13686  6F1A
13687  6F1B
13688  6F1C
13689  6F1D
13690  6F1E
13691  6F1F
13692  6F20
13693  6F21
13694  6F22
13695  6F23
13696  6F24
13697  6F25
13698  6F26
13699  6F27
13700  6F28
13701  6F29
13702  6F2A
13703  6F2B
13704  6F2C
13705  6F2D
13706  6F2E
13707  6F2F
13708  6F30
13709  6F31
13710  6F32
13711  6F33
13712  6F34
13713  6F35
13714  6F36
13715  6F37
13716  6F38
13717  6F39
13718  6F3A
13719  6F3B
13720  6F3C
13721  6F3D
13722  6F3E
13723  6F3F
13724  6F40
13725  6F41
13726  6F42
13727  6F43
13728  6F44
13729  6F45
13730  6F46
13731  6F47
13732  6F48
13733  6F49
13734  6F4A
13735  6F4B
13736  6F4C
13737  6F4D
13738  6F4E
13739  6F4F
13740  6F50
13741  6F51
13742  6F52
13743  6F53
13744  6F54
13745  6F55
13746  6F56
13747  6F57
13748  6F58
13749  6F59
13750  6F5A
13751  6F5B
13752  6F5C
13753  6F5D
13754  6F5E
13755  6F5F
13756  6F60
13757  6F61
13758  6F62
13759  6F63
13760  6F64
13761  6F65
13762  6F66
13763  6F67
13764  6F68
13765  6F69
13766  6F6A
13767  6F6B
13768  6F6C
13769  6F6D
13770  6F6E
13771  6F6F
13772  6F70
13773  6F71
13774  6F72
13775  6F73
13776  6F74
13777  6F75
13778  6F76
13779  6F77
13780  6F78
13781  6F79
13782  6F7A
13783  6F7B
13784  6F7C
13785  6F7D
13786  6F7E
13787  6F7F
13788  6F80
13789  6F81
13790  6F82
13791  6F83
13792  6F84
13793  6F85
13794  6F86
13795  6F87
13796  6F88
13797  6F89
13798  6F8A
13799  6F8B
13800  6F8C
13801  6F8D
13802  6F8E
13803  6F8F
13804  6F90
13805  6F91
13806  6F92
13807  6F93
13808  6F94
13809  6F95
13810  6F96
13811  6F97
13812  6F98
13813  6F99
13814  6F9A
13815  6F9B
13816  6F9C
13817  6F9D
13818  6F9E
13819  6F9F
13820  6FA0
13821  6FA1
13822  6FA2
13823  6FA3
13824  6FA4
13825  6FA5
13826  6FA6
13827  6FA7
13828  6FA8
13829  6FA9
13830  6FAA
13831  6FAB
13832  6FAC
13833  6FAD
13834  6FAE
13835  6FAF
13836  6FB0
13837  6FB1
13838  6FB2
13839  6FB3
13840  6FB4
13841  6FB5
13842  6FB6
13843  6FB7
13844  6FB8
13845  6FB9
13846  6FBA
13847  6FBB
13848  6FBC
13849  6FBD
13850  6FBE
13851  6FBF
13852  6FC0
13853  6FC1
13854  6FC2
13855  6FC3
13856  6FC4
13857  6FC5
13858  6FC6
13859  6FC7
13860  6FC8
13861  6FC9
13862  6FCA
13863  6FCB
13864  6FCC
13865  6FCD
13866  6FCE
13867  6FCF
13868  6FD0
13869  6FD1
13870  6FD2
13871  6FD3
13872  6FD4
13873  6FD5
13874  6FD6
13875  6FD7
13876  6FD8
13877  6FD9
13878  6FDA
13879  6FDB
13880  6FDC
13881  6FDD
13882  6FDE
13883  6FDF
13884  6FE0
13885  6FE1
13886  6FE2
13887  6FE3
13888  6FE4
13889  6FE5
13890  6FE6
13891  6FE7
13892  6FE8
13893  6FE9
13894  6FEA
13895  6FEB
13896  6FEC
13897  6FED
13898  6FEE
13899  6FEF
13900  6FF0
13901  6FF1
13902  6FF2
13903  6FF3
13904  6FF4
13905  6FF5
13906  6FF6
13907  6FF7
13908  6FF8
13909  6FF9
13910  6FFA
13911  6FFB
13912  6FFC
13913  6FFD
13914  6FFE
13915  6FFF
13916  7000
13917  7001
13918  7002
13919  7003
13920  7004
13921  7005
13922  7006
13923  7007
13924  7008
13925  7009
13926  700A
13927  700B
13928  700C
13929  700D
13930  700E
13931  700F
13932  7010
13933  7011
13934  7012
13935  7013
13936  7014
13937  7015
13938  7016
13939  7017
13940  7018
13941  7019
13942  701A
13943  701B
13944  701C
13945  701D
13946  701E
13947  701F
13948  7020
13949  7021
13950  7022
13951  7023
13952  7024
13953  7025
13954  7026
13955  7027
13956  7028
13957  7029
13958  702A
13959  702B
13960  702C
13961  702D
13962  702E
13963  702F
13964  7030
13965  7031
13966  7032
13967  7033
13968  7034
13969  7035
13970  7036
13971  7037
13972  7038
13973  7039
13974  703A
13975  703B
13976  703C
13977  703D
13978  703E
13979  703F
13980  7040
13981  7041
13982  7042
13983  7043
13984  7044
13985  7045
13986  7046
13987  7047
13988  7048
13989  7049
13990  704A
13991  704B
13992  704C
13993  704D
13994  704E
13995  704F
13996  7050
13997  7051
13998  7052
13999  7053
14000  7054
14001  7055
14002  7056
14003  7057
14004  7058
14005  7059
14006  705A
14007  705B
14008  705C
14009  705D
14010  705E
14011  705F
14012  7060
14013  7061
14014  7062
14015  7063
14016  7064
14017  7065
14018  7066
14019  7067
14020  7068
14021  7069
14022  706A
14023  706B
14024  706C
14025  706D
14026  706E
14027  706F
14028  7070
14029  7071
14030  7072
14031  7073
14032  7074
14033  7075
14034  7076
14035  7077
14036  7078
14037  7079
14038  707A
14039  707B
14040  707C
14041  707D
14042  707E
14043  707F
14044  7080
14045  7081
14046  7082
14047  7083
14048  7084
14049  7085
14050  7086
14051  7087
14052  7088
14053  7089
14054  708A
14055  708B
14056  708C
14057  708D
14058  708E
14059  708F
14060  7090
14061  7091
14062  7092
14063  7093
14064  7094
14065  7095
14066  7096
14067  7097
14068  7098
14069  7099
14070  709A
14071  709B
14072  709C
14073  709D
14074  709E
14075  709F
14076  70A0
14077  70A1
14078  70A2
14079  70A3
14080  70A4
14081  70A5
14082  70A6
14083  70A7
14084  70A8
14085  70A9
14086  70AA
14087  70AB
14088  70AC
14089  70AD
14090  70AE
14091  70AF
14092  70B0
14093  70B1
14094  70B2
14095  70B3
14096  70B4
14097  70B5
14098  70B6
14099  70B7
14100  70B8
14101  70B9
14102  70BA
14103  70BB
14104  70BC
14105  70BD
14106  70BE
14107  70BF
14108  70C0
14109  70C1
14110  70C2
14111  70C3
14112  70C4
14113  70C5
14114  70C6
14115  70C7
14116  70C8
14117  70C9
14118  70CA
14119  70CB
14120  70CC
14121  70CD
14122  70CE
14123  70CF
14124  70D0
14125  70D1
14126  70D2
14127  70D3
14128  70D4
14129  70D5
14130  70D6
14131  70D7
14132  70D8
14133  70D9
14134  70DA
14135  70DB
14136  70DC
14137  70DD
14138  70DE
14139  70DF
14140  70E0
14141  70E1
14142  70E2
14143  70E3
14144  70E4
14145  70E5
14146  70E6
14147  70E7
14148  70E8
14149  70E9
14150  70EA
14151  70EB
14152  70EC
14153  70ED
14154  70EE
14155  70EF
14156  70F0
14157  70F1
14158  70F2
14159  70F3
14160  70F4
14161  70F5
14162  70F6
14163  70F7
14164  70F8
14165  70F9
14166  70FA
14167  70FB
14168  70FC
14169  70FD
14170  70FE
14171  70FF
14172  7100
14173  7101
14174  7102
14175  7103
14176  7104
14177  7105
14178  7106
14179  7107
14180  7108
14181  7109
14182  710A
14183  710B
14184  710C
14185  710D
14186  710E
14187  710F
14188  7110
14189  7111
14190  7112
14191  7113
14192  7114
14193  7115
14194  7116
14195  7117
14196  7118
14197  7119
14198  711A
14199  711B
14200  711C
14201  711D
14202  711E
14203  711F
14204  7120
14205  7121
14206  7122
14207  7123
14208  7124
14209  7125
14210  7126
14211  7127
14212  7128
14213  7129
14214  712A
14215  712B
14216  712C
14217  712D
14218  712E
14219  712F
14220  7130
14221  7131
14222  7132
14223  7133
14224  7134
14225  7135
14226  7136
14227  7137
14228  7138
14229  7139
14230  713A
14231  713B
14232  713C
14233  713D
14234  713E
14235  713F
14236  7140
14237  7141
14238  7142
14239  7143
14240  7144
14241  7145
14242  7146
14243  7147
14244  7148
14245  7149
14246  714A
14247  714B
14248  714C
14249  714D
14250  714E
14251  714F
14252  7150
14253  7151
14254  7152
14255  7153
14256  7154
14257  7155
14258  7156
14259  7157
14260  7158
14261  7159
14262  715A
14263  715B
14264  715C
14265  715D
14266  715E
14267  715F
14268  7160
14269  7161
14270  7162
14271  7163
14272  7164
14273  7165
14274  7166
14275  7167
14276  7168
14277  7169
14278  716A
14279  716B
14280  716C
14281  716D
14282  716E
14283  716F
14284  7170
14285  7171
14286  7172
14287  7173
14288  7174
14289  7175
14290  7176
14291  7177
14292  7178
14293  7179
14294  717A
14295  717B
14296  717C
14297  717D
14298  717E
14299  717F
14300  7180
14301  7181
14302  7182
14303  7183
14304  7184
14305  7185
14306  7186
14307  7187
14308  7188
14309  7189
14310  718A
14311  718B
14312  718C
14313  718D
14314  718E
14315  718F
14316  7190
14317  7191
14318  7192
14319  7193
14320  7194
14321  7195
14322  7196
14323  7197
14324  7198
14325  7199
14326  719A
14327  719B
14328  719C
14329  719D
14330  719E
14331  719F
14332  71A0
14333  71A1
14334  71A2
14335  71A3
14336  71A4
14337  71A5
14338  71A6
14339  71A7
14340  71A8
14341  71A9
14342  71AA
14343  71AB
14344  71AC
14345  71AD
14346  71AE
14347  71AF
14348  71B0
14349  71B1
14350  71B2
14351  71B3
14352  71B4
14353  71B5
14354  71B6
14355  71B7
14356  71B8
14357  71B9
14358  71BA
14359  71BB
14360  71BC
14361  71BD
14362  71BE
14363  71BF
14364  71C0
14365  71C1
14366  71C2
14367  71C3
14368  71C4
14369  71C5
14370  71C6
14371  71C7
14372  71C8
14373  71C9
14374  71CA
14375  71CB
14376  71CC
14377  71CD
14378  71CE
14379  71CF
14380  71D0
14381  71D1
14382  71D2
14383  71D3
14384  71D4
14385  71D5
14386  71D6
14387  71D7
14388  71D8
14389  71D9
14390  71DA
14391  71DB
14392  71DC
14393  71DD
14394  71DE
14395  71DF
14396  71E0
14397  71E1
14398  71E2
14399  71E3
14400  71E4
14401  71E5
14402  71E6
14403  71E7
14404  71E8
14405  71E9
14406  71EA
14407  71EB
14408  71EC
14409  71ED
14410  71EE
14411  71EF
14412  71F0
14413  71F1
14414  71F2
14415  71F3
14416  71F4
14417  71F5
14418  71F6
14419  71F7
14420  71F8
14421  71F9
14422  71FA
14423  71FB
14424  71FC
14425  71FD
14426  71FE
14427  71FF
14428  7200
14429  7201
14430  7202
14431  7203
14432  7204
14433  7205
14434  7206
14435  7207
14436  7208
14437  7209
14438  720A
14439  720B
14440  720C
14441  720D
14442  720E
14443  720F
14444  7210
14445  7211
14446  7212
14447  7213
14448  7214
14449  7215
14450  7216
14451  7217
14452  7218
14453  7219
14454  721A
14455  721B
14456  721C
14457  721D
14458  721E
14459  721F
14460  7220
14461  7221
14462  7222
14463  7223
14464  7224
14465  7225
14466  7226
14467  7227
14468  7228
14469  7229
14470  722A
14471  722B
14472  722C
14473  722D
14474  722E
14475  722F
14476  7230
14477  7231
14478  7232
14479  7233
14480  7234
14481  7235
14482  7236
14483  7237
14484  7238
14485  7239
14486  723A
14487  723B
14488  723C
14489  723D
14490  723E
14491  723F
14492  7240
14493  7241
14494  7242
14495  7243
14496  7244
14497  7245
14498  7246
14499  7247
14500  7248
14501  7249
14502  724A
14503  724B
14504  724C
14505  724D
14506  724E
14507  724F
14508  7250
14509  7251
14510  7252
14511  7253
14512  7254
14513  7255
14514  7256
14515  7257
14516  7258
14517  7259
14518  725A
14519  725B
14520  725C
14521  725D
14522  725E
14523  725F
14524  7260
14525  7261
14526  7262
14527  7263
14528  7264
14529  7265
14530  7266
14531  7267
14532  7268
14533  7269
14534  726A
14535  726B
14536  726C
14537  726D
14538  726E
14539  726F
14540  7270
14541  7271
14542  7272
14543  7273
14544  7274
14545  7275
14546  7276
14547  7277
14548  7278
14549  7279
14550  727A
14551  727B
14552  727C
14553  727D
14554  727E
14555  727F
14556  7280
14557  7281
14558  7282
14559  7283
14560  7284
14561  7285
14562  7286
14563  7287
14564  7288
14565  7289
14566  728A
14567  728B
14568  728C
14569  728D
14570  728E
14571  728F
14572  7290
14573  7291
14574  7292
14575  7293
14576  7294
14577  7295
14578  7296
14579  7297
14580  7298
14581  7299
14582  729A
14583  729B
14584  729C
14585  729D
14586  729E
14587  729F
14588  72A0
14589  72A1
14590  72A2
14591  72A3
14592  72A4
14593  72A5
14594  72A6
14595  72A7
14596  72A8
14597  72A9
14598  72AA
14599  72AB
14600  72AC
14601  72AD
14602  72AE
14603  72AF
14604  72B0
14605  72B1
14606  72B2
14607  72B3
14608  72B4
14609  72B5
14610  72B6
14611  72B7
14612  72B8
14613  72B9
14614  72BA
14615  72BB
14616  72BC
14617  72BD
14618  72BE
14619  72BF
14620  72C0
14621  72C1
14622  72C2
14623  72C3
14624  72C4
14625  72C5
14626  72C6
14627  72C7
14628  72C8
14629  72C9
14630  72CA
14631  72CB
14632  72CC
14633  72CD
14634  72CE
14635  72CF
14636  72D0
14637  72D1
14638  72D2
14639  72D3
14640  72D4
14641  72D5
14642  72D6
14643  72D7
14644  72D8
14645  72D9
14646  72DA
14647  72DB
14648  72DC
14649  72DD
14650  72DE
14651  72DF
14652  72E0
14653  72E1
14654  72E2
14655  72E3
14656  72E4
14657  72E5
14658  72E6
14659  72E7
14660  72E8
14661  72E9
14662  72EA
14663  72EB
14664  72EC
14665  72ED
14666  72EE
14667  72EF
14668  72F0
14669  72F1
14670  72F2
14671  72F3
14672  72F4
14673  72F5
14674  72F6
14675  72F7
14676  72F8
14677  72F9
14678  72FA
14679  72FB
14680  72FC
14681  72FD
14682  72FE
14683  72FF
14684  7300
14685  7301
14686  7302
14687  7303
14688  7304
14689  7305
14690  7306
14691  7307
14692  7308
14693  7309
14694  730A
14695  730B
14696  730C
14697  730D
14698  730E
14699  730F
14700  7310
14701  7311
14702  7312
14703  7313
14704  7314
14705  7315
14706  7316
14707  7317
14708  7318
14709  7319
14710  731A
14711  731B
14712  731C
14713  731D
14714  731E
14715  731F
14716  7320
14717  7321
14718  7322
14719  7323
14720  7324
14721  7325
14722  7326
14723  7327
14724  7328
14725  7329
14726  732A
14727  732B
14728  732C
14729  732D
14730  732E
14731  732F
14732  7330
14733  7331
14734  7332
14735  7333
14736  7334
14737  7335
14738  7336
14739  7337
14740  7338
14741  7339
14742  733A
14743  733B
14744  733C
14745  733D
14746  733E
14747  733F
14748  7340
14749  7341
14750  7342
14751  7343
14752  7344
14753  7345
14754  7346
14755  7347
14756  7348
14757  7349
14758  734A
14759  734B
14760  734C
14761  734D
14762  734E
14763  734F
14764  7350
14765  7351
14766  7352
14767  7353
14768  7354
14769  7355
14770  7356
14771  7357
14772  7358
14773  7359
14774  735A
14775  735B
14776  735C
14777  735D
14778  735E
14779  735F
14780  7360
14781  7361
14782  7362
14783  7363
14784  7364
14785  7365
14786  7366
14787  7367
14788  7368
14789  7369
14790  736A
14791  736B
14792  736C
14793  736D
14794  736E
14795  736F
14796  7370
14797  7371
14798  7372
14799  7373
14800  7374
14801  7375
14802  7376
14803  7377
14804  7378
14805  7379
14806  737A
14807  737B
14808  737C
14809  737D
14810  737E
14811  737F
14812  7380
14813  7381
14814  7382
14815  7383
14816  7384
14817  7385
14818  7386
14819  7387
14820  7388
14821  7389
14822  738A
14823  738B
14824  738C
14825  738D
14826  738E
14827  738F
14828  7390
14829  7391
14830  7392
14831  7393
14832  7394
14833  7395
14834  7396
14835  7397
14836  7398
14837  7399
14838  739A
14839  739B
14840  739C
14841  739D
14842  739E
14843  739F
14844  73A0
14845  73A1
14846  73A2
14847  73A3
14848  73A4
14849  73A5
14850  73A6
14851  73A7
14852  73A8
14853  73A9
14854  73AA
14855  73AB
14856  73AC
14857  73AD
14858  73AE
14859  73AF
14860  73B0
14861  73B1
14862  73B2
14863  73B3
14864  73B4
14865  73B5
14866  73B6
14867  73B7
14868  73B8
14869  73B9
14870  73BA
14871  73BB
14872  73BC
14873  73BD
14874  73BE
14875  73BF
14876  73C0
14877  73C1
14878  73C2
14879  73C3
14880  73C4
14881  73C5
14882  73C6
14883  73C7
14884  73C8
14885  73C9
14886  73CA
14887  73CB
14888  73CC
14889  73CD
14890  73CE
14891  73CF
14892  73D0
14893  73D1
14894  73D2
14895  73D3
14896  73D4
14897  73D5
14898  73D6
14899  73D7
14900  73D8
14901  73D9
14902  73DA
14903  73DB
14904  73DC
14905  73DD
14906  73DE
14907  73DF
14908  73E0
14909  73E1
14910  73E2
14911  73E3
14912  73E4
14913  73E5
14914  73E6
14915  73E7
14916  73E8
14917  73E9
14918  73EA
14919  73EB
14920  73EC
14921  73ED
14922  73EE
14923  73EF
14924  73F0
14925  73F1
14926  73F2
14927  73F3
14928  73F4
14929  73F5
14930  73F6
14931  73F7
14932  73F8
14933  73F9
14934  73FA
14935  73FB
14936  73FC
14937  73FD
14938  73FE
14939  73FF
14940  7400
14941  7401
14942  7402
14943  7403
14944  7404
14945  7405
14946  7406
14947  7407
14948  7408
14949  7409
14950  740A
14951  740B
14952  740C
14953  740D
14954  740E
14955  740F
14956  7410
14957  7411
14958  7412
14959  7413
14960  7414
14961  7415
14962  7416
14963  7417
14964  7418
14965  7419
14966  741A
14967  741B
14968  741C
14969  741D
14970  741E
14971  741F
14972  7420
14973  7421
14974  7422
14975  7423
14976  7424
14977  7425
14978  7426
14979  7427
14980  7428
14981  7429
14982  742A
14983  742B
14984  742C
14985  742D
14986  742E
14987  742F
14988  7430
14989  7431
14990  7432
14991  7433
14992  7434
14993  7435
14994  7436
14995  7437
14996  7438
14997  7439
14998  743A
14999  743B
15000  743C
15001  743D
15002  743E
15003  743F
15004  7440
15005  7441
15006  7442
15007  7443
15008  7444
15009  7445
15010  7446
15011  7447
15012  7448
15013  7449
15014  744A
15015  744B
15016  744C
15017  744D
15018  744E
15019  744F
15020  7450
15021  7451
15022  7452
15023  7453
15024  7454
15025  7455
15026  7456
15027  7457
15028  7458
15029  7459
15030  745A
15031  745B
15032  745C
15033  745D
15034  745E
15035  745F
15036  7460
15037  7461
15038  7462
15039  7463
15040  7464
15041  7465
15042  7466
15043  7467
15044  7468
15045  7469
15046  746A
15047  746B
15048  746C
15049  746D
15050  746E
15051  746F
15052  7470
15053  7471
15054  7472
15055  7473
15056  7474
15057  7475
15058  7476
15059  7477
15060  7478
15061  7479
15062  747A
15063  747B
15064  747C
15065  747D
15066  747E
15067  747F
15068  7480
15069  7481
15070  7482
15071  7483
15072  7484
15073  7485
15074  7486
15075  7487
15076  7488
15077  7489
15078  748A
15079  748B
15080  748C
15081  748D
15082  748E
15083  748F
15084  7490
15085  7491
15086  7492
15087  7493
15088  7494
15089  7495
15090  7496
15091  7497
15092  7498
15093  7499
15094  749A
15095  749B
15096  749C
15097  749D
15098  749E
15099  749F
15100  74A0
15101  74A1
15102  74A2
15103  74A3
15104  74A4
15105  74A5
15106  74A6
15107  74A7
15108  74A8
15109  74A9
15110  74AA
15111  74AB
15112  74AC
15113  74AD
15114  74AE
15115  74AF
15116  74B0
15117  74B1
15118  74B2
15119  74B3
15120  74B4
15121  74B5
15122  74B6
15123  74B7
15124  74B8
15125  74B9
15126  74BA
15127  74BB
15128  74BC
15129  74BD
15130  74BE
15131  74BF
15132  74C0
15133  74C1
15134  74C2
15135  74C3
15136  74C4
15137  74C5
15138  74C6
15139  74C7
15140  74C8
15141  74C9
15142  74CA
15143  74CB
15144  74CC
15145  74CD
15146  74CE
15147  74CF
15148  74D0
15149  74D1
15150  74D2
15151  74D3
15152  74D4
15153  74D5
15154  74D6
15155  74D7
15156  74D8
15157  74D9
15158  74DA
15159  74DB
15160  74DC
15161  74DD
15162  74DE
15163  74DF
15164  74E0
15165  74E1
15166  74E2
15167  74E3
15168  74E4
15169  74E5
15170  74E6
15171  74E7
15172  74E8
15173  74E9
15174  74EA
15175  74EB
15176  74EC
15177  74ED
15178  74EE
15179  74EF
15180  74F0
15181  74F1
15182  74F2
15183  74F3
15184  74F4
15185  74F5
15186  74F6
15187  74F7
15188  74F8
15189  74F9
15190  74FA
15191  74FB
15192  74FC
15193  74FD
15194  74FE
15195  74FF
15196  7500
15197  7501
15198  7502
15199  7503
15200  7504
15201  7505
15202  7506
15203  7507
15204  7508
15205  7509
15206  750A
15207  750B
15208  750C
15209  750D
15210  750E
15211  750F
15212  7510
15213  7511
15214  7512
15215  7513
15216  7514
15217  7515
15218  7516
15219  7517
15220  7518
15221  7519
15222  751A
15223  751B
15224  751C
15225  751D
15226  751E
15227  751F
15228  7520
15229  7521
15230  7522
15231  7523
15232  7524
15233  7525
15234  7526
15235  7527
15236  7528
15237  7529
15238  752A
15239  752B
15240  752C
15241  752D
15242  752E
15243  752F
15244  7530
15245  7531
15246  7532
15247  7533
15248  7534
15249  7535
15250  7536
15251  7537
15252  7538
15253  7539
15254  753A
15255  753B
15256  753C
15257  753D
15258  753E
15259  753F
15260  7540
15261  7541
15262  7542
15263  7543
15264  7544
15265  7545
15266  7546
15267  7547
15268  7548
15269  7549
15270  754A
15271  754B
15272  754C
15273  754D
15274  754E
15275  754F
15276  7550
15277  7551
15278  7552
15279  7553
15280  7554
15281  7555
15282  7556
15283  7557
15284  7558
15285  7559
15286  755A
15287  755B
15288  755C
15289  755D
15290  755E
15291  755F
15292  7560
15293  7561
15294  7562
15295  7563
15296  7564
15297  7565
15298  7566
15299  7567
15300  7568
15301  7569
15302  756A
15303  756B
15304  756C
15305  756D
15306  756E
15307  756F
15308  7570
15309  7571
15310  7572
15311  7573
15312  7574
15313  7575
15314  7576
15315  7577
15316  7578
15317  7579
15318  757A
15319  757B
15320  757C
15321  757D
15322  757E
15323  757F
15324  7580
15325  7581
15326  7582
15327  7583
15328  7584
15329  7585
15330  7586
15331  7587
15332  7588
15333  7589
15334  758A
15335  758B
15336  758C
15337  758D
15338  758E
15339  758F
15340  7590
15341  7591
15342  7592
15343  7593
15344  7594
15345  7595
15346  7596
15347  7597
15348  7598
15349  7599
15350  759A
15351  759B
15352  759C
15353  759D
15354  759E
15355  759F
15356  75A0
15357  75A1
15358  75A2
15359  75A3
15360  75A4
15361  75A5
15362  75A6
15363  75A7
15364  75A8
15365  75A9
15366  75AA
15367  75AB
15368  75AC
15369  75AD
15370  75AE
15371  75AF
15372  75B0
15373  75B1
15374  75B2
15375  75B3
15376  75B4
15377  75B5
15378  75B6
15379  75B7
15380  75B8
15381  75B9
15382  75BA
15383  75BB
15384  75BC
15385  75BD
15386  75BE
15387  75BF
15388  75C0
15389  75C1
15390  75C2
15391  75C3
15392  75C4
15393  75C5
15394  75C6
15395  75C7
15396  75C8
15397  75C9
15398  75CA
15399  75CB
15400  75CC
15401  75CD
15402  75CE
15403  75CF
15404  75D0
15405  75D1
15406  75D2
15407  75D3
15408  75D4
15409  75D5
15410  75D6
15411  75D7
15412  75D8
15413  75D9
15414  75DA
15415  75DB
15416  75DC
15417  75DD
15418  75DE
15419  75DF
15420  75E0
15421  75E1
15422  75E2
15423  75E3
15424  75E4
15425  75E5
15426  75E6
15427  75E7
15428  75E8
15429  75E9
15430  75EA
15431  75EB
15432  75EC
15433  75ED
15434  75EE
15435  75EF
15436  75F0
15437  75F1
15438  75F2
15439  75F3
15440  75F4
15441  75F5
15442  75F6
15443  75F7
15444  75F8
15445  75F9
15446  75FA
15447  75FB
15448  75FC
15449  75FD
15450  75FE
15451  75FF
15452  7600
15453  7601
15454  7602
15455  7603
15456  7604
15457  7605
15458  7606
15459  7607
15460  7608
15461  7609
15462  760A
15463  760B
15464  760C
15465  760D
15466  760E
15467  760F
15468  7610
15469  7611
15470  7612
15471  7613
15472  7614
15473  7615
15474  7616
15475  7617
15476  7618
15477  7619
15478  761A
15479  761B
15480  761C
15481  761D
15482  761E
15483  761F
15484  7620
15485  7621
15486  7622
15487  7623
15488  7624
15489  7625
15490  7626
15491  7627
15492  7628
15493  7629
15494  762A
15495  762B
15496  762C
15497  762D
15498  762E
15499  762F
15500  7630
15501  7631
15502  7632
15503  7633
15504  7634
15505  7635
15506  7636
15507  7637
15508  7638
15509  7639
15510  763A
15511  763B
15512  763C
15513  763D
15514  763E
15515  763F
15516  7640
15517  7641
15518  7642
15519  7643
15520  7644
15521  7645
15522  7646
15523  7647
15524  7648
15525  7649
15526  764A
15527  764B
15528  764C
15529  764D
15530  764E
15531  764F
15532  7650
15533  7651
15534  7652
15535  7653
15536  7654
15537  7655
15538  7656
15539  7657
15540  7658
15541  7659
15542  765A
15543  765B
15544  765C
15545  765D
15546  765E
15547  765F
15548  7660
15549  7661
15550  7662
15551  7663
15552  7664
15553  7665
15554  7666
15555  7667
15556  7668
15557  7669
15558  766A
15559  766B
15560  766C
15561  766D
15562  766E
15563  766F
15564  7670
15565  7671
15566  7672
15567  7673
15568  7674
15569  7675
15570  7676
15571  7677
15572  7678
15573  7679
15574  767A
15575  767B
15576  767C
15577  767D
15578  767E
15579  767F
15580  7680
15581  7681
15582  7682
15583  7683
15584  7684
15585  7685
15586  7686
15587  7687
15588  7688
15589  7689
15590  768A
15591  768B
15592  768C
15593  768D
15594  768E
15595  768F
15596  7690
15597  7691
15598  7692
15599  7693
15600  7694
15601  7695
15602  7696
15603  7697
15604  7698
15605  7699
15606  769A
15607  769B
15608  769C
15609  769D
15610  769E
15611  769F
15612  76A0
15613  76A1
15614  76A2
15615  76A3
15616  76A4
15617  76A5
15618  76A6
15619  76A7
15620  76A8
15621  76A9
15622  76AA
15623  76AB
15624  76AC
15625  76AD
15626  76AE
15627  76AF
15628  76B0
15629  76B1
15630  76B2
15631  76B3
15632  76B4
15633  76B5
15634  76B6
15635  76B7
15636  76B8
15637  76B9
15638  76BA
15639  76BB
15640  76BC
15641  76BD
15642  76BE
15643  76BF
15644  76C0
15645  76C1
15646  76C2
15647  76C3
15648  76C4
15649  76C5
15650  76C6
15651  76C7
15652  76C8
15653  76C9
15654  76CA
15655  76CB
15656  76CC
15657  76CD
15658  76CE
15659  76CF
15660  76D0
15661  76D1
15662  76D2
15663  76D3
15664  76D4
15665  76D5
15666  76D6
15667  76D7
15668  76D8
15669  76D9
15670  76DA
15671  76DB
15672  76DC
15673  76DD
15674  76DE
15675  76DF
15676  76E0
15677  76E1
15678  76E2
15679  76E3
15680  76E4
15681  76E5
15682  76E6
15683  76E7
15684  76E8
15685  76E9
15686  76EA
15687  76EB
15688  76EC
15689  76ED
15690  76EE
15691  76EF
15692  76F0
15693  76F1
15694  76F2
15695  76F3
15696  76F4
15697  76F5
15698  76F6
15699  76F7
15700  76F8
15701  76F9
15702  76FA
15703  76FB
15704  76FC
15705  76FD
15706  76FE
15707  76FF
15708  7700
15709  7701
15710  7702
15711  7703
15712  7704
15713  7705
15714  7706
15715  7707
15716  7708
15717  7709
15718  770A
15719  770B
15720  770C
15721  770D
15722  770E
15723  770F
15724  7710
15725  7711
15726  7712
15727  7713
15728  7714
15729  7715
15730  7716
15731  7717
15732  7718
15733  7719
15734  771A
15735  771B
15736  771C
15737  771D
15738  771E
15739  771F
15740  7720
15741  7721
15742  7722
15743  7723
15744  7724
15745  7725
15746  7726
15747  7727
15748  7728
15749  7729
15750  772A
15751  772B
15752  772C
15753  772D
15754  772E
15755  772F
15756  7730
15757  7731
15758  7732
15759  7733
15760  7734
15761  7735
15762  7736
15763  7737
15764  7738
15765  7739
15766  773A
15767  773B
15768  773C
15769  773D
15770  773E
15771  773F
15772  7740
15773  7741
15774  7742
15775  7743
15776  7744
15777  7745
15778  7746
15779  7747
15780  7748
15781  7749
15782  774A
15783  774B
15784  774C
15785  774D
15786  774E
15787  774F
15788  7750
15789  7751
15790  7752
15791  7753
15792  7754
15793  7755
15794  7756
15795  7757
15796  7758
15797  7759
15798  775A
15799  775B
15800  775C
15801  775D
15802  775E
15803  775F
15804  7760
15805  7761
15806  7762
15807  7763
15808  7764
15809  7765
15810  7766
15811  7767
15812  7768
15813  7769
15814  776A
15815  776B
15816  776C
15817  776D
15818  776E
15819  776F
15820  7770
15821  7771
15822  7772
15823  7773
15824  7774
15825  7775
15826  7776
15827  7777
15828  7778
15829  7779
15830  777A
15831  777B
15832  777C
15833  777D
15834  777E
15835  777F
15836  7780
15837  7781
15838  7782
15839  7783
15840  7784
15841  7785
15842  7786
15843  7787
15844  7788
15845  7789
15846  778A
15847  778B
15848  778C
15849  778D
15850  778E
15851  778F
15852  7790
15853  7791
15854  7792
15855  7793
15856  7794
15857  7795
15858  7796
15859  7797
15860  7798
15861  7799
15862  779A
15863  779B
15864  779C
15865  779D
15866  779E
15867  779F
15868  77A0
15869  77A1
15870  77A2
15871  77A3
15872  77A4
15873  77A5
15874  77A6
15875  77A7
15876  77A8
15877  77A9
15878  77AA
15879  77AB
15880  77AC
15881  77AD
15882  77AE
15883  77AF
15884  77B0
15885  77B1
15886  77B2
15887  77B3
15888  77B4
15889  77B5
15890  77B6
15891  77B7
15892  77B8
15893  77B9
15894  77BA
15895  77BB
15896  77BC
15897  77BD
15898  77BE
15899  77BF
15900  77C0
15901  77C1
15902  77C2
15903  77C3
15904  77C4
15905  77C5
15906  77C6
15907  77C7
15908  77C8
15909  77C9
15910  77CA
15911  77CB
15912  77CC
15913  77CD
15914  77CE
15915  77CF
15916  77D0
15917  77D1
15918  77D2
15919  77D3
15920  77D4
15921  77D5
15922  77D6
15923  77D7
15924  77D8
15925  77D9
15926  77DA
15927  77DB
15928  77DC
15929  77DD
15930  77DE
15931  77DF
15932  77E0
15933  77E1
15934  77E2
15935  77E3
15936  77E4
15937  77E5
15938  77E6
15939  77E7
15940  77E8
15941  77E9
15942  77EA
15943  77EB
15944  77EC
15945  77ED
15946  77EE
15947  77EF
15948  77F0
15949  77F1
15950  77F2
15951  77F3
15952  77F4
15953  77F5
15954  77F6
15955  77F7
15956  77F8
15957  77F9
15958  77FA
15959  77FB
15960  77FC
15961  77FD
15962  77FE
15963  77FF
15964  7800
15965  7801
15966  7802
15967  7803
15968  7804
15969  7805
15970  7806
15971  7807
15972  7808
15973  7809
15974  780A
15975  780B
15976  780C
15977  780D
15978  780E
15979  780F
15980  7810
15981  7811
15982  7812
15983  7813
15984  7814
15985  7815
15986  7816
15987  7817
15988  7818
15989  7819
15990  781A
15991  781B
15992  781C
15993  781D
15994  781E
15995  781F
15996  7820
15997  7821
15998  7822
15999  7823
16000  7824
16001  7825
16002  7826
16003  7827
16004  7828
16005  7829
16006  782A
16007  782B
16008  782C
16009  782D
16010  782E
16011  782F
16012  7830
16013  7831
16014  7832
16015  7833
16016  7834
16017  7835
16018  7836
16019  7837
16020  7838
16021  7839
16022  783A
16023  783B
16024  783C
16025  783D
16026  783E
16027  783F
16028  7840
16029  7841
16030  7842
16031  7843
16032  7844
16033  7845
16034  7846
16035  7847
16036  7848
16037  7849
16038  784A
16039  784B
16040  784C
16041  784D
16042  784E
16043  784F
16044  7850
16045  7851
16046  7852
16047  7853
16048  7854
16049  7855
16050  7856
16051  7857
16052  7858
16053  7859
16054  785A
16055  785B
16056  785C
16057  785D
16058  785E
16059  785F
16060  7860
16061  7861
16062  7862
16063  7863
16064  7864
16065  7865
16066  7866
16067  7867
16068  7868
16069  7869
16070  786A
16071  786B
16072  786C
16073  786D
16074  786E
16075  786F
16076  7870
16077  7871
16078  7872
16079  7873
16080  7874
16081  7875
16082  7876
16083  7877
16084  7878
16085  7879
16086  787A
16087  787B
16088  787C
16089  787D
16090  787E
16091  787F
16092  7880
16093  7881
16094  7882
16095  7883
16096  7884
16097  7885
16098  7886
16099  7887
16100  7888
16101  7889
16102  788A
16103  788B
16104  788C
16105  788D
16106  788E
16107  788F
16108  7890
16109  7891
16110  7892
16111  7893
16112  7894
16113  7895
16114  7896
16115  7897
16116  7898
16117  7899
16118  789A
16119  789B
16120  789C
16121  789D
16122  789E
16123  789F
16124  78A0
16125  78A1
16126  78A2
16127  78A3
16128  78A4
16129  78A5
16130  78A6
16131  78A7
16132  78A8
16133  78A9
16134  78AA
16135  78AB
16136  78AC
16137  78AD
16138  78AE
16139  78AF
16140  78B0
16141  78B1
16142  78B2
16143  78B3
16144  78B4
16145  78B5
16146  78B6
16147  78B7
16148  78B8
16149  78B9
16150  78BA
16151  78BB
16152  78BC
16153  78BD
16154  78BE
16155  78BF
16156  78C0
16157  78C1
16158  78C2
16159  78C3
16160  78C4
16161  78C5
16162  78C6
16163  78C7
16164  78C8
16165  78C9
16166  78CA
16167  78CB
16168  78CC
16169  78CD
16170  78CE
16171  78CF
16172  78D0
16173  78D1
16174  78D2
16175  78D3
16176  78D4
16177  78D5
16178  78D6
16179  78D7
16180  78D8
16181  78D9
16182  78DA
16183  78DB
16184  78DC
16185  78DD
16186  78DE
16187  78DF
16188  78E0
16189  78E1
16190  78E2
16191  78E3
16192  78E4
16193  78E5
16194  78E6
16195  78E7
16196  78E8
16197  78E9
16198  78EA
16199  78EB
16200  78EC
16201  78ED
16202  78EE
16203  78EF
16204  78F0
16205  78F1
16206  78F2
16207  78F3
16208  78F4
16209  78F5
16210  78F6
16211  78F7
16212  78F8
16213  78F9
16214  78FA
16215  78FB
16216  78FC
16217  78FD
16218  78FE
16219  78FF
16220  7900
16221  7901
16222  7902
16223  7903
16224  7904
16225  7905
16226  7906
16227  7907
16228  7908
16229  7909
16230  790A
16231  790B
16232  790C
16233  790D
16234  790E
16235  790F
16236  7910
16237  7911
16238  7912
16239  7913
16240  7914
16241  7915
16242  7916
16243  7917
16244  7918
16245  7919
16246  791A
16247  791B
16248  791C
16249  791D
16250  791E
16251  791F
16252  7920
16253  7921
16254  7922
16255  7923
16256  7924
16257  7925
16258  7926
16259  7927
16260  7928
16261  7929
16262  792A
16263  792B
16264  792C
16265  792D
16266  792E
16267  792F
16268  7930
16269  7931
16270  7932
16271  7933
16272  7934
16273  7935
16274  7936
16275  7937
16276  7938
16277  7939
16278  793A
16279  793B
16280  793C
16281  793D
16282  793E
16283  793F
16284  7940
16285  7941
16286  7942
16287  7943
16288  7944
16289  7945
16290  7946
16291  7947
16292  7948
16293  7949
16294  794A
16295  794B
16296  794C
16297  794D
16298  794E
16299  794F
16300  7950
16301  7951
16302  7952
16303  7953
16304  7954
16305  7955
16306  7956
16307  7957
16308  7958
16309  7959
16310  795A
16311  795B
16312  795C
16313  795D
16314  795E
16315  795F
16316  7960
16317  7961
16318  7962
16319  7963
16320  7964
16321  7965
16322  7966
16323  7967
16324  7968
16325  7969
16326  796A
16327  796B
16328  796C
16329  796D
16330  796E
16331  796F
16332  7970
16333  7971
16334  7972
16335  7973
16336  7974
16337  7975
16338  7976
16339  7977
16340  7978
16341  7979
16342  797A
16343  797B
16344  797C
16345  797D
16346  797E
16347  797F
16348  7980
16349  7981
16350  7982
16351  7983
16352  7984
16353  7985
16354  7986
16355  7987
16356  7988
16357  7989
16358  798A
16359  798B
16360  798C
16361  798D
16362  798E
16363  798F
16364  7990
16365  7991
16366  7992
16367  7993
16368  7994
16369  7995
16370  7996
16371  7997
16372  7998
16373  7999
16374  799A
16375  799B
16376  799C
16377  799D
16378  799E
16379  799F
16380  79A0
16381  79A1
16382  79A2
16383  79A3
16384  79A4
16385  79A5
16386  79A6
16387  79A7
16388  79A8
16389  79A9
16390  79AA
16391  79AB
16392  79AC
16393  79AD
16394  79AE
16395  79AF
16396  79B0
16397  79B1
16398  79B2
16399  79B3
16400  79B4
16401  79B5
16402  79B6
16403  79B7
16404  79B8
16405  79B9
16406  79BA
16407  79BB
16408  79BC
16409  79BD
16410  79BE
16411  79BF
16412  79C0
16413  79C1
16414  79C2
16415  79C3
16416  79C4
16417  79C5
16418  79C6
16419  79C7
16420  79C8
16421  79C9
16422  79CA
16423  79CB
16424  79CC
16425  79CD
16426  79CE
16427  79CF
16428  79D0
16429  79D1
16430  79D2
16431  79D3
16432  79D4
16433  79D5
16434  79D6
16435  79D7
16436  79D8
16437  79D9
16438  79DA
16439  79DB
16440  79DC
16441  79DD
16442  79DE
16443  79DF
16444  79E0
16445  79E1
16446  79E2
16447  79E3
16448  79E4
16449  79E5
16450  79E6
16451  79E7
16452  79E8
16453  79E9
16454  79EA
16455  79EB
16456  79EC
16457  79ED
16458  79EE
16459  79EF
16460  79F0
16461  79F1
16462  79F2
16463  79F3
16464  79F4
16465  79F5
16466  79F6
16467  79F7
16468  79F8
16469  79F9
16470  79FA
16471  79FB
16472  79FC
16473  79FD
16474  79FE
16475  79FF
16476  7A00
16477  7A01
16478  7A02
16479  7A03
16480  7A04
16481  7A05
16482  7A06
16483  7A07
16484  7A08
16485  7A09
16486  7A0A
16487  7A0B
16488  7A0C
16489  7A0D
16490  7A0E
16491  7A0F
16492  7A10
16493  7A11
16494  7A12
16495  7A13
16496  7A14
16497  7A15
16498  7A16
16499  7A17
16500  7A18
16501  7A19
16502  7A1A
16503  7A1B
16504  7A1C
16505  7A1D
16506  7A1E
16507  7A1F
16508  7A20
16509  7A21
16510  7A22
16511  7A23
16512  7A24
16513  7A25
16514  7A26
16515  7A27
16516  7A28
16517  7A29
16518  7A2A
16519  7A2B
16520  7A2C
16521  7A2D
16522  7A2E
16523  7A2F
16524  7A30
16525  7A31
16526  7A32
16527  7A33
16528  7A34
16529  7A35
16530  7A36
16531  7A37
16532  7A38
16533  7A39
16534  7A3A
16535  7A3B
16536  7A3C
16537  7A3D
16538  7A3E
16539  7A3F
16540  7A40
16541  7A41
16542  7A42
16543  7A43
16544  7A44
16545  7A45
16546  7A46
16547  7A47
16548  7A48
16549  7A49
16550  7A4A
16551  7A4B
16552  7A4C
16553  7A4D
16554  7A4E
16555  7A4F
16556  7A50
16557  7A51
16558  7A52
16559  7A53
16560  7A54
16561  7A55
16562  7A56
16563  7A57
16564  7A58
16565  7A59
16566  7A5A
16567  7A5B
16568  7A5C
16569  7A5D
16570  7A5E
16571  7A5F
16572  7A60
16573  7A61
16574  7A62
16575  7A63
16576  7A64
16577  7A65
16578  7A66
16579  7A67
16580  7A68
16581  7A69
16582  7A6A
16583  7A6B
16584  7A6C
16585  7A6D
16586  7A6E
16587  7A6F
16588  7A70
16589  7A71
16590  7A72
16591  7A73
16592  7A74
16593  7A75
16594  7A76
16595  7A77
16596  7A78
16597  7A79
16598  7A7A
16599  7A7B
16600  7A7C
16601  7A7D
16602  7A7E
16603  7A7F
16604  7A80
16605  7A81
16606  7A82
16607  7A83
16608  7A84
16609  7A85
16610  7A86
16611  7A87
16612  7A88
16613  7A89
16614  7A8A
16615  7A8B
16616  7A8C
16617  7A8D
16618  7A8E
16619  7A8F
16620  7A90
16621  7A91
16622  7A92
16623  7A93
16624  7A94
16625  7A95
16626  7A96
16627  7A97
16628  7A98
16629  7A99
16630  7A9A
16631  7A9B
16632  7A9C
16633  7A9D
16634  7A9E
16635  7A9F
16636  7AA0
16637  7AA1
16638  7AA2
16639  7AA3
16640  7AA4
16641  7AA5
16642  7AA6
16643  7AA7
16644  7AA8
16645  7AA9
16646  7AAA
16647  7AAB
16648  7AAC
16649  7AAD
16650  7AAE
16651  7AAF
16652  7AB0
16653  7AB1
16654  7AB2
16655  7AB3
16656  7AB4
16657  7AB5
16658  7AB6
16659  7AB7
16660  7AB8
16661  7AB9
16662  7ABA
16663  7ABB
16664  7ABC
16665  7ABD
16666  7ABE
16667  7ABF
16668  7AC0
16669  7AC1
16670  7AC2
16671  7AC3
16672  7AC4
16673  7AC5
16674  7AC6
16675  7AC7
16676  7AC8
16677  7AC9
16678  7ACA
16679  7ACB
16680  7ACC
16681  7ACD
16682  7ACE
16683  7ACF
16684  7AD0
16685  7AD1
16686  7AD2
16687  7AD3
16688  7AD4
16689  7AD5
16690  7AD6
16691  7AD7
16692  7AD8
16693  7AD9
16694  7ADA
16695  7ADB
16696  7ADC
16697  7ADD
16698  7ADE
16699  7ADF
16700  7AE0
16701  7AE1
16702  7AE2
16703  7AE3
16704  7AE4
16705  7AE5
16706  7AE6
16707  7AE7
16708  7AE8
16709  7AE9
16710  7AEA
16711  7AEB
16712  7AEC
16713  7AED
16714  7AEE
16715  7AEF
16716  7AF0
16717  7AF1
16718  7AF2
16719  7AF3
16720  7AF4
16721  7AF5
16722  7AF6
16723  7AF7
16724  7AF8
16725  7AF9
16726  7AFA
16727  7AFB
16728  7AFC
16729  7AFD
16730  7AFE
16731  7AFF
16732  7B00
16733  7B01
16734  7B02
16735  7B03
16736  7B04
16737  7B05
16738  7B06
16739  7B07
16740  7B08
16741  7B09
16742  7B0A
16743  7B0B
16744  7B0C
16745  7B0D
16746  7B0E
16747  7B0F
16748  7B10
16749  7B11
16750  7B12
16751  7B13
16752  7B14
16753  7B15
16754  7B16
16755  7B17
16756  7B18
16757  7B19
16758  7B1A
16759  7B1B
16760  7B1C
16761  7B1D
16762  7B1E
16763  7B1F
16764  7B20
16765  7B21
16766  7B22
16767  7B23
16768  7B24
16769  7B25
16770  7B26
16771  7B27
16772  7B28
16773  7B29
16774  7B2A
16775  7B2B
16776  7B2C
16777  7B2D
16778  7B2E
16779  7B2F
16780  7B30
16781  7B31
16782  7B32
16783  7B33
16784  7B34
16785  7B35
16786  7B36
16787  7B37
16788  7B38
16789  7B39
16790  7B3A
16791  7B3B
16792  7B3C
16793  7B3D
16794  7B3E
16795  7B3F
16796  7B40
16797  7B41
16798  7B42
16799  7B43
16800  7B44
16801  7B45
16802  7B46
16803  7B47
16804  7B48
16805  7B49
16806  7B4A
16807  7B4B
16808  7B4C
16809  7B4D
16810  7B4E
16811  7B4F
16812  7B50
16813  7B51
16814  7B52
16815  7B53
16816  7B54
16817  7B55
16818  7B56
16819  7B57
16820  7B58
16821  7B59
16822  7B5A
16823  7B5B
16824  7B5C
16825  7B5D
16826  7B5E
16827  7B5F
16828  7B60
16829  7B61
16830  7B62
16831  7B63
16832  7B64
16833  7B65
16834  7B66
16835  7B67
16836  7B68
16837  7B69
16838  7B6A
16839  7B6B
16840  7B6C
16841  7B6D
16842  7B6E
16843  7B6F
16844  7B70
16845  7B71
16846  7B72
16847  7B73
16848  7B74
16849  7B75
16850  7B76
16851  7B77
16852  7B78
16853  7B79
16854  7B7A
16855  7B7B
16856  7B7C
16857  7B7D
16858  7B7E
16859  7B7F
16860  7B80
16861  7B81
16862  7B82
16863  7B83
16864  7B84
16865  7B85
16866  7B86
16867  7B87
16868  7B88
16869  7B89
16870  7B8A
16871  7B8B
16872  7B8C
16873  7B8D
16874  7B8E
16875  7B8F
16876  7B90
16877  7B91
16878  7B92
16879  7B93
16880  7B94
16881  7B95
16882  7B96
16883  7B97
16884  7B98
16885  7B99
16886  7B9A
16887  7B9B
16888  7B9C
16889  7B9D
16890  7B9E
16891  7B9F
16892  7BA0
16893  7BA1
16894  7BA2
16895  7BA3
16896  7BA4
16897  7BA5
16898  7BA6
16899  7BA7
16900  7BA8
16901  7BA9
16902  7BAA
16903  7BAB
16904  7BAC
16905  7BAD
16906  7BAE
16907  7BAF
16908  7BB0
16909  7BB1
16910  7BB2
16911  7BB3
16912  7BB4
16913  7BB5
16914  7BB6
16915  7BB7
16916  7BB8
16917  7BB9
16918  7BBA
16919  7BBB
16920  7BBC
16921  7BBD
16922  7BBE
16923  7BBF
16924  7BC0
16925  7BC1
16926  7BC2
16927  7BC3
16928  7BC4
16929  7BC5
16930  7BC6
16931  7BC7
16932  7BC8
16933  7BC9
16934  7BCA
16935  7BCB
16936  7BCC
16937  7BCD
16938  7BCE
16939  7BCF
16940  7BD0
16941  7BD1
16942  7BD2
16943  7BD3
16944  7BD4
16945  7BD5
16946  7BD6
16947  7BD7
16948  7BD8
16949  7BD9
16950  7BDA
16951  7BDB
16952  7BDC
16953  7BDD
16954  7BDE
16955  7BDF
16956  7BE0
16957  7BE1
16958  7BE2
16959  7BE3
16960  7BE4
16961  7BE5
16962  7BE6
16963  7BE7
16964  7BE8
16965  7BE9
16966  7BEA
16967  7BEB
16968  7BEC
16969  7BED
16970  7BEE
16971  7BEF
16972  7BF0
16973  7BF1
16974  7BF2
16975  7BF3
16976  7BF4
16977  7BF5
16978  7BF6
16979  7BF7
16980  7BF8
16981  7BF9
16982  7BFA
16983  7BFB
16984  7BFC
16985  7BFD
16986  7BFE
16987  7BFF
16988  7C00
16989  7C01
16990  7C02
16991  7C03
16992  7C04
16993  7C05
16994  7C06
16995  7C07
16996  7C08
16997  7C09
16998  7C0A
16999  7C0B
17000  7C0C
17001  7C0D
17002  7C0E
17003  7C0F
17004  7C10
17005  7C11
17006  7C12
17007  7C13
17008  7C14
17009  7C15
17010  7C16
17011  7C17
17012  7C18
17013  7C19
17014  7C1A
17015  7C1B
17016  7C1C
17017  7C1D
17018  7C1E
17019  7C1F
17020  7C20
17021  7C21
17022  7C22
17023  7C23
17024  7C24
17025  7C25
17026  7C26
17027  7C27
17028  7C28
17029  7C29
17030  7C2A
17031  7C2B
17032  7C2C
17033  7C2D
17034  7C2E
17035  7C2F
17036  7C30
17037  7C31
17038  7C32
17039  7C33
17040  7C34
17041  7C35
17042  7C36
17043  7C37
17044  7C38
17045  7C39
17046  7C3A
17047  7C3B
17048  7C3C
17049  7C3D
17050  7C3E
17051  7C3F
17052  7C40
17053  7C41
17054  7C42
17055  7C43
17056  7C44
17057  7C45
17058  7C46
17059  7C47
17060  7C48
17061  7C49
17062  7C4A
17063  7C4B
17064  7C4C
17065  7C4D
17066  7C4E
17067  7C4F
17068  7C50
17069  7C51
17070  7C52
17071  7C53
17072  7C54
17073  7C55
17074  7C56
17075  7C57
17076  7C58
17077  7C59
17078  7C5A
17079  7C5B
17080  7C5C
17081  7C5D
17082  7C5E
17083  7C5F
17084  7C60
17085  7C61
17086  7C62
17087  7C63
17088  7C64
17089  7C65
17090  7C66
17091  7C67
17092  7C68
17093  7C69
17094  7C6A
17095  7C6B
17096  7C6C
17097  7C6D
17098  7C6E
17099  7C6F
17100  7C70
17101  7C71
17102  7C72
17103  7C73
17104  7C74
17105  7C75
17106  7C76
17107  7C77
17108  7C78
17109  7C79
17110  7C7A
17111  7C7B
17112  7C7C
17113  7C7D
17114  7C7E
17115  7C7F
17116  7C80
17117  7C81
17118  7C82
17119  7C83
17120  7C84
17121  7C85
17122  7C86
17123  7C87
17124  7C88
17125  7C89
17126  7C8A
17127  7C8B
17128  7C8C
17129  7C8D
17130  7C8E
17131  7C8F
17132  7C90
17133  7C91
17134  7C92
17135  7C93
17136  7C94
17137  7C95
17138  7C96
17139  7C97
17140  7C98
17141  7C99
17142  7C9A
17143  7C9B
17144  7C9C
17145  7C9D
17146  7C9E
17147  7C9F
17148  7CA0
17149  7CA1
17150  7CA2
17151  7CA3
17152  7CA4
17153  7CA5
17154  7CA6
17155  7CA7
17156  7CA8
17157  7CA9
17158  7CAA
17159  7CAB
17160  7CAC
17161  7CAD
17162  7CAE
17163  7CAF
17164  7CB0
17165  7CB1
17166  7CB2
17167  7CB3
17168  7CB4
17169  7CB5
17170  7CB6
17171  7CB7
17172  7CB8
17173  7CB9
17174  7CBA
17175  7CBB
17176  7CBC
17177  7CBD
17178  7CBE
17179  7CBF
17180  7CC0
17181  7CC1
17182  7CC2
17183  7CC3
17184  7CC4
17185  7CC5
17186  7CC6
17187  7CC7
17188  7CC8
17189  7CC9
17190  7CCA
17191  7CCB
17192  7CCC
17193  7CCD
17194  7CCE
17195  7CCF
17196  7CD0
17197  7CD1
17198  7CD2
17199  7CD3
17200  7CD4
17201  7CD5
17202  7CD6
17203  7CD7
17204  7CD8
17205  7CD9
17206  7CDA
17207  7CDB
17208  7CDC
17209  7CDD
17210  7CDE
17211  7CDF
17212  7CE0
17213  7CE1
17214  7CE2
17215  7CE3
17216  7CE4
17217  7CE5
17218  7CE6
17219  7CE7
17220  7CE8
17221  7CE9
17222  7CEA
17223  7CEB
17224  7CEC
17225  7CED
17226  7CEE
17227  7CEF
17228  7CF0
17229  7CF1
17230  7CF2
17231  7CF3
17232  7CF4
17233  7CF5
17234  7CF6
17235  7CF7
17236  7CF8
17237  7CF9
17238  7CFA
17239  7CFB
17240  7CFC
17241  7CFD
17242  7CFE
17243  7CFF
17244  7D00
17245  7D01
17246  7D02
17247  7D03
17248  7D04
17249  7D05
17250  7D06
17251  7D07
17252  7D08
17253  7D09
17254  7D0A
17255  7D0B
17256  7D0C
17257  7D0D
17258  7D0E
17259  7D0F
17260  7D10
17261  7D11
17262  7D12
17263  7D13
17264  7D14
17265  7D15
17266  7D16
17267  7D17
17268  7D18
17269  7D19
17270  7D1A
17271  7D1B
17272  7D1C
17273  7D1D
17274  7D1E
17275  7D1F
17276  7D20
17277  7D21
17278  7D22
17279  7D23
17280  7D24
17281  7D25
17282  7D26
17283  7D27
17284  7D28
17285  7D29
17286  7D2A
17287  7D2B
17288  7D2C
17289  7D2D
17290  7D2E
17291  7D2F
17292  7D30
17293  7D31
17294  7D32
17295  7D33
17296  7D34
17297  7D35
17298  7D36
17299  7D37
17300  7D38
17301  7D39
17302  7D3A
17303  7D3B
17304  7D3C
17305  7D3D
17306  7D3E
17307  7D3F
17308  7D40
17309  7D41
17310  7D42
17311  7D43
17312  7D44
17313  7D45
17314  7D46
17315  7D47
17316  7D48
17317  7D49
17318  7D4A
17319  7D4B
17320  7D4C
17321  7D4D
17322  7D4E
17323  7D4F
17324  7D50
17325  7D51
17326  7D52
17327  7D53
17328  7D54
17329  7D55
17330  7D56
17331  7D57
17332  7D58
17333  7D59
17334  7D5A
17335  7D5B
17336  7D5C
17337  7D5D
17338  7D5E
17339  7D5F
17340  7D60
17341  7D61
17342  7D62
17343  7D63
17344  7D64
17345  7D65
17346  7D66
17347  7D67
17348  7D68
17349  7D69
17350  7D6A
17351  7D6B
17352  7D6C
17353  7D6D
17354  7D6E
17355  7D6F
17356  7D70
17357  7D71
17358  7D72
17359  7D73
17360  7D74
17361  7D75
17362  7D76
17363  7D77
17364  7D78
17365  7D79
17366  7D7A
17367  7D7B
17368  7D7C
17369  7D7D
17370  7D7E
17371  7D7F
17372  7D80
17373  7D81
17374  7D82
17375  7D83
17376  7D84
17377  7D85
17378  7D86
17379  7D87
17380  7D88
17381  7D89
17382  7D8A
17383  7D8B
17384  7D8C
17385  7D8D
17386  7D8E
17387  7D8F
17388  7D90
17389  7D91
17390  7D92
17391  7D93
17392  7D94
17393  7D95
17394  7D96
17395  7D97
17396  7D98
17397  7D99
17398  7D9A
17399  7D9B
17400  7D9C
17401  7D9D
17402  7D9E
17403  7D9F
17404  7DA0
17405  7DA1
17406  7DA2
17407  7DA3
17408  7DA4
17409  7DA5
17410  7DA6
17411  7DA7
17412  7DA8
17413  7DA9
17414  7DAA
17415  7DAB
17416  7DAC
17417  7DAD
17418  7DAE
17419  7DAF
17420  7DB0
17421  7DB1
17422  7DB2
17423  7DB3
17424  7DB4
17425  7DB5
17426  7DB6
17427  7DB7
17428  7DB8
17429  7DB9
17430  7DBA
17431  7DBB
17432  7DBC
17433  7DBD
17434  7DBE
17435  7DBF
17436  7DC0
17437  7DC1
17438  7DC2
17439  7DC3
17440  7DC4
17441  7DC5
17442  7DC6
17443  7DC7
17444  7DC8
17445  7DC9
17446  7DCA
17447  7DCB
17448  7DCC
17449  7DCD
17450  7DCE
17451  7DCF
17452  7DD0
17453  7DD1
17454  7DD2
17455  7DD3
17456  7DD4
17457  7DD5
17458  7DD6
17459  7DD7
17460  7DD8
17461  7DD9
17462  7DDA
17463  7DDB
17464  7DDC
17465  7DDD
17466  7DDE
17467  7DDF
17468  7DE0
17469  7DE1
17470  7DE2
17471  7DE3
17472  7DE4
17473  7DE5
17474  7DE6
17475  7DE7
17476  7DE8
17477  7DE9
17478  7DEA
17479  7DEB
17480  7DEC
17481  7DED
17482  7DEE
17483  7DEF
17484  7DF0
17485  7DF1
17486  7DF2
17487  7DF3
17488  7DF4
17489  7DF5
17490  7DF6
17491  7DF7
17492  7DF8
17493  7DF9
17494  7DFA
17495  7DFB
17496  7DFC
17497  7DFD
17498  7DFE
17499  7DFF
17500  7E00
17501  7E01
17502  7E02
17503  7E03
17504  7E04
17505  7E05
17506  7E06
17507  7E07
17508  7E08
17509  7E09
17510  7E0A
17511  7E0B
17512  7E0C
17513  7E0D
17514  7E0E
17515  7E0F
17516  7E10
17517  7E11
17518  7E12
17519  7E13
17520  7E14
17521  7E15
17522  7E16
17523  7E17
17524  7E18
17525  7E19
17526  7E1A
17527  7E1B
17528  7E1C
17529  7E1D
17530  7E1E
17531  7E1F
17532  7E20
17533  7E21
17534  7E22
17535  7E23
17536  7E24
17537  7E25
17538  7E26
17539  7E27
17540  7E28
17541  7E29
17542  7E2A
17543  7E2B
17544  7E2C
17545  7E2D
17546  7E2E
17547  7E2F
17548  7E30
17549  7E31
17550  7E32
17551  7E33
17552  7E34
17553  7E35
17554  7E36
17555  7E37
17556  7E38
17557  7E39
17558  7E3A
17559  7E3B
17560  7E3C
17561  7E3D
17562  7E3E
17563  7E3F
17564  7E40
17565  7E41
17566  7E42
17567  7E43
17568  7E44
17569  7E45
17570  7E46
17571  7E47
17572  7E48
17573  7E49
17574  7E4A
17575  7E4B
17576  7E4C
17577  7E4D
17578  7E4E
17579  7E4F
17580  7E50
17581  7E51
17582  7E52
17583  7E53
17584  7E54
17585  7E55
17586  7E56
17587  7E57
17588  7E58
17589  7E59
17590  7E5A
17591  7E5B
17592  7E5C
17593  7E5D
17594  7E5E
17595  7E5F
17596  7E60
17597  7E61
17598  7E62
17599  7E63
17600  7E64
17601  7E65
17602  7E66
17603  7E67
17604  7E68
17605  7E69
17606  7E6A
17607  7E6B
17608  7E6C
17609  7E6D
17610  7E6E
17611  7E6F
17612  7E70
17613  7E71
17614  7E72
17615  7E73
17616  7E74
17617  7E75
17618  7E76
17619  7E77
17620  7E78
17621  7E79
17622  7E7A
17623  7E7B
17624  7E7C
17625  7E7D
17626  7E7E
17627  7E7F
17628  7E80
17629  7E81
17630  7E82
17631  7E83
17632  7E84
17633  7E85
17634  7E86
17635  7E87
17636  7E88
17637  7E89
17638  7E8A
17639  7E8B
17640  7E8C
17641  7E8D
17642  7E8E
17643  7E8F
17644  7E90
17645  7E91
17646  7E92
17647  7E93
17648  7E94
17649  7E95
17650  7E96
17651  7E97
17652  7E98
17653  7E99
17654  7E9A
17655  7E9B
17656  7E9C
17657  7E9D
17658  7E9E
17659  7E9F
17660  7EA0
17661  7EA1
17662  7EA2
17663  7EA3
17664  7EA4
17665  7EA5
17666  7EA6
17667  7EA7
17668  7EA8
17669  7EA9
17670  7EAA
17671  7EAB
17672  7EAC
17673  7EAD
17674  7EAE
17675  7EAF
17676  7EB0
17677  7EB1
17678  7EB2
17679  7EB3
17680  7EB4
17681  7EB5
17682  7EB6
17683  7EB7
17684  7EB8
17685  7EB9
17686  7EBA
17687  7EBB
17688  7EBC
17689  7EBD
17690  7EBE
17691  7EBF
17692  7EC0
17693  7EC1
17694  7EC2
17695  7EC3
17696  7EC4
17697  7EC5
17698  7EC6
17699  7EC7
17700  7EC8
17701  7EC9
17702  7ECA
17703  7ECB
17704  7ECC
17705  7ECD
17706  7ECE
17707  7ECF
17708  7ED0
17709  7ED1
17710  7ED2
17711  7ED3
17712  7ED4
17713  7ED5
17714  7ED6
17715  7ED7
17716  7ED8
17717  7ED9
17718  7EDA
17719  7EDB
17720  7EDC
17721  7EDD
17722  7EDE
17723  7EDF
17724  7EE0
17725  7EE1
17726  7EE2
17727  7EE3
17728  7EE4
17729  7EE5
17730  7EE6
17731  7EE7
17732  7EE8
17733  7EE9
17734  7EEA
17735  7EEB
17736  7EEC
17737  7EED
17738  7EEE
17739  7EEF
17740  7EF0
17741  7EF1
17742  7EF2
17743  7EF3
17744  7EF4
17745  7EF5
17746  7EF6
17747  7EF7
17748  7EF8
17749  7EF9
17750  7EFA
17751  7EFB
17752  7EFC
17753  7EFD
17754  7EFE
17755  7EFF
17756  7F00
17757  7F01
17758  7F02
17759  7F03
17760  7F04
17761  7F05
17762  7F06
17763  7F07
17764  7F08
17765  7F09
17766  7F0A
17767  7F0B
17768  7F0C
17769  7F0D
17770  7F0E
17771  7F0F
17772  7F10
17773  7F11
17774  7F12
17775  7F13
17776  7F14
17777  7F15
17778  7F16
17779  7F17
17780  7F18
17781  7F19
17782  7F1A
17783  7F1B
17784  7F1C
17785  7F1D
17786  7F1E
17787  7F1F
17788  7F20
17789  7F21
17790  7F22
17791  7F23
17792  7F24
17793  7F25
17794  7F26
17795  7F27
17796  7F28
17797  7F29
17798  7F2A
17799  7F2B
17800  7F2C
17801  7F2D
17802  7F2E
17803  7F2F
17804  7F30
17805  7F31
17806  7F32
17807  7F33
17808  7F34
17809  7F35
17810  7F36
17811  7F37
17812  7F38
17813  7F39
17814  7F3A
17815  7F3B
17816  7F3C
17817  7F3D
17818  7F3E
17819  7F3F
17820  7F40
17821  7F41
17822  7F42
17823  7F43
17824  7F44
17825  7F45
17826  7F46
17827  7F47
17828  7F48
17829  7F49
17830  7F4A
17831  7F4B
17832  7F4C
17833  7F4D
17834  7F4E
17835  7F4F
17836  7F50
17837  7F51
17838  7F52
17839  7F53
17840  7F54
17841  7F55
17842  7F56
17843  7F57
17844  7F58
17845  7F59
17846  7F5A
17847  7F5B
17848  7F5C
17849  7F5D
17850  7F5E
17851  7F5F
17852  7F60
17853  7F61
17854  7F62
17855  7F63
17856  7F64
17857  7F65
17858  7F66
17859  7F67
17860  7F68
17861  7F69
17862  7F6A
17863  7F6B
17864  7F6C
17865  7F6D
17866  7F6E
17867  7F6F
17868  7F70
17869  7F71
17870  7F72
17871  7F73
17872  7F74
17873  7F75
17874  7F76
17875  7F77
17876  7F78
17877  7F79
17878  7F7A
17879  7F7B
17880  7F7C
17881  7F7D
17882  7F7E
17883  7F7F
17884  7F80
17885  7F81
17886  7F82
17887  7F83
17888  7F84
17889  7F85
17890  7F86
17891  7F87
17892  7F88
17893  7F89
17894  7F8A
17895  7F8B
17896  7F8C
17897  7F8D
17898  7F8E
17899  7F8F
17900  7F90
17901  7F91
17902  7F92
17903  7F93
17904  7F94
17905  7F95
17906  7F96
17907  7F97
17908  7F98
17909  7F99
17910  7F9A
17911  7F9B
17912  7F9C
17913  7F9D
17914  7F9E
17915  7F9F
17916  7FA0
17917  7FA1
17918  7FA2
17919  7FA3
17920  7FA4
17921  7FA5
17922  7FA6
17923  7FA7
17924  7FA8
17925  7FA9
17926  7FAA
17927  7FAB
17928  7FAC
17929  7FAD
17930  7FAE
17931  7FAF
17932  7FB0
17933  7FB1
17934  7FB2
17935  7FB3
17936  7FB4
17937  7FB5
17938  7FB6
17939  7FB7
17940  7FB8
17941  7FB9
17942  7FBA
17943  7FBB
17944  7FBC
17945  7FBD
17946  7FBE
17947  7FBF
17948  7FC0
17949  7FC1
17950  7FC2
17951  7FC3
17952  7FC4
17953  7FC5
17954  7FC6
17955  7FC7
17956  7FC8
17957  7FC9
17958  7FCA
17959  7FCB
17960  7FCC
17961  7FCD
17962  7FCE
17963  7FCF
17964  7FD0
17965  7FD1
17966  7FD2
17967  7FD3
17968  7FD4
17969  7FD5
17970  7FD6
17971  7FD7
17972  7FD8
17973  7FD9
17974  7FDA
17975  7FDB
17976  7FDC
17977  7FDD
17978  7FDE
17979  7FDF
17980  7FE0
17981  7FE1
17982  7FE2
17983  7FE3
17984  7FE4
17985  7FE5
17986  7FE6
17987  7FE7
17988  7FE8
17989  7FE9
17990  7FEA
17991  7FEB
17992  7FEC
17993  7FED
17994  7FEE
17995  7FEF
17996  7FF0
17997  7FF1
17998  7FF2
17999  7FF3
18000  7FF4
18001  7FF5
18002  7FF6
18003  7FF7
18004  7FF8
18005  7FF9
18006  7FFA
18007  7FFB
18008  7FFC
18009  7FFD
18010  7FFE
18011  7FFF
18012  8000
18013  8001
18014  8002
18015  8003
18016  8004
18017  8005
18018  8006
18019  8007
18020  8008
18021  8009
18022  800A
18023  800B
18024  800C
18025  800D
18026  800E
18027  800F
18028  8010
18029  8011
18030  8012
18031  8013
18032  8014
18033  8015
18034  8016
18035  8017
18036  8018
18037  8019
18038  801A
18039  801B
18040  801C
18041  801D
18042  801E
18043  801F
18044  8020
18045  8021
18046  8022
18047  8023
18048  8024
18049  8025
18050  8026
18051  8027
18052  8028
18053  8029
18054  802A
18055  802B
18056  802C
18057  802D
18058  802E
18059  802F
18060  8030
18061  8031
18062  8032
18063  8033
18064  8034
18065  8035
18066  8036
18067  8037
18068  8038
18069  8039
18070  803A
18071  803B
18072  803C
18073  803D
18074  803E
18075  803F
18076  8040
18077  8041
18078  8042
18079  8043
18080  8044
18081  8045
18082  8046
18083  8047
18084  8048
18085  8049
18086  804A
18087  804B
18088  804C
18089  804D
18090  804E
18091  804F
18092  8050
18093  8051
18094  8052
18095  8053
18096  8054
18097  8055
18098  8056
18099  8057
18100  8058
18101  8059
18102  805A
18103  805B
18104  805C
18105  805D
18106  805E
18107  805F
18108  8060
18109  8061
18110  8062
18111  8063
18112  8064
18113  8065
18114  8066
18115  8067
18116  8068
18117  8069
18118  806A
18119  806B
18120  806C
18121  806D
18122  806E
18123  806F
18124  8070
18125  8071
18126  8072
18127  8073
18128  8074
18129  8075
18130  8076
18131  8077
18132  8078
18133  8079
18134  807A
18135  807B
18136  807C
18137  807D
18138  807E
18139  807F
18140  8080
18141  8081
18142  8082
18143  8083
18144  8084
18145  8085
18146  8086
18147  8087
18148  8088
18149  8089
18150  808A
18151  808B
18152  808C
18153  808D
18154  808E
18155  808F
18156  8090
18157  8091
18158  8092
18159  8093
18160  8094
18161  8095
18162  8096
18163  8097
18164  8098
18165  8099
18166  809A
18167  809B
18168  809C
18169  809D
18170  809E
18171  809F
18172  80A0
18173  80A1
18174  80A2
18175  80A3
18176  80A4
18177  80A5
18178  80A6
18179  80A7
18180  80A8
18181  80A9
18182  80AA
18183  80AB
18184  80AC
18185  80AD
18186  80AE
18187  80AF
18188  80B0
18189  80B1
18190  80B2
18191  80B3
18192  80B4
18193  80B5
18194  80B6
18195  80B7
18196  80B8
18197  80B9
18198  80BA
18199  80BB
18200  80BC
18201  80BD
18202  80BE
18203  80BF
18204  80C0
18205  80C1
18206  80C2
18207  80C3
18208  80C4
18209  80C5
18210  80C6
18211  80C7
18212  80C8
18213  80C9
18214  80CA
18215  80CB
18216  80CC
18217  80CD
18218  80CE
18219  80CF
18220  80D0
18221  80D1
18222  80D2
18223  80D3
18224  80D4
18225  80D5
18226  80D6
18227  80D7
18228  80D8
18229  80D9
18230  80DA
18231  80DB
18232  80DC
18233  80DD
18234  80DE
18235  80DF
18236  80E0
18237  80E1
18238  80E2
18239  80E3
18240  80E4
18241  80E5
18242  80E6
18243  80E7
18244  80E8
18245  80E9
18246  80EA
18247  80EB
18248  80EC
18249  80ED
18250  80EE
18251  80EF
18252  80F0
18253  80F1
18254  80F2
18255  80F3
18256  80F4
18257  80F5
18258  80F6
18259  80F7
18260  80F8
18261  80F9
18262  80FA
18263  80FB
18264  80FC
18265  80FD
18266  80FE
18267  80FF
18268  8100
18269  8101
18270  8102
18271  8103
18272  8104
18273  8105
18274  8106
18275  8107
18276  8108
18277  8109
18278  810A
18279  810B
18280  810C
18281  810D
18282  810E
18283  810F
18284  8110
18285  8111
18286  8112
18287  8113
18288  8114
18289  8115
18290  8116
18291  8117
18292  8118
18293  8119
18294  811A
18295  811B
18296  811C
18297  811D
18298  811E
18299  811F
18300  8120
18301  8121
18302  8122
18303  8123
18304  8124
18305  8125
18306  8126
18307  8127
18308  8128
18309  8129
18310  812A
18311  812B
18312  812C
18313  812D
18314  812E
18315  812F
18316  8130
18317  8131
18318  8132
18319  8133
18320  8134
18321  8135
18322  8136
18323  8137
18324  8138
18325  8139
18326  813A
18327  813B
18328  813C
18329  813D
18330  813E
18331  813F
18332  8140
18333  8141
18334  8142
18335  8143
18336  8144
18337  8145
18338  8146
18339  8147
18340  8148
18341  8149
18342  814A
18343  814B
18344  814C
18345  814D
18346  814E
18347  814F
18348  8150
18349  8151
18350  8152
18351  8153
18352  8154
18353  8155
18354  8156
18355  8157
18356  8158
18357  8159
18358  815A
18359  815B
18360  815C
18361  815D
18362  815E
18363  815F
18364  8160
18365  8161
18366  8162
18367  8163
18368  8164
18369  8165
18370  8166
18371  8167
18372  8168
18373  8169
18374  816A
18375  816B
18376  816C
18377  816D
18378  816E
18379  816F
18380  8170
18381  8171
18382  8172
18383  8173
18384  8174
18385  8175
18386  8176
18387  8177
18388  8178
18389  8179
18390  817A
18391  817B
18392  817C
18393  817D
18394  817E
18395  817F
18396  8180
18397  8181
18398  8182
18399  8183
18400  8184
18401  8185
18402  8186
18403  8187
18404  8188
18405  8189
18406  818A
18407  818B
18408  818C
18409  818D
18410  818E
18411  818F
18412  8190
18413  8191
18414  8192
18415  8193
18416  8194
18417  8195
18418  8196
18419  8197
18420  8198
18421  8199
18422  819A
18423  819B
18424  819C
18425  819D
18426  819E
18427  819F
18428  81A0
18429  81A1
18430  81A2
18431  81A3
18432  81A4
18433  81A5
18434  81A6
18435  81A7
18436  81A8
18437  81A9
18438  81AA
18439  81AB
18440  81AC
18441  81AD
18442  81AE
18443  81AF
18444  81B0
18445  81B1
18446  81B2
18447  81B3
18448  81B4
18449  81B5
18450  81B6
18451  81B7
18452  81B8
18453  81B9
18454  81BA
18455  81BB
18456  81BC
18457  81BD
18458  81BE
18459  81BF
18460  81C0
18461  81C1
18462  81C2
18463  81C3
18464  81C4
18465  81C5
18466  81C6
18467  81C7
18468  81C8
18469  81C9
18470  81CA
18471  81CB
18472  81CC
18473  81CD
18474  81CE
18475  81CF
18476  81D0
18477  81D1
18478  81D2
18479  81D3
18480  81D4
18481  81D5
18482  81D6
18483  81D7
18484  81D8
18485  81D9
18486  81DA
18487  81DB
18488  81DC
18489  81DD
18490  81DE
18491  81DF
18492  81E0
18493  81E1
18494  81E2
18495  81E3
18496  81E4
18497  81E5
18498  81E6
18499  81E7
18500  81E8
18501  81E9
18502  81EA
18503  81EB
18504  81EC
18505  81ED
18506  81EE
18507  81EF
18508  81F0
18509  81F1
18510  81F2
18511  81F3
18512  81F4
18513  81F5
18514  81F6
18515  81F7
18516  81F8
18517  81F9
18518  81FA
18519  81FB
18520  81FC
18521  81FD
18522  81FE
18523  81FF
18524  8200
18525  8201
18526  8202
18527  8203
18528  8204
18529  8205
18530  8206
18531  8207
18532  8208
18533  8209
18534  820A
18535  820B
18536  820C
18537  820D
18538  820E
18539  820F
18540  8210
18541  8211
18542  8212
18543  8213
18544  8214
18545  8215
18546  8216
18547  8217
18548  8218
18549  8219
18550  821A
18551  821B
18552  821C
18553  821D
18554  821E
18555  821F
18556  8220
18557  8221
18558  8222
18559  8223
18560  8224
18561  8225
18562  8226
18563  8227
18564  8228
18565  8229
18566  822A
18567  822B
18568  822C
18569  822D
18570  822E
18571  822F
18572  8230
18573  8231
18574  8232
18575  8233
18576  8234
18577  8235
18578  8236
18579  8237
18580  8238
18581  8239
18582  823A
18583  823B
18584  823C
18585  823D
18586  823E
18587  823F
18588  8240
18589  8241
18590  8242
18591  8243
18592  8244
18593  8245
18594  8246
18595  8247
18596  8248
18597  8249
18598  824A
18599  824B
18600  824C
18601  824D
18602  824E
18603  824F
18604  8250
18605  8251
18606  8252
18607  8253
18608  8254
18609  8255
18610  8256
18611  8257
18612  8258
18613  8259
18614  825A
18615  825B
18616  825C
18617  825D
18618  825E
18619  825F
18620  8260
18621  8261
18622  8262
18623  8263
18624  8264
18625  8265
18626  8266
18627  8267
18628  8268
18629  8269
18630  826A
18631  826B
18632  826C
18633  826D
18634  826E
18635  826F
18636  8270
18637  8271
18638  8272
18639  8273
18640  8274
18641  8275
18642  8276
18643  8277
18644  8278
18645  8279
18646  827A
18647  827B
18648  827C
18649  827D
18650  827E
18651  827F
18652  8280
18653  8281
18654  8282
18655  8283
18656  8284
18657  8285
18658  8286
18659  8287
18660  8288
18661  8289
18662  828A
18663  828B
18664  828C
18665  828D
18666  828E
18667  828F
18668  8290
18669  8291
18670  8292
18671  8293
18672  8294
18673  8295
18674  8296
18675  8297
18676  8298
18677  8299
18678  829A
18679  829B
18680  829C
18681  829D
18682  829E
18683  829F
18684  82A0
18685  82A1
18686  82A2
18687  82A3
18688  82A4
18689  82A5
18690  82A6
18691  82A7
18692  82A8
18693  82A9
18694  82AA
18695  82AB
18696  82AC
18697  82AD
18698  82AE
18699  82AF
18700  82B0
18701  82B1
18702  82B2
18703  82B3
18704  82B4
18705  82B5
18706  82B6
18707  82B7
18708  82B8
18709  82B9
18710  82BA
18711  82BB
18712  82BC
18713  82BD
18714  82BE
18715  82BF
18716  82C0
18717  82C1
18718  82C2
18719  82C3
18720  82C4
18721  82C5
18722  82C6
18723  82C7
18724  82C8
18725  82C9
18726  82CA
18727  82CB
18728  82CC
18729  82CD
18730  82CE
18731  82CF
18732  82D0
18733  82D1
18734  82D2
18735  82D3
18736  82D4
18737  82D5
18738  82D6
18739  82D7
18740  82D8
18741  82D9
18742  82DA
18743  82DB
18744  82DC
18745  82DD
18746  82DE
18747  82DF
18748  82E0
18749  82E1
18750  82E2
18751  82E3
18752  82E4
18753  82E5
18754  82E6
18755  82E7
18756  82E8
18757  82E9
18758  82EA
18759  82EB
18760  82EC
18761  82ED
18762  82EE
18763  82EF
18764  82F0
18765  82F1
18766  82F2
18767  82F3
18768  82F4
18769  82F5
18770  82F6
18771  82F7
18772  82F8
18773  82F9
18774  82FA
18775  82FB
18776  82FC
18777  82FD
18778  82FE
18779  82FF
18780  8300
18781  8301
18782  8302
18783  8303
18784  8304
18785  8305
18786  8306
18787  8307
18788  8308
18789  8309
18790  830A
18791  830B
18792  830C
18793  830D
18794  830E
18795  830F
18796  8310
18797  8311
18798  8312
18799  8313
18800  8314
18801  8315
18802  8316
18803  8317
18804  8318
18805  8319
18806  831A
18807  831B
18808  831C
18809  831D
18810  831E
18811  831F
18812  8320
18813  8321
18814  8322
18815  8323
18816  8324
18817  8325
18818  8326
18819  8327
18820  8328
18821  8329
18822  832A
18823  832B
18824  832C
18825  832D
18826  832E
18827  832F
18828  8330
18829  8331
18830  8332
18831  8333
18832  8334
18833  8335
18834  8336
18835  8337
18836  8338
18837  8339
18838  833A
18839  833B
18840  833C
18841  833D
18842  833E
18843  833F
18844  8340
18845  8341
18846  8342
18847  8343
18848  8344
18849  8345
18850  8346
18851  8347
18852  8348
18853  8349
18854  834A
18855  834B
18856  834C
18857  834D
18858  834E
18859  834F
18860  8350
18861  8351
18862  8352
18863  8353
18864  8354
18865  8355
18866  8356
18867  8357
18868  8358
18869  8359
18870  835A
18871  835B
18872  835C
18873  835D
18874  835E
18875  835F
18876  8360
18877  8361
18878  8362
18879  8363
18880  8364
18881  8365
18882  8366
18883  8367
18884  8368
18885  8369
18886  836A
18887  836B
18888  836C
18889  836D
18890  836E
18891  836F
18892  8370
18893  8371
18894  8372
18895  8373
18896  8374
18897  8375
18898  8376
18899  8377
18900  8378
18901  8379
18902  837A
18903  837B
18904  837C
18905  837D
18906  837E
18907  837F
18908  8380
18909  8381
18910  8382
18911  8383
18912  8384
18913  8385
18914  8386
18915  8387
18916  8388
18917  8389
18918  838A
18919  838B
18920  838C
18921  838D
18922  838E
18923  838F
18924  8390
18925  8391
18926  8392
18927  8393
18928  8394
18929  8395
18930  8396
18931  8397
18932  8398
18933  8399
18934  839A
18935  839B
18936  839C
18937  839D
18938  839E
18939  839F
18940  83A0
18941  83A1
18942  83A2
18943  83A3
18944  83A4
18945  83A5
18946  83A6
18947  83A7
18948  83A8
18949  83A9
18950  83AA
18951  83AB
18952  83AC
18953  83AD
18954  83AE
18955  83AF
18956  83B0
18957  83B1
18958  83B2
18959  83B3
18960  83B4
18961  83B5
18962  83B6
18963  83B7
18964  83B8
18965  83B9
18966  83BA
18967  83BB
18968  83BC
18969  83BD
18970  83BE
18971  83BF
18972  83C0
18973  83C1
18974  83C2
18975  83C3
18976  83C4
18977  83C5
18978  83C6
18979  83C7
18980  83C8
18981  83C9
18982  83CA
18983  83CB
18984  83CC
18985  83CD
18986  83CE
18987  83CF
18988  83D0
18989  83D1
18990  83D2
18991  83D3
18992  83D4
18993  83D5
18994  83D6
18995  83D7
18996  83D8
18997  83D9
18998  83DA
18999  83DB
19000  83DC
19001  83DD
19002  83DE
19003  83DF
19004  83E0
19005  83E1
19006  83E2
19007  83E3
19008  83E4
19009  83E5
19010  83E6
19011  83E7
19012  83E8
19013  83E9
19014  83EA
19015  83EB
19016  83EC
19017  83ED
19018  83EE
19019  83EF
19020  83F0
19021  83F1
19022  83F2
19023  83F3
19024  83F4
19025  83F5
19026  83F6
19027  83F7
19028  83F8
19029  83F9
19030  83FA
19031  83FB
19032  83FC
19033  83FD
19034  83FE
19035  83FF
19036  8400
19037  8401
19038  8402
19039  8403
19040  8404
19041  8405
19042  8406
19043  8407
19044  8408
19045  8409
19046  840A
19047  840B
19048  840C
19049  840D
19050  840E
19051  840F
19052  8410
19053  8411
19054  8412
19055  8413
19056  8414
19057  8415
19058  8416
19059  8417
19060  8418
19061  8419
19062  841A
19063  841B
19064  841C
19065  841D
19066  841E
19067  841F
19068  8420
19069  8421
19070  8422
19071  8423
19072  8424
19073  8425
19074  8426
19075  8427
19076  8428
19077  8429
19078  842A
19079  842B
19080  842C
19081  842D
19082  842E
19083  842F
19084  8430
19085  8431
19086  8432
19087  8433
19088  8434
19089  8435
19090  8436
19091  8437
19092  8438
19093  8439
19094  843A
19095  843B
19096  843C
19097  843D
19098  843E
19099  843F
19100  8440
19101  8441
19102  8442
19103  8443
19104  8444
19105  8445
19106  8446
19107  8447
19108  8448
19109  8449
19110  844A
19111  844B
19112  844C
19113  844D
19114  844E
19115  844F
19116  8450
19117  8451
19118  8452
19119  8453
19120  8454
19121  8455
19122  8456
19123  8457
19124  8458
19125  8459
19126  845A
19127  845B
19128  845C
19129  845D
19130  845E
19131  845F
19132  8460
19133  8461
19134  8462
19135  8463
19136  8464
19137  8465
19138  8466
19139  8467
19140  8468
19141  8469
19142  846A
19143  846B
19144  846C
19145  846D
19146  846E
19147  846F
19148  8470
19149  8471
19150  8472
19151  8473
19152  8474
19153  8475
19154  8476
19155  8477
19156  8478
19157  8479
19158  847A
19159  847B
19160  847C
19161  847D
19162  847E
19163  847F
19164  8480
19165  8481
19166  8482
19167  8483
19168  8484
19169  8485
19170  8486
19171  8487
19172  8488
19173  8489
19174  848A
19175  848B
19176  848C
19177  848D
19178  848E
19179  848F
19180  8490
19181  8491
19182  8492
19183  8493
19184  8494
19185  8495
19186  8496
19187  8497
19188  8498
19189  8499
19190  849A
19191  849B
19192  849C
19193  849D
19194  849E
19195  849F
19196  84A0
19197  84A1
19198  84A2
19199  84A3
19200  84A4
19201  84A5
19202  84A6
19203  84A7
19204  84A8
19205  84A9
19206  84AA
19207  84AB
19208  84AC
19209  84AD
19210  84AE
19211  84AF
19212  84B0
19213  84B1
19214  84B2
19215  84B3
19216  84B4
19217  84B5
19218  84B6
19219  84B7
19220  84B8
19221  84B9
19222  84BA
19223  84BB
19224  84BC
19225  84BD
19226  84BE
19227  84BF
19228  84C0
19229  84C1
19230  84C2
19231  84C3
19232  84C4
19233  84C5
19234  84C6
19235  84C7
19236  84C8
19237  84C9
19238  84CA
19239  84CB
19240  84CC
19241  84CD
19242  84CE
19243  84CF
19244  84D0
19245  84D1
19246  84D2
19247  84D3
19248  84D4
19249  84D5
19250  84D6
19251  84D7
19252  84D8
19253  84D9
19254  84DA
19255  84DB
19256  84DC
19257  84DD
19258  84DE
19259  84DF
19260  84E0
19261  84E1
19262  84E2
19263  84E3
19264  84E4
19265  84E5
19266  84E6
19267  84E7
19268  84E8
19269  84E9
19270  84EA
19271  84EB
19272  84EC
19273  84ED
19274  84EE
19275  84EF
19276  84F0
19277  84F1
19278  84F2
19279  84F3
19280  84F4
19281  84F5
19282  84F6
19283  84F7
19284  84F8
19285  84F9
19286  84FA
19287  84FB
19288  84FC
19289  84FD
19290  84FE
19291  84FF
19292  8500
19293  8501
19294  8502
19295  8503
19296  8504
19297  8505
19298  8506
19299  8507
19300  8508
19301  8509
19302  850A
19303  850B
19304  850C
19305  850D
19306  850E
19307  850F
19308  8510
19309  8511
19310  8512
19311  8513
19312  8514
19313  8515
19314  8516
19315  8517
19316  8518
19317  8519
19318  851A
19319  851B
19320  851C
19321  851D
19322  851E
19323  851F
19324  8520
19325  8521
19326  8522
19327  8523
19328  8524
19329  8525
19330  8526
19331  8527
19332  8528
19333  8529
19334  852A
19335  852B
19336  852C
19337  852D
19338  852E
19339  852F
19340  8530
19341  8531
19342  8532
19343  8533
19344  8534
19345  8535
19346  8536
19347  8537
19348  8538
19349  8539
19350  853A
19351  853B
19352  853C
19353  853D
19354  853E
19355  853F
19356  8540
19357  8541
19358  8542
19359  8543
19360  8544
19361  8545
19362  8546
19363  8547
19364  8548
19365  8549
19366  854A
19367  854B
19368  854C
19369  854D
19370  854E
19371  854F
19372  8550
19373  8551
19374  8552
19375  8553
19376  8554
19377  8555
19378  8556
19379  8557
19380  8558
19381  8559
19382  855A
19383  855B
19384  855C
19385  855D
19386  855E
19387  855F
19388  8560
19389  8561
19390  8562
19391  8563
19392  8564
19393  8565
19394  8566
19395  8567
19396  8568
19397  8569
19398  856A
19399  856B
19400  856C
19401  856D
19402  856E
19403  856F
19404  8570
19405  8571
19406  8572
19407  8573
19408  8574
19409  8575
19410  8576
19411  8577
19412  8578
19413  8579
19414  857A
19415  857B
19416  857C
19417  857D
19418  857E
19419  857F
19420  8580
19421  8581
19422  8582
19423  8583
19424  8584
19425  8585
19426  8586
19427  8587
19428  8588
19429  8589
19430  858A
19431  858B
19432  858C
19433  858D
19434  858E
19435  858F
19436  8590
19437  8591
19438  8592
19439  8593
19440  8594
19441  8595
19442  8596
19443  8597
19444  8598
19445  8599
19446  859A
19447  859B
19448  859C
19449  859D
19450  859E
19451  859F
19452  85A0
19453  85A1
19454  85A2
19455  85A3
19456  85A4
19457  85A5
19458  85A6
19459  85A7
19460  85A8
19461  85A9
19462  85AA
19463  85AB
19464  85AC
19465  85AD
19466  85AE
19467  85AF
19468  85B0
19469  85B1
19470  85B2
19471  85B3
19472  85B4
19473  85B5
19474  85B6
19475  85B7
19476  85B8
19477  85B9
19478  85BA
19479  85BB
19480  85BC
19481  85BD
19482  85BE
19483  85BF
19484  85C0
19485  85C1
19486  85C2
19487  85C3
19488  85C4
19489  85C5
19490  85C6
19491  85C7
19492  85C8
19493  85C9
19494  85CA
19495  85CB
19496  85CC
19497  85CD
19498  85CE
19499  85CF
19500  85D0
19501  85D1
19502  85D2
19503  85D3
19504  85D4
19505  85D5
19506  85D6
19507  85D7
19508  85D8
19509  85D9
19510  85DA
19511  85DB
19512  85DC
19513  85DD
19514  85DE
19515  85DF
19516  85E0
19517  85E1
19518  85E2
19519  85E3
19520  85E4
19521  85E5
19522  85E6
19523  85E7
19524  85E8
19525  85E9
19526  85EA
19527  85EB
19528  85EC
19529  85ED
19530  85EE
19531  85EF
19532  85F0
19533  85F1
19534  85F2
19535  85F3
19536  85F4
19537  85F5
19538  85F6
19539  85F7
19540  85F8
19541  85F9
19542  85FA
19543  85FB
19544  85FC
19545  85FD
19546  85FE
19547  85FF
19548  8600
19549  8601
19550  8602
19551  8603
19552  8604
19553  8605
19554  8606
19555  8607
19556  8608
19557  8609
19558  860A
19559  860B
19560  860C
19561  860D
19562  860E
19563  860F
19564  8610
19565  8611
19566  8612
19567  8613
19568  8614
19569  8615
19570  8616
19571  8617
19572  8618
19573  8619
19574  861A
19575  861B
19576  861C
19577  861D
19578  861E
19579  861F
19580  8620
19581  8621
19582  8622
19583  8623
19584  8624
19585  8625
19586  8626
19587  8627
19588  8628
19589  8629
19590  862A
19591  862B
19592  862C
19593  862D
19594  862E
19595  862F
19596  8630
19597  8631
19598  8632
19599  8633
19600  8634
19601  8635
19602  8636
19603  8637
19604  8638
19605  8639
19606  863A
19607  863B
19608  863C
19609  863D
19610  863E
19611  863F
19612  8640
19613  8641
19614  8642
19615  8643
19616  8644
19617  8645
19618  8646
19619  8647
19620  8648
19621  8649
19622  864A
19623  864B
19624  864C
19625  864D
19626  864E
19627  864F
19628  8650
19629  8651
19630  8652
19631  8653
19632  8654
19633  8655
19634  8656
19635  8657
19636  8658
19637  8659
19638  865A
19639  865B
19640  865C
19641  865D
19642  865E
19643  865F
19644  8660
19645  8661
19646  8662
19647  8663
19648  8664
19649  8665
19650  8666
19651  8667
19652  8668
19653  8669
19654  866A
19655  866B
19656  866C
19657  866D
19658  866E
19659  866F
19660  8670
19661  8671
19662  8672
19663  8673
19664  8674
19665  8675
19666  8676
19667  8677
19668  8678
19669  8679
19670  867A
19671  867B
19672  867C
19673  867D
19674  867E
19675  867F
19676  8680
19677  8681
19678  8682
19679  8683
19680  8684
19681  8685
19682  8686
19683  8687
19684  8688
19685  8689
19686  868A
19687  868B
19688  868C
19689  868D
19690  868E
19691  868F
19692  8690
19693  8691
19694  8692
19695  8693
19696  8694
19697  8695
19698  8696
19699  8697
19700  8698
19701  8699
19702  869A
19703  869B
19704  869C
19705  869D
19706  869E
19707  869F
19708  86A0
19709  86A1
19710  86A2
19711  86A3
19712  86A4
19713  86A5
19714  86A6
19715  86A7
19716  86A8
19717  86A9
19718  86AA
19719  86AB
19720  86AC
19721  86AD
19722  86AE
19723  86AF
19724  86B0
19725  86B1
19726  86B2
19727  86B3
19728  86B4
19729  86B5
19730  86B6
19731  86B7
19732  86B8
19733  86B9
19734  86BA
19735  86BB
19736  86BC
19737  86BD
19738  86BE
19739  86BF
19740  86C0
19741  86C1
19742  86C2
19743  86C3
19744  86C4
19745  86C5
19746  86C6
19747  86C7
19748  86C8
19749  86C9
19750  86CA
19751  86CB
19752  86CC
19753  86CD
19754  86CE
19755  86CF
19756  86D0
19757  86D1
19758  86D2
19759  86D3
19760  86D4
19761  86D5
19762  86D6
19763  86D7
19764  86D8
19765  86D9
19766  86DA
19767  86DB
19768  86DC
19769  86DD
19770  86DE
19771  86DF
19772  86E0
19773  86E1
19774  86E2
19775  86E3
19776  86E4
19777  86E5
19778  86E6
19779  86E7
19780  86E8
19781  86E9
19782  86EA
19783  86EB
19784  86EC
19785  86ED
19786  86EE
19787  86EF
19788  86F0
19789  86F1
19790  86F2
19791  86F3
19792  86F4
19793  86F5
19794  86F6
19795  86F7
19796  86F8
19797  86F9
19798  86FA
19799  86FB
19800  86FC
19801  86FD
19802  86FE
19803  86FF
19804  8700
19805  8701
19806  8702
19807  8703
19808  8704
19809  8705
19810  8706
19811  8707
19812  8708
19813  8709
19814  870A
19815  870B
19816  870C
19817  870D
19818  870E
19819  870F
19820  8710
19821  8711
19822  8712
19823  8713
19824  8714
19825  8715
19826  8716
19827  8717
19828  8718
19829  8719
19830  871A
19831  871B
19832  871C
19833  871D
19834  871E
19835  871F
19836  8720
19837  8721
19838  8722
19839  8723
19840  8724
19841  8725
19842  8726
19843  8727
19844  8728
19845  8729
19846  872A
19847  872B
19848  872C
19849  872D
19850  872E
19851  872F
19852  8730
19853  8731
19854  8732
19855  8733
19856  8734
19857  8735
19858  8736
19859  8737
19860  8738
19861  8739
19862  873A
19863  873B
19864  873C
19865  873D
19866  873E
19867  873F
19868  8740
19869  8741
19870  8742
19871  8743
19872  8744
19873  8745
19874  8746
19875  8747
19876  8748
19877  8749
19878  874A
19879  874B
19880  874C
19881  874D
19882  874E
19883  874F
19884  8750
19885  8751
19886  8752
19887  8753
19888  8754
19889  8755
19890  8756
19891  8757
19892  8758
19893  8759
19894  875A
19895  875B
19896  875C
19897  875D
19898  875E
19899  875F
19900  8760
19901  8761
19902  8762
19903  8763
19904  8764
19905  8765
19906  8766
19907  8767
19908  8768
19909  8769
19910  876A
19911  876B
19912  876C
19913  876D
19914  876E
19915  876F
19916  8770
19917  8771
19918  8772
19919  8773
19920  8774
19921  8775
19922  8776
19923  8777
19924  8778
19925  8779
19926  877A
19927  877B
19928  877C
19929  877D
19930  877E
19931  877F
19932  8780
19933  8781
19934  8782
19935  8783
19936  8784
19937  8785
19938  8786
19939  8787
19940  8788
19941  8789
19942  878A
19943  878B
19944  878C
19945  878D
19946  878E
19947  878F
19948  8790
19949  8791
19950  8792
19951  8793
19952  8794
19953  8795
19954  8796
19955  8797
19956  8798
19957  8799
19958  879A
19959  879B
19960  879C
19961  879D
19962  879E
19963  879F
19964  87A0
19965  87A1
19966  87A2
19967  87A3
19968  87A4
19969  87A5
19970  87A6
19971  87A7
19972  87A8
19973  87A9
19974  87AA
19975  87AB
19976  87AC
19977  87AD
19978  87AE
19979  87AF
19980  87B0
19981  87B1
19982  87B2
19983  87B3
19984  87B4
19985  87B5
19986  87B6
19987  87B7
19988  87B8
19989  87B9
19990  87BA
19991  87BB
19992  87BC
19993  87BD
19994  87BE
19995  87BF
19996  87C0
19997  87C1
19998  87C2
19999  87C3
20000  87C4
20001  87C5
20002  87C6
20003  87C7
20004  87C8
20005  87C9
20006  87CA
20007  87CB
20008  87CC
20009  87CD
20010  87CE
20011  87CF
20012  87D0
20013  87D1
20014  87D2
20015  87D3
20016  87D4
20017  87D5
20018  87D6
20019  87D7
20020  87D8
20021  87D9
20022  87DA
20023  87DB
20024  87DC
20025  87DD
20026  87DE
20027  87DF
20028  87E0
20029  87E1
20030  87E2
20031  87E3
20032  87E4
20033  87E5
20034  87E6
20035  87E7
20036  87E8
20037  87E9
20038  87EA
20039  87EB
20040  87EC
20041  87ED
20042  87EE
20043  87EF
20044  87F0
20045  87F1
20046  87F2
20047  87F3
20048  87F4
20049  87F5
20050  87F6
20051  87F7
20052  87F8
20053  87F9
20054  87FA
20055  87FB
20056  87FC
20057  87FD
20058  87FE
20059  87FF
20060  8800
20061  8801
20062  8802
20063  8803
20064  8804
20065  8805
20066  8806
20067  8807
20068  8808
20069  8809
20070  880A
20071  880B
20072  880C
20073  880D
20074  880E
20075  880F
20076  8810
20077  8811
20078  8812
20079  8813
20080  8814
20081  8815
20082  8816
20083  8817
20084  8818
20085  8819
20086  881A
20087  881B
20088  881C
20089  881D
20090  881E
20091  881F
20092  8820
20093  8821
20094  8822
20095  8823
20096  8824
20097  8825
20098  8826
20099  8827
20100  8828
20101  8829
20102  882A
20103  882B
20104  882C
20105  882D
20106  882E
20107  882F
20108  8830
20109  8831
20110  8832
20111  8833
20112  8834
20113  8835
20114  8836
20115  8837
20116  8838
20117  8839
20118  883A
20119  883B
20120  883C
20121  883D
20122  883E
20123  883F
20124  8840
20125  8841
20126  8842
20127  8843
20128  8844
20129  8845
20130  8846
20131  8847
20132  8848
20133  8849
20134  884A
20135  884B
20136  884C
20137  884D
20138  884E
20139  884F
20140  8850
20141  8851
20142  8852
20143  8853
20144  8854
20145  8855
20146  8856
20147  8857
20148  8858
20149  8859
20150  885A
20151  885B
20152  885C
20153  885D
20154  885E
20155  885F
20156  8860
20157  8861
20158  8862
20159  8863
20160  8864
20161  8865
20162  8866
20163  8867
20164  8868
20165  8869
20166  886A
20167  886B
20168  886C
20169  886D
20170  886E
20171  886F
20172  8870
20173  8871
20174  8872
20175  8873
20176  8874
20177  8875
20178  8876
20179  8877
20180  8878
20181  8879
20182  887A
20183  887B
20184  887C
20185  887D
20186  887E
20187  887F
20188  8880
20189  8881
20190  8882
20191  8883
20192  8884
20193  8885
20194  8886
20195  8887
20196  8888
20197  8889
20198  888A
20199  888B
20200  888C
20201  888D
20202  888E
20203  888F
20204  8890
20205  8891
20206  8892
20207  8893
20208  8894
20209  8895
20210  8896
20211  8897
20212  8898
20213  8899
20214  889A
20215  889B
20216  889C
20217  889D
20218  889E
20219  889F
20220  88A0
20221  88A1
20222  88A2
20223  88A3
20224  88A4
20225  88A5
20226  88A6
20227  88A7
20228  88A8
20229  88A9
20230  88AA
20231  88AB
20232  88AC
20233  88AD
20234  88AE
20235  88AF
20236  88B0
20237  88B1
20238  88B2
20239  88B3
20240  88B4
20241  88B5
20242  88B6
20243  88B7
20244  88B8
20245  88B9
20246  88BA
20247  88BB
20248  88BC
20249  88BD
20250  88BE
20251  88BF
20252  88C0
20253  88C1
20254  88C2
20255  88C3
20256  88C4
20257  88C5
20258  88C6
20259  88C7
20260  88C8
20261  88C9
20262  88CA
20263  88CB
20264  88CC
20265  88CD
20266  88CE
20267  88CF
20268  88D0
20269  88D1
20270  88D2
20271  88D3
20272  88D4
20273  88D5
20274  88D6
20275  88D7
20276  88D8
20277  88D9
20278  88DA
20279  88DB
20280  88DC
20281  88DD
20282  88DE
20283  88DF
20284  88E0
20285  88E1
20286  88E2
20287  88E3
20288  88E4
20289  88E5
20290  88E6
20291  88E7
20292  88E8
20293  88E9
20294  88EA
20295  88EB
20296  88EC
20297  88ED
20298  88EE
20299  88EF
20300  88F0
20301  88F1
20302  88F2
20303  88F3
20304  88F4
20305  88F5
20306  88F6
20307  88F7
20308  88F8
20309  88F9
20310  88FA
20311  88FB
20312  88FC
20313  88FD
20314  88FE
20315  88FF
20316  8900
20317  8901
20318  8902
20319  8903
20320  8904
20321  8905
20322  8906
20323  8907
20324  8908
20325  8909
20326  890A
20327  890B
20328  890C
20329  890D
20330  890E
20331  890F
20332  8910
20333  8911
20334  8912
20335  8913
20336  8914
20337  8915
20338  8916
20339  8917
20340  8918
20341  8919
20342  891A
20343  891B
20344  891C
20345  891D
20346  891E
20347  891F
20348  8920
20349  8921
20350  8922
20351  8923
20352  8924
20353  8925
20354  8926
20355  8927
20356  8928
20357  8929
20358  892A
20359  892B
20360  892C
20361  892D
20362  892E
20363  892F
20364  8930
20365  8931
20366  8932
20367  8933
20368  8934
20369  8935
20370  8936
20371  8937
20372  8938
20373  8939
20374  893A
20375  893B
20376  893C
20377  893D
20378  893E
20379  893F
20380  8940
20381  8941
20382  8942
20383  8943
20384  8944
20385  8945
20386  8946
20387  8947
20388  8948
20389  8949
20390  894A
20391  894B
20392  894C
20393  894D
20394  894E
20395  894F
20396  8950
20397  8951
20398  8952
20399  8953
20400  8954
20401  8955
20402  8956
20403  8957
20404  8958
20405  8959
20406  895A
20407  895B
20408  895C
20409  895D
20410  895E
20411  895F
20412  8960
20413  8961
20414  8962
20415  8963
20416  8964
20417  8965
20418  8966
20419  8967
20420  8968
20421  8969
20422  896A
20423  896B
20424  896C
20425  896D
20426  896E
20427  896F
20428  8970
20429  8971
20430  8972
20431  8973
20432  8974
20433  8975
20434  8976
20435  8977
20436  8978
20437  8979
20438  897A
20439  897B
20440  897C
20441  897D
20442  897E
20443  897F
20444  8980
20445  8981
20446  8982
20447  8983
20448  8984
20449  8985
20450  8986
20451  8987
20452  8988
20453  8989
20454  898A
20455  898B
20456  898C
20457  898D
20458  898E
20459  898F
20460  8990
20461  8991
20462  8992
20463  8993
20464  8994
20465  8995
20466  8996
20467  8997
20468  8998
20469  8999
20470  899A
20471  899B
20472  899C
20473  899D
20474  899E
20475  899F
20476  89A0
20477  89A1
20478  89A2
20479  89A3
20480  89A4
20481  89A5
20482  89A6
20483  89A7
20484  89A8
20485  89A9
20486  89AA
20487  89AB
20488  89AC
20489  89AD
20490  89AE
20491  89AF
20492  89B0
20493  89B1
20494  89B2
20495  89B3
20496  89B4
20497  89B5
20498  89B6
20499  89B7
20500  89B8
20501  89B9
20502  89BA
20503  89BB
20504  89BC
20505  89BD
20506  89BE
20507  89BF
20508  89C0
20509  89C1
20510  89C2
20511  89C3
20512  89C4
20513  89C5
20514  89C6
20515  89C7
20516  89C8
20517  89C9
20518  89CA
20519  89CB
20520  89CC
20521  89CD
20522  89CE
20523  89CF
20524  89D0
20525  89D1
20526  89D2
20527  89D3
20528  89D4
20529  89D5
20530  89D6
20531  89D7
20532  89D8
20533  89D9
20534  89DA
20535  89DB
20536  89DC
20537  89DD
20538  89DE
20539  89DF
20540  89E0
20541  89E1
20542  89E2
20543  89E3
20544  89E4
20545  89E5
20546  89E6
20547  89E7
20548  89E8
20549  89E9
20550  89EA
20551  89EB
20552  89EC
20553  89ED
20554  89EE
20555  89EF
20556  89F0
20557  89F1
20558  89F2
20559  89F3
20560  89F4
20561  89F5
20562  89F6
20563  89F7
20564  89F8
20565  89F9
20566  89FA
20567  89FB
20568  89FC
20569  89FD
20570  89FE
20571  89FF
20572  8A00
20573  8A01
20574  8A02
20575  8A03
20576  8A04
20577  8A05
20578  8A06
20579  8A07
20580  8A08
20581  8A09
20582  8A0A
20583  8A0B
20584  8A0C
20585  8A0D
20586  8A0E
20587  8A0F
20588  8A10
20589  8A11
20590  8A12
20591  8A13
20592  8A14
20593  8A15
20594  8A16
20595  8A17
20596  8A18
20597  8A19
20598  8A1A
20599  8A1B
20600  8A1C
20601  8A1D
20602  8A1E
20603  8A1F
20604  8A20
20605  8A21
20606  8A22
20607  8A23
20608  8A24
20609  8A25
20610  8A26
20611  8A27
20612  8A28
20613  8A29
20614  8A2A
20615  8A2B
20616  8A2C
20617  8A2D
20618  8A2E
20619  8A2F
20620  8A30
20621  8A31
20622  8A32
20623  8A33
20624  8A34
20625  8A35
20626  8A36
20627  8A37
20628  8A38
20629  8A39
20630  8A3A
20631  8A3B
20632  8A3C
20633  8A3D
20634  8A3E
20635  8A3F
20636  8A40
20637  8A41
20638  8A42
20639  8A43
20640  8A44
20641  8A45
20642  8A46
20643  8A47
20644  8A48
20645  8A49
20646  8A4A
20647  8A4B
20648  8A4C
20649  8A4D
20650  8A4E
20651  8A4F
20652  8A50
20653  8A51
20654  8A52
20655  8A53
20656  8A54
20657  8A55
20658  8A56
20659  8A57
20660  8A58
20661  8A59
20662  8A5A
20663  8A5B
20664  8A5C
20665  8A5D
20666  8A5E
20667  8A5F
20668  8A60
20669  8A61
20670  8A62
20671  8A63
20672  8A64
20673  8A65
20674  8A66
20675  8A67
20676  8A68
20677  8A69
20678  8A6A
20679  8A6B
20680  8A6C
20681  8A6D
20682  8A6E
20683  8A6F
20684  8A70
20685  8A71
20686  8A72
20687  8A73
20688  8A74
20689  8A75
20690  8A76
20691  8A77
20692  8A78
20693  8A79
20694  8A7A
20695  8A7B
20696  8A7C
20697  8A7D
20698  8A7E
20699  8A7F
20700  8A80
20701  8A81
20702  8A82
20703  8A83
20704  8A84
20705  8A85
20706  8A86
20707  8A87
20708  8A88
20709  8A89
20710  8A8A
20711  8A8B
20712  8A8C
20713  8A8D
20714  8A8E
20715  8A8F
20716  8A90
20717  8A91
20718  8A92
20719  8A93
20720  8A94
20721  8A95
20722  8A96
20723  8A97
20724  8A98
20725  8A99
20726  8A9A
20727  8A9B
20728  8A9C
20729  8A9D
20730  8A9E
20731  8A9F
20732  8AA0
20733  8AA1
20734  8AA2
20735  8AA3
20736  8AA4
20737  8AA5
20738  8AA6
20739  8AA7
20740  8AA8
20741  8AA9
20742  8AAA
20743  8AAB
20744  8AAC
20745  8AAD
20746  8AAE
20747  8AAF
20748  8AB0
20749  8AB1
20750  8AB2
20751  8AB3
20752  8AB4
20753  8AB5
20754  8AB6
20755  8AB7
20756  8AB8
20757  8AB9
20758  8ABA
20759  8ABB
20760  8ABC
20761  8ABD
20762  8ABE
20763  8ABF
20764  8AC0
20765  8AC1
20766  8AC2
20767  8AC3
20768  8AC4
20769  8AC5
20770  8AC6
20771  8AC7
20772  8AC8
20773  8AC9
20774  8ACA
20775  8ACB
20776  8ACC
20777  8ACD
20778  8ACE
20779  8ACF
20780  8AD0
20781  8AD1
20782  8AD2
20783  8AD3
20784  8AD4
20785  8AD5
20786  8AD6
20787  8AD7
20788  8AD8
20789  8AD9
20790  8ADA
20791  8ADB
20792  8ADC
20793  8ADD
20794  8ADE
20795  8ADF
20796  8AE0
20797  8AE1
20798  8AE2
20799  8AE3
20800  8AE4
20801  8AE5
20802  8AE6
20803  8AE7
20804  8AE8
20805  8AE9
20806  8AEA
20807  8AEB
20808  8AEC
20809  8AED
20810  8AEE
20811  8AEF
20812  8AF0
20813  8AF1
20814  8AF2
20815  8AF3
20816  8AF4
20817  8AF5
20818  8AF6
20819  8AF7
20820  8AF8
20821  8AF9
20822  8AFA
20823  8AFB
20824  8AFC
20825  8AFD
20826  8AFE
20827  8AFF
20828  8B00
20829  8B01
20830  8B02
20831  8B03
20832  8B04
20833  8B05
20834  8B06
20835  8B07
20836  8B08
20837  8B09
20838  8B0A
20839  8B0B
20840  8B0C
20841  8B0D
20842  8B0E
20843  8B0F
20844  8B10
20845  8B11
20846  8B12
20847  8B13
20848  8B14
20849  8B15
20850  8B16
20851  8B17
20852  8B18
20853  8B19
20854  8B1A
20855  8B1B
20856  8B1C
20857  8B1D
20858  8B1E
20859  8B1F
20860  8B20
20861  8B21
20862  8B22
20863  8B23
20864  8B24
20865  8B25
20866  8B26
20867  8B27
20868  8B28
20869  8B29
20870  8B2A
20871  8B2B
20872  8B2C
20873  8B2D
20874  8B2E
20875  8B2F
20876  8B30
20877  8B31
20878  8B32
20879  8B33
20880  8B34
20881  8B35
20882  8B36
20883  8B37
20884  8B38
20885  8B39
20886  8B3A
20887  8B3B
20888  8B3C
20889  8B3D
20890  8B3E
20891  8B3F
20892  8B40
20893  8B41
20894  8B42
20895  8B43
20896  8B44
20897  8B45
20898  8B46
20899  8B47
20900  8B48
20901  8B49
20902  8B4A
20903  8B4B
20904  8B4C
20905  8B4D
20906  8B4E
20907  8B4F
20908  8B50
20909  8B51
20910  8B52
20911  8B53
20912  8B54
20913  8B55
20914  8B56
20915  8B57
20916  8B58
20917  8B59
20918  8B5A
20919  8B5B
20920  8B5C
20921  8B5D
20922  8B5E
20923  8B5F
20924  8B60
20925  8B61
20926  8B62
20927  8B63
20928  8B64
20929  8B65
20930  8B66
20931  8B67
20932  8B68
20933  8B69
20934  8B6A
20935  8B6B
20936  8B6C
20937  8B6D
20938  8B6E
20939  8B6F
20940  8B70
20941  8B71
20942  8B72
20943  8B73
20944  8B74
20945  8B75
20946  8B76
20947  8B77
20948  8B78
20949  8B79
20950  8B7A
20951  8B7B
20952  8B7C
20953  8B7D
20954  8B7E
20955  8B7F
20956  8B80
20957  8B81
20958  8B82
20959  8B83
20960  8B84
20961  8B85
20962  8B86
20963  8B87
20964  8B88
20965  8B89
20966  8B8A
20967  8B8B
20968  8B8C
20969  8B8D
20970  8B8E
20971  8B8F
20972  8B90
20973  8B91
20974  8B92
20975  8B93
20976  8B94
20977  8B95
20978  8B96
20979  8B97
20980  8B98
20981  8B99
20982  8B9A
20983  8B9B
20984  8B9C
20985  8B9D
20986  8B9E
20987  8B9F
20988  8BA0
20989  8BA1
20990  8BA2
20991  8BA3
20992  8BA4
20993  8BA5
20994  8BA6
20995  8BA7
20996  8BA8
20997  8BA9
20998  8BAA
20999  8BAB
21000  8BAC
21001  8BAD
21002  8BAE
21003  8BAF
21004  8BB0
21005  8BB1
21006  8BB2
21007  8BB3
21008  8BB4
21009  8BB5
21010  8BB6
21011  8BB7
21012  8BB8
21013  8BB9
21014  8BBA
21015  8BBB
21016  8BBC
21017  8BBD
21018  8BBE
21019  8BBF
21020  8BC0
21021  8BC1
21022  8BC2
21023  8BC3
21024  8BC4
21025  8BC5
21026  8BC6
21027  8BC7
21028  8BC8
21029  8BC9
21030  8BCA
21031  8BCB
21032  8BCC
21033  8BCD
21034  8BCE
21035  8BCF
21036  8BD0
21037  8BD1
21038  8BD2
21039  8BD3
21040  8BD4
21041  8BD5
21042  8BD6
21043  8BD7
21044  8BD8
21045  8BD9
21046  8BDA
21047  8BDB
21048  8BDC
21049  8BDD
21050  8BDE
21051  8BDF
21052  8BE0
21053  8BE1
21054  8BE2
21055  8BE3
21056  8BE4
21057  8BE5
21058  8BE6
21059  8BE7
21060  8BE8
21061  8BE9
21062  8BEA
21063  8BEB
21064  8BEC
21065  8BED
21066  8BEE
21067  8BEF
21068  8BF0
21069  8BF1
21070  8BF2
21071  8BF3
21072  8BF4
21073  8BF5
21074  8BF6
21075  8BF7
21076  8BF8
21077  8BF9
21078  8BFA
21079  8BFB
21080  8BFC
21081  8BFD
21082  8BFE
21083  8BFF
21084  8C00
21085  8C01
21086  8C02
21087  8C03
21088  8C04
21089  8C05
21090  8C06
21091  8C07
21092  8C08
21093  8C09
21094  8C0A
21095  8C0B
21096  8C0C
21097  8C0D
21098  8C0E
21099  8C0F
21100  8C10
21101  8C11
21102  8C12
21103  8C13
21104  8C14
21105  8C15
21106  8C16
21107  8C17
21108  8C18
21109  8C19
21110  8C1A
21111  8C1B
21112  8C1C
21113  8C1D
21114  8C1E
21115  8C1F
21116  8C20
21117  8C21
21118  8C22
21119  8C23
21120  8C24
21121  8C25
21122  8C26
21123  8C27
21124  8C28
21125  8C29
21126  8C2A
21127  8C2B
21128  8C2C
21129  8C2D
21130  8C2E
21131  8C2F
21132  8C30
21133  8C31
21134  8C32
21135  8C33
21136  8C34
21137  8C35
21138  8C36
21139  8C37
21140  8C38
21141  8C39
21142  8C3A
21143  8C3B
21144  8C3C
21145  8C3D
21146  8C3E
21147  8C3F
21148  8C40
21149  8C41
21150  8C42
21151  8C43
21152  8C44
21153  8C45
21154  8C46
21155  8C47
21156  8C48
21157  8C49
21158  8C4A
21159  8C4B
21160  8C4C
21161  8C4D
21162  8C4E
21163  8C4F
21164  8C50
21165  8C51
21166  8C52
21167  8C53
21168  8C54
21169  8C55
21170  8C56
21171  8C57
21172  8C58
21173  8C59
21174  8C5A
21175  8C5B
21176  8C5C
21177  8C5D
21178  8C5E
21179  8C5F
21180  8C60
21181  8C61
21182  8C62
21183  8C63
21184  8C64
21185  8C65
21186  8C66
21187  8C67
21188  8C68
21189  8C69
21190  8C6A
21191  8C6B
21192  8C6C
21193  8C6D
21194  8C6E
21195  8C6F
21196  8C70
21197  8C71
21198  8C72
21199  8C73
21200  8C74
21201  8C75
21202  8C76
21203  8C77
21204  8C78
21205  8C79
21206  8C7A
21207  8C7B
21208  8C7C
21209  8C7D
21210  8C7E
21211  8C7F
21212  8C80
21213  8C81
21214  8C82
21215  8C83
21216  8C84
21217  8C85
21218  8C86
21219  8C87
21220  8C88
21221  8C89
21222  8C8A
21223  8C8B
21224  8C8C
21225  8C8D
21226  8C8E
21227  8C8F
21228  8C90
21229  8C91
21230  8C92
21231  8C93
21232  8C94
21233  8C95
21234  8C96
21235  8C97
21236  8C98
21237  8C99
21238  8C9A
21239  8C9B
21240  8C9C
21241  8C9D
21242  8C9E
21243  8C9F
21244  8CA0
21245  8CA1
21246  8CA2
21247  8CA3
21248  8CA4
21249  8CA5
21250  8CA6
21251  8CA7
21252  8CA8
21253  8CA9
21254  8CAA
21255  8CAB
21256  8CAC
21257  8CAD
21258  8CAE
21259  8CAF
21260  8CB0
21261  8CB1
21262  8CB2
21263  8CB3
21264  8CB4
21265  8CB5
21266  8CB6
21267  8CB7
21268  8CB8
21269  8CB9
21270  8CBA
21271  8CBB
21272  8CBC
21273  8CBD
21274  8CBE
21275  8CBF
21276  8CC0
21277  8CC1
21278  8CC2
21279  8CC3
21280  8CC4
21281  8CC5
21282  8CC6
21283  8CC7
21284  8CC8
21285  8CC9
21286  8CCA
21287  8CCB
21288  8CCC
21289  8CCD
21290  8CCE
21291  8CCF
21292  8CD0
21293  8CD1
21294  8CD2
21295  8CD3
21296  8CD4
21297  8CD5
21298  8CD6
21299  8CD7
21300  8CD8
21301  8CD9
21302  8CDA
21303  8CDB
21304  8CDC
21305  8CDD
21306  8CDE
21307  8CDF
21308  8CE0
21309  8CE1
21310  8CE2
21311  8CE3
21312  8CE4
21313  8CE5
21314  8CE6
21315  8CE7
21316  8CE8
21317  8CE9
21318  8CEA
21319  8CEB
21320  8CEC
21321  8CED
21322  8CEE
21323  8CEF
21324  8CF0
21325  8CF1
21326  8CF2
21327  8CF3
21328  8CF4
21329  8CF5
21330  8CF6
21331  8CF7
21332  8CF8
21333  8CF9
21334  8CFA
21335  8CFB
21336  8CFC
21337  8CFD
21338  8CFE
21339  8CFF
21340  8D00
21341  8D01
21342  8D02
21343  8D03
21344  8D04
21345  8D05
21346  8D06
21347  8D07
21348  8D08
21349  8D09
21350  8D0A
21351  8D0B
21352  8D0C
21353  8D0D
21354  8D0E
21355  8D0F
21356  8D10
21357  8D11
21358  8D12
21359  8D13
21360  8D14
21361  8D15
21362  8D16
21363  8D17
21364  8D18
21365  8D19
21366  8D1A
21367  8D1B
21368  8D1C
21369  8D1D
21370  8D1E
21371  8D1F
21372  8D20
21373  8D21
21374  8D22
21375  8D23
21376  8D24
21377  8D25
21378  8D26
21379  8D27
21380  8D28
21381  8D29
21382  8D2A
21383  8D2B
21384  8D2C
21385  8D2D
21386  8D2E
21387  8D2F
21388  8D30
21389  8D31
21390  8D32
21391  8D33
21392  8D34
21393  8D35
21394  8D36
21395  8D37
21396  8D38
21397  8D39
21398  8D3A
21399  8D3B
21400  8D3C
21401  8D3D
21402  8D3E
21403  8D3F
21404  8D40
21405  8D41
21406  8D42
21407  8D43
21408  8D44
21409  8D45
21410  8D46
21411  8D47
21412  8D48
21413  8D49
21414  8D4A
21415  8D4B
21416  8D4C
21417  8D4D
21418  8D4E
21419  8D4F
21420  8D50
21421  8D51
21422  8D52
21423  8D53
21424  8D54
21425  8D55
21426  8D56
21427  8D57
21428  8D58
21429  8D59
21430  8D5A
21431  8D5B
21432  8D5C
21433  8D5D
21434  8D5E
21435  8D5F
21436  8D60
21437  8D61
21438  8D62
21439  8D63
21440  8D64
21441  8D65
21442  8D66
21443  8D67
21444  8D68
21445  8D69
21446  8D6A
21447  8D6B
21448  8D6C
21449  8D6D
21450  8D6E
21451  8D6F
21452  8D70
21453  8D71
21454  8D72
21455  8D73
21456  8D74
21457  8D75
21458  8D76
21459  8D77
21460  8D78
21461  8D79
21462  8D7A
21463  8D7B
21464  8D7C
21465  8D7D
21466  8D7E
21467  8D7F
21468  8D80
21469  8D81
21470  8D82
21471  8D83
21472  8D84
21473  8D85
21474  8D86
21475  8D87
21476  8D88
21477  8D89
21478  8D8A
21479  8D8B
21480  8D8C
21481  8D8D
21482  8D8E
21483  8D8F
21484  8D90
21485  8D91
21486  8D92
21487  8D93
21488  8D94
21489  8D95
21490  8D96
21491  8D97
21492  8D98
21493  8D99
21494  8D9A
21495  8D9B
21496  8D9C
21497  8D9D
21498  8D9E
21499  8D9F
21500  8DA0
21501  8DA1
21502  8DA2
21503  8DA3
21504  8DA4
21505  8DA5
21506  8DA6
21507  8DA7
21508  8DA8
21509  8DA9
21510  8DAA
21511  8DAB
21512  8DAC
21513  8DAD
21514  8DAE
21515  8DAF
21516  8DB0
21517  8DB1
21518  8DB2
21519  8DB3
21520  8DB4
21521  8DB5
21522  8DB6
21523  8DB7
21524  8DB8
21525  8DB9
21526  8DBA
21527  8DBB
21528  8DBC
21529  8DBD
21530  8DBE
21531  8DBF
21532  8DC0
21533  8DC1
21534  8DC2
21535  8DC3
21536  8DC4
21537  8DC5
21538  8DC6
21539  8DC7
21540  8DC8
21541  8DC9
21542  8DCA
21543  8DCB
21544  8DCC
21545  8DCD
21546  8DCE
21547  8DCF
21548  8DD0
21549  8DD1
21550  8DD2
21551  8DD3
21552  8DD4
21553  8DD5
21554  8DD6
21555  8DD7
21556  8DD8
21557  8DD9
21558  8DDA
21559  8DDB
21560  8DDC
21561  8DDD
21562  8DDE
21563  8DDF
21564  8DE0
21565  8DE1
21566  8DE2
21567  8DE3
21568  8DE4
21569  8DE5
21570  8DE6
21571  8DE7
21572  8DE8
21573  8DE9
21574  8DEA
21575  8DEB
21576  8DEC
21577  8DED
21578  8DEE
21579  8DEF
21580  8DF0
21581  8DF1
21582  8DF2
21583  8DF3
21584  8DF4
21585  8DF5
21586  8DF6
21587  8DF7
21588  8DF8
21589  8DF9
21590  8DFA
21591  8DFB
21592  8DFC
21593  8DFD
21594  8DFE
21595  8DFF
21596  8E00
21597  8E01
21598  8E02
21599  8E03
21600  8E04
21601  8E05
21602  8E06
21603  8E07
21604  8E08
21605  8E09
21606  8E0A
21607  8E0B
21608  8E0C
21609  8E0D
21610  8E0E
21611  8E0F
21612  8E10
21613  8E11
21614  8E12
21615  8E13
21616  8E14
21617  8E15
21618  8E16
21619  8E17
21620  8E18
21621  8E19
21622  8E1A
21623  8E1B
21624  8E1C
21625  8E1D
21626  8E1E
21627  8E1F
21628  8E20
21629  8E21
21630  8E22
21631  8E23
21632  8E24
21633  8E25
21634  8E26
21635  8E27
21636  8E28
21637  8E29
21638  8E2A
21639  8E2B
21640  8E2C
21641  8E2D
21642  8E2E
21643  8E2F
21644  8E30
21645  8E31
21646  8E32
21647  8E33
21648  8E34
21649  8E35
21650  8E36
21651  8E37
21652  8E38
21653  8E39
21654  8E3A
21655  8E3B
21656  8E3C
21657  8E3D
21658  8E3E
21659  8E3F
21660  8E40
21661  8E41
21662  8E42
21663  8E43
21664  8E44
21665  8E45
21666  8E46
21667  8E47
21668  8E48
21669  8E49
21670  8E4A
21671  8E4B
21672  8E4C
21673  8E4D
21674  8E4E
21675  8E4F
21676  8E50
21677  8E51
21678  8E52
21679  8E53
21680  8E54
21681  8E55
21682  8E56
21683  8E57
21684  8E58
21685  8E59
21686  8E5A
21687  8E5B
21688  8E5C
21689  8E5D
21690  8E5E
21691  8E5F
21692  8E60
21693  8E61
21694  8E62
21695  8E63
21696  8E64
21697  8E65
21698  8E66
21699  8E67
21700  8E68
21701  8E69
21702  8E6A
21703  8E6B
21704  8E6C
21705  8E6D
21706  8E6E
21707  8E6F
21708  8E70
21709  8E71
21710  8E72
21711  8E73
21712  8E74
21713  8E75
21714  8E76
21715  8E77
21716  8E78
21717  8E79
21718  8E7A
21719  8E7B
21720  8E7C
21721  8E7D
21722  8E7E
21723  8E7F
21724  8E80
21725  8E81
21726  8E82
21727  8E83
21728  8E84
21729  8E85
21730  8E86
21731  8E87
21732  8E88
21733  8E89
21734  8E8A
21735  8E8B
21736  8E8C
21737  8E8D
21738  8E8E
21739  8E8F
21740  8E90
21741  8E91
21742  8E92
21743  8E93
21744  8E94
21745  8E95
21746  8E96
21747  8E97
21748  8E98
21749  8E99
21750  8E9A
21751  8E9B
21752  8E9C
21753  8E9D
21754  8E9E
21755  8E9F
21756  8EA0
21757  8EA1
21758  8EA2
21759  8EA3
21760  8EA4
21761  8EA5
21762  8EA6
21763  8EA7
21764  8EA8
21765  8EA9
21766  8EAA
21767  8EAB
21768  8EAC
21769  8EAD
21770  8EAE
21771  8EAF
21772  8EB0
21773  8EB1
21774  8EB2
21775  8EB3
21776  8EB4
21777  8EB5
21778  8EB6
21779  8EB7
21780  8EB8
21781  8EB9
21782  8EBA
21783  8EBB
21784  8EBC
21785  8EBD
21786  8EBE
21787  8EBF
21788  8EC0
21789  8EC1
21790  8EC2
21791  8EC3
21792  8EC4
21793  8EC5
21794  8EC6
21795  8EC7
21796  8EC8
21797  8EC9
21798  8ECA
21799  8ECB
21800  8ECC
21801  8ECD
21802  8ECE
21803  8ECF
21804  8ED0
21805  8ED1
21806  8ED2
21807  8ED3
21808  8ED4
21809  8ED5
21810  8ED6
21811  8ED7
21812  8ED8
21813  8ED9
21814  8EDA
21815  8EDB
21816  8EDC
21817  8EDD
21818  8EDE
21819  8EDF
21820  8EE0
21821  8EE1
21822  8EE2
21823  8EE3
21824  8EE4
21825  8EE5
21826  8EE6
21827  8EE7
21828  8EE8
21829  8EE9
21830  8EEA
21831  8EEB
21832  8EEC
21833  8EED
21834  8EEE
21835  8EEF
21836  8EF0
21837  8EF1
21838  8EF2
21839  8EF3
21840  8EF4
21841  8EF5
21842  8EF6
21843  8EF7
21844  8EF8
21845  8EF9
21846  8EFA
21847  8EFB
21848  8EFC
21849  8EFD
21850  8EFE
21851  8EFF
21852  8F00
21853  8F01
21854  8F02
21855  8F03
21856  8F04
21857  8F05
21858  8F06
21859  8F07
21860  8F08
21861  8F09
21862  8F0A
21863  8F0B
21864  8F0C
21865  8F0D
21866  8F0E
21867  8F0F
21868  8F10
21869  8F11
21870  8F12
21871  8F13
21872  8F14
21873  8F15
21874  8F16
21875  8F17
21876  8F18
21877  8F19
21878  8F1A
21879  8F1B
21880  8F1C
21881  8F1D
21882  8F1E
21883  8F1F
21884  8F20
21885  8F21
21886  8F22
21887  8F23
21888  8F24
21889  8F25
21890  8F26
21891  8F27
21892  8F28
21893  8F29
21894  8F2A
21895  8F2B
21896  8F2C
21897  8F2D
21898  8F2E
21899  8F2F
21900  8F30
21901  8F31
21902  8F32
21903  8F33
21904  8F34
21905  8F35
21906  8F36
21907  8F37
21908  8F38
21909  8F39
21910  8F3A
21911  8F3B
21912  8F3C
21913  8F3D
21914  8F3E
21915  8F3F
21916  8F40
21917  8F41
21918  8F42
21919  8F43
21920  8F44
21921  8F45
21922  8F46
21923  8F47
21924  8F48
21925  8F49
21926  8F4A
21927  8F4B
21928  8F4C
21929  8F4D
21930  8F4E
21931  8F4F
21932  8F50
21933  8F51
21934  8F52
21935  8F53
21936  8F54
21937  8F55
21938  8F56
21939  8F57
21940  8F58
21941  8F59
21942  8F5A
21943  8F5B
21944  8F5C
21945  8F5D
21946  8F5E
21947  8F5F
21948  8F60
21949  8F61
21950  8F62
21951  8F63
21952  8F64
21953  8F65
21954  8F66
21955  8F67
21956  8F68
21957  8F69
21958  8F6A
21959  8F6B
21960  8F6C
21961  8F6D
21962  8F6E
21963  8F6F
21964  8F70
21965  8F71
21966  8F72
21967  8F73
21968  8F74
21969  8F75
21970  8F76
21971  8F77
21972  8F78
21973  8F79
21974  8F7A
21975  8F7B
21976  8F7C
21977  8F7D
21978  8F7E
21979  8F7F
21980  8F80
21981  8F81
21982  8F82
21983  8F83
21984  8F84
21985  8F85
21986  8F86
21987  8F87
21988  8F88
21989  8F89
21990  8F8A
21991  8F8B
21992  8F8C
21993  8F8D
21994  8F8E
21995  8F8F
21996  8F90
21997  8F91
21998  8F92
21999  8F93
22000  8F94
22001  8F95
22002  8F96
22003  8F97
22004  8F98
22005  8F99
22006  8F9A
22007  8F9B
22008  8F9C
22009  8F9D
22010  8F9E
22011  8F9F
22012  8FA0
22013  8FA1
22014  8FA2
22015  8FA3
22016  8FA4
22017  8FA5
22018  8FA6
22019  8FA7
22020  8FA8
22021  8FA9
22022  8FAA
22023  8FAB
22024  8FAC
22025  8FAD
22026  8FAE
22027  8FAF
22028  8FB0
22029  8FB1
22030  8FB2
22031  8FB3
22032  8FB4
22033  8FB5
22034  8FB6
22035  8FB7
22036  8FB8
22037  8FB9
22038  8FBA
22039  8FBB
22040  8FBC
22041  8FBD
22042  8FBE
22043  8FBF
22044  8FC0
22045  8FC1
22046  8FC2
22047  8FC3
22048  8FC4
22049  8FC5
22050  8FC6
22051  8FC7
22052  8FC8
22053  8FC9
22054  8FCA
22055  8FCB
22056  8FCC
22057  8FCD
22058  8FCE
22059  8FCF
22060  8FD0
22061  8FD1
22062  8FD2
22063  8FD3
22064  8FD4
22065  8FD5
22066  8FD6
22067  8FD7
22068  8FD8
22069  8FD9
22070  8FDA
22071  8FDB
22072  8FDC
22073  8FDD
22074  8FDE
22075  8FDF
22076  8FE0
22077  8FE1
22078  8FE2
22079  8FE3
22080  8FE4
22081  8FE5
22082  8FE6
22083  8FE7
22084  8FE8
22085  8FE9
22086  8FEA
22087  8FEB
22088  8FEC
22089  8FED
22090  8FEE
22091  8FEF
22092  8FF0
22093  8FF1
22094  8FF2
22095  8FF3
22096  8FF4
22097  8FF5
22098  8FF6
22099  8FF7
22100  8FF8
22101  8FF9
22102  8FFA
22103  8FFB
22104  8FFC
22105  8FFD
22106  8FFE
22107  8FFF
22108  9000
22109  9001
22110  9002
22111  9003
22112  9004
22113  9005
22114  9006
22115  9007
22116  9008
22117  9009
22118  900A
22119  900B
22120  900C
22121  900D
22122  900E
22123  900F
22124  9010
22125  9011
22126  9012
22127  9013
22128  9014
22129  9015
22130  9016
22131  9017
22132  9018
22133  9019
22134  901A
22135  901B
22136  901C
22137  901D
22138  901E
22139  901F
22140  9020
22141  9021
22142  9022
22143  9023
22144  9024
22145  9025
22146  9026
22147  9027
22148  9028
22149  9029
22150  902A
22151  902B
22152  902C
22153  902D
22154  902E
22155  902F
22156  9030
22157  9031
22158  9032
22159  9033
22160  9034
22161  9035
22162  9036
22163  9037
22164  9038
22165  9039
22166  903A
22167  903B
22168  903C
22169  903D
22170  903E
22171  903F
22172  9040
22173  9041
22174  9042
22175  9043
22176  9044
22177  9045
22178  9046
22179  9047
22180  9048
22181  9049
22182  904A
22183  904B
22184  904C
22185  904D
22186  904E
22187  904F
22188  9050
22189  9051
22190  9052
22191  9053
22192  9054
22193  9055
22194  9056
22195  9057
22196  9058
22197  9059
22198  905A
22199  905B
22200  905C
22201  905D
22202  905E
22203  905F
22204  9060
22205  9061
22206  9062
22207  9063
22208  9064
22209  9065
22210  9066
22211  9067
22212  9068
22213  9069
22214  906A
22215  906B
22216  906C
22217  906D
22218  906E
22219  906F
22220  9070
22221  9071
22222  9072
22223  9073
22224  9074
22225  9075
22226  9076
22227  9077
22228  9078
22229  9079
22230  907A
22231  907B
22232  907C
22233  907D
22234  907E
22235  907F
22236  9080
22237  9081
22238  9082
22239  9083
22240  9084
22241  9085
22242  9086
22243  9087
22244  9088
22245  9089
22246  908A
22247  908B
22248  908C
22249  908D
22250  908E
22251  908F
22252  9090
22253  9091
22254  9092
22255  9093
22256  9094
22257  9095
22258  9096
22259  9097
22260  9098
22261  9099
22262  909A
22263  909B
22264  909C
22265  909D
22266  909E
22267  909F
22268  90A0
22269  90A1
22270  90A2
22271  90A3
22272  90A4
22273  90A5
22274  90A6
22275  90A7
22276  90A8
22277  90A9
22278  90AA
22279  90AB
22280  90AC
22281  90AD
22282  90AE
22283  90AF
22284  90B0
22285  90B1
22286  90B2
22287  90B3
22288  90B4
22289  90B5
22290  90B6
22291  90B7
22292  90B8
22293  90B9
22294  90BA
22295  90BB
22296  90BC
22297  90BD
22298  90BE
22299  90BF
22300  90C0
22301  90C1
22302  90C2
22303  90C3
22304  90C4
22305  90C5
22306  90C6
22307  90C7
22308  90C8
22309  90C9
22310  90CA
22311  90CB
22312  90CC
22313  90CD
22314  90CE
22315  90CF
22316  90D0
22317  90D1
22318  90D2
22319  90D3
22320  90D4
22321  90D5
22322  90D6
22323  90D7
22324  90D8
22325  90D9
22326  90DA
22327  90DB
22328  90DC
22329  90DD
22330  90DE
22331  90DF
22332  90E0
22333  90E1
22334  90E2
22335  90E3
22336  90E4
22337  90E5
22338  90E6
22339  90E7
22340  90E8
22341  90E9
22342  90EA
22343  90EB
22344  90EC
22345  90ED
22346  90EE
22347  90EF
22348  90F0
22349  90F1
22350  90F2
22351  90F3
22352  90F4
22353  90F5
22354  90F6
22355  90F7
22356  90F8
22357  90F9
22358  90FA
22359  90FB
22360  90FC
22361  90FD
22362  90FE
22363  90FF
22364  9100
22365  9101
22366  9102
22367  9103
22368  9104
22369  9105
22370  9106
22371  9107
22372  9108
22373  9109
22374  910A
22375  910B
22376  910C
22377  910D
22378  910E
22379  910F
22380  9110
22381  9111
22382  9112
22383  9113
22384  9114
22385  9115
22386  9116
22387  9117
22388  9118
22389  9119
22390  911A
22391  911B
22392  911C
22393  911D
22394  911E
22395  911F
22396  9120
22397  9121
22398  9122
22399  9123
22400  9124
22401  9125
22402  9126
22403  9127
22404  9128
22405  9129
22406  912A
22407  912B
22408  912C
22409  912D
22410  912E
22411  912F
22412  9130
22413  9131
22414  9132
22415  9133
22416  9134
22417  9135
22418  9136
22419  9137
22420  9138
22421  9139
22422  913A
22423  913B
22424  913C
22425  913D
22426  913E
22427  913F
22428  9140
22429  9141
22430  9142
22431  9143
22432  9144
22433  9145
22434  9146
22435  9147
22436  9148
22437  9149
22438  914A
22439  914B
22440  914C
22441  914D
22442  914E
22443  914F
22444  9150
22445  9151
22446  9152
22447  9153
22448  9154
22449  9155
22450  9156
22451  9157
22452  9158
22453  9159
22454  915A
22455  915B
22456  915C
22457  915D
22458  915E
22459  915F
22460  9160
22461  9161
22462  9162
22463  9163
22464  9164
22465  9165
22466  9166
22467  9167
22468  9168
22469  9169
22470  916A
22471  916B
22472  916C
22473  916D
22474  916E
22475  916F
22476  9170
22477  9171
22478  9172
22479  9173
22480  9174
22481  9175
22482  9176
22483  9177
22484  9178
22485  9179
22486  917A
22487  917B
22488  917C
22489  917D
22490  917E
22491  917F
22492  9180
22493  9181
22494  9182
22495  9183
22496  9184
22497  9185
22498  9186
22499  9187
22500  9188
22501  9189
22502  918A
22503  918B
22504  918C
22505  918D
22506  918E
22507  918F
22508  9190
22509  9191
22510  9192
22511  9193
22512  9194
22513  9195
22514  9196
22515  9197
22516  9198
22517  9199
22518  919A
22519  919B
22520  919C
22521  919D
22522  919E
22523  919F
22524  91A0
22525  91A1
22526  91A2
22527  91A3
22528  91A4
22529  91A5
22530  91A6
22531  91A7
22532  91A8
22533  91A9
22534  91AA
22535  91AB
22536  91AC
22537  91AD
22538  91AE
22539  91AF
22540  91B0
22541  91B1
22542  91B2
22543  91B3
22544  91B4
22545  91B5
22546  91B6
22547  91B7
22548  91B8
22549  91B9
22550  91BA
22551  91BB
22552  91BC
22553  91BD
22554  91BE
22555  91BF
22556  91C0
22557  91C1
22558  91C2
22559  91C3
22560  91C4
22561  91C5
22562  91C6
22563  91C7
22564  91C8
22565  91C9
22566  91CA
22567  91CB
22568  91CC
22569  91CD
22570  91CE
22571  91CF
22572  91D0
22573  91D1
22574  91D2
22575  91D3
22576  91D4
22577  91D5
22578  91D6
22579  91D7
22580  91D8
22581  91D9
22582  91DA
22583  91DB
22584  91DC
22585  91DD
22586  91DE
22587  91DF
22588  91E0
22589  91E1
22590  91E2
22591  91E3
22592  91E4
22593  91E5
22594  91E6
22595  91E7
22596  91E8
22597  91E9
22598  91EA
22599  91EB
22600  91EC
22601  91ED
22602  91EE
22603  91EF
22604  91F0
22605  91F1
22606  91F2
22607  91F3
22608  91F4
22609  91F5
22610  91F6
22611  91F7
22612  91F8
22613  91F9
22614  91FA
22615  91FB
22616  91FC
22617  91FD
22618  91FE
22619  91FF
22620  9200
22621  9201
22622  9202
22623  9203
22624  9204
22625  9205
22626  9206
22627  9207
22628  9208
22629  9209
22630  920A
22631  920B
22632  920C
22633  920D
22634  920E
22635  920F
22636  9210
22637  9211
22638  9212
22639  9213
22640  9214
22641  9215
22642  9216
22643  9217
22644  9218
22645  9219
22646  921A
22647  921B
22648  921C
22649  921D
22650  921E
22651  921F
22652  9220
22653  9221
22654  9222
22655  9223
22656  9224
22657  9225
22658  9226
22659  9227
22660  9228
22661  9229
22662  922A
22663  922B
22664  922C
22665  922D
22666  922E
22667  922F
22668  9230
22669  9231
22670  9232
22671  9233
22672  9234
22673  9235
22674  9236
22675  9237
22676  9238
22677  9239
22678  923A
22679  923B
22680  923C
22681  923D
22682  923E
22683  923F
22684  9240
22685  9241
22686  9242
22687  9243
22688  9244
22689  9245
22690  9246
22691  9247
22692  9248
22693  9249
22694  924A
22695  924B
22696  924C
22697  924D
22698  924E
22699  924F
22700  9250
22701  9251
22702  9252
22703  9253
22704  9254
22705  9255
22706  9256
22707  9257
22708  9258
22709  9259
22710  925A
22711  925B
22712  925C
22713  925D
22714  925E
22715  925F
22716  9260
22717  9261
22718  9262
22719  9263
22720  9264
22721  9265
22722  9266
22723  9267
22724  9268
22725  9269
22726  926A
22727  926B
22728  926C
22729  926D
22730  926E
22731  926F
22732  9270
22733  9271
22734  9272
22735  9273
22736  9274
22737  9275
22738  9276
22739  9277
22740  9278
22741  9279
22742  927A
22743  927B
22744  927C
22745  927D
22746  927E
22747  927F
22748  9280
22749  9281
22750  9282
22751  9283
22752  9284
22753  9285
22754  9286
22755  9287
22756  9288
22757  9289
22758  928A
22759  928B
22760  928C
22761  928D
22762  928E
22763  928F
22764  9290
22765  9291
22766  9292
22767  9293
22768  9294
22769  9295
22770  9296
22771  9297
22772  9298
22773  9299
22774  929A
22775  929B
22776  929C
22777  929D
22778  929E
22779  929F
22780  92A0
22781  92A1
22782  92A2
22783  92A3
22784  92A4
22785  92A5
22786  92A6
22787  92A7
22788  92A8
22789  92A9
22790  92AA
22791  92AB
22792  92AC
22793  92AD
22794  92AE
22795  92AF
22796  92B0
22797  92B1
22798  92B2
22799  92B3
22800  92B4
22801  92B5
22802  92B6
22803  92B7
22804  92B8
22805  92B9
22806  92BA
22807  92BB
22808  92BC
22809  92BD
22810  92BE
22811  92BF
22812  92C0
22813  92C1
22814  92C2
22815  92C3
22816  92C4
22817  92C5
22818  92C6
22819  92C7
22820  92C8
22821  92C9
22822  92CA
22823  92CB
22824  92CC
22825  92CD
22826  92CE
22827  92CF
22828  92D0
22829  92D1
22830  92D2
22831  92D3
22832  92D4
22833  92D5
22834  92D6
22835  92D7
22836  92D8
22837  92D9
22838  92DA
22839  92DB
22840  92DC
22841  92DD
22842  92DE
22843  92DF
22844  92E0
22845  92E1
22846  92E2
22847  92E3
22848  92E4
22849  92E5
22850  92E6
22851  92E7
22852  92E8
22853  92E9
22854  92EA
22855  92EB
22856  92EC
22857  92ED
22858  92EE
22859  92EF
22860  92F0
22861  92F1
22862  92F2
22863  92F3
22864  92F4
22865  92F5
22866  92F6
22867  92F7
22868  92F8
22869  92F9
22870  92FA
22871  92FB
22872  92FC
22873  92FD
22874  92FE
22875  92FF
22876  9300
22877  9301
22878  9302
22879  9303
22880  9304
22881  9305
22882  9306
22883  9307
22884  9308
22885  9309
22886  930A
22887  930B
22888  930C
22889  930D
22890  930E
22891  930F
22892  9310
22893  9311
22894  9312
22895  9313
22896  9314
22897  9315
22898  9316
22899  9317
22900  9318
22901  9319
22902  931A
22903  931B
22904  931C
22905  931D
22906  931E
22907  931F
22908  9320
22909  9321
22910  9322
22911  9323
22912  9324
22913  9325
22914  9326
22915  9327
22916  9328
22917  9329
22918  932A
22919  932B
22920  932C
22921  932D
22922  932E
22923  932F
22924  9330
22925  9331
22926  9332
22927  9333
22928  9334
22929  9335
22930  9336
22931  9337
22932  9338
22933  9339
22934  933A
22935  933B
22936  933C
22937  933D
22938  933E
22939  933F
22940  9340
22941  9341
22942  9342
22943  9343
22944  9344
22945  9345
22946  9346
22947  9347
22948  9348
22949  9349
22950  934A
22951  934B
22952  934C
22953  934D
22954  934E
22955  934F
22956  9350
22957  9351
22958  9352
22959  9353
22960  9354
22961  9355
22962  9356
22963  9357
22964  9358
22965  9359
22966  935A
22967  935B
22968  935C
22969  935D
22970  935E
22971  935F
22972  9360
22973  9361
22974  9362
22975  9363
22976  9364
22977  9365
22978  9366
22979  9367
22980  9368
22981  9369
22982  936A
22983  936B
22984  936C
22985  936D
22986  936E
22987  936F
22988  9370
22989  9371
22990  9372
22991  9373
22992  9374
22993  9375
22994  9376
22995  9377
22996  9378
22997  9379
22998  937A
22999  937B
23000  937C
23001  937D
23002  937E
23003  937F
23004  9380
23005  9381
23006  9382
23007  9383
23008  9384
23009  9385
23010  9386
23011  9387
23012  9388
23013  9389
23014  938A
23015  938B
23016  938C
23017  938D
23018  938E
23019  938F
23020  9390
23021  9391
23022  9392
23023  9393
23024  9394
23025  9395
23026  9396
23027  9397
23028  9398
23029  9399
23030  939A
23031  939B
23032  939C
23033  939D
23034  939E
23035  939F
23036  93A0
23037  93A1
23038  93A2
23039  93A3
23040  93A4
23041  93A5
23042  93A6
23043  93A7
23044  93A8
23045  93A9
23046  93AA
23047  93AB
23048  93AC
23049  93AD
23050  93AE
23051  93AF
23052  93B0
23053  93B1
23054  93B2
23055  93B3
23056  93B4
23057  93B5
23058  93B6
23059  93B7
23060  93B8
23061  93B9
23062  93BA
23063  93BB
23064  93BC
23065  93BD
23066  93BE
23067  93BF
23068  93C0
23069  93C1
23070  93C2
23071  93C3
23072  93C4
23073  93C5
23074  93C6
23075  93C7
23076  93C8
23077  93C9
23078  93CA
23079  93CB
23080  93CC
23081  93CD
23082  93CE
23083  93CF
23084  93D0
23085  93D1
23086  93D2
23087  93D3
23088  93D4
23089  93D5
23090  93D6
23091  93D7
23092  93D8
23093  93D9
23094  93DA
23095  93DB
23096  93DC
23097  93DD
23098  93DE
23099  93DF
23100  93E0
23101  93E1
23102  93E2
23103  93E3
23104  93E4
23105  93E5
23106  93E6
23107  93E7
23108  93E8
23109  93E9
23110  93EA
23111  93EB
23112  93EC
23113  93ED
23114  93EE
23115  93EF
23116  93F0
23117  93F1
23118  93F2
23119  93F3
23120  93F4
23121  93F5
23122  93F6
23123  93F7
23124  93F8
23125  93F9
23126  93FA
23127  93FB
23128  93FC
23129  93FD
23130  93FE
23131  93FF
23132  9400
23133  9401
23134  9402
23135  9403
23136  9404
23137  9405
23138  9406
23139  9407
23140  9408
23141  9409
23142  940A
23143  940B
23144  940C
23145  940D
23146  940E
23147  940F
23148  9410
23149  9411
23150  9412
23151  9413
23152  9414
23153  9415
23154  9416
23155  9417
23156  9418
23157  9419
23158  941A
23159  941B
23160  941C
23161  941D
23162  941E
23163  941F
23164  9420
23165  9421
23166  9422
23167  9423
23168  9424
23169  9425
23170  9426
23171  9427
23172  9428
23173  9429
23174  942A
23175  942B
23176  942C
23177  942D
23178  942E
23179  942F
23180  9430
23181  9431
23182  9432
23183  9433
23184  9434
23185  9435
23186  9436
23187  9437
23188  9438
23189  9439
23190  943A
23191  943B
23192  943C
23193  943D
23194  943E
23195  943F
23196  9440
23197  9441
23198  9442
23199  9443
23200  9444
23201  9445
23202  9446
23203  9447
23204  9448
23205  9449
23206  944A
23207  944B
23208  944C
23209  944D
23210  944E
23211  944F
23212  9450
23213  9451
23214  9452
23215  9453
23216  9454
23217  9455
23218  9456
23219  9457
23220  9458
23221  9459
23222  945A
23223  945B
23224  945C
23225  945D
23226  945E
23227  945F
23228  9460
23229  9461
23230  9462
23231  9463
23232  9464
23233  9465
23234  9466
23235  9467
23236  9468
23237  9469
23238  946A
23239  946B
23240  946C
23241  946D
23242  946E
23243  946F
23244  9470
23245  9471
23246  9472
23247  9473
23248  9474
23249  9475
23250  9476
23251  9477
23252  9478
23253  9479
23254  947A
23255  947B
23256  947C
23257  947D
23258  947E
23259  947F
23260  9480
23261  9481
23262  9482
23263  9483
23264  9484
23265  9485
23266  9486
23267  9487
23268  9488
23269  9489
23270  948A
23271  948B
23272  948C
23273  948D
23274  948E
23275  948F
23276  9490
23277  9491
23278  9492
23279  9493
23280  9494
23281  9495
23282  9496
23283  9497
23284  9498
23285  9499
23286  949A
23287  949B
23288  949C
23289  949D
23290  949E
23291  949F
23292  94A0
23293  94A1
23294  94A2
23295  94A3
23296  94A4
23297  94A5
23298  94A6
23299  94A7
23300  94A8
23301  94A9
23302  94AA
23303  94AB
23304  94AC
23305  94AD
23306  94AE
23307  94AF
23308  94B0
23309  94B1
23310  94B2
23311  94B3
23312  94B4
23313  94B5
23314  94B6
23315  94B7
23316  94B8
23317  94B9
23318  94BA
23319  94BB
23320  94BC
23321  94BD
23322  94BE
23323  94BF
23324  94C0
23325  94C1
23326  94C2
23327  94C3
23328  94C4
23329  94C5
23330  94C6
23331  94C7
23332  94C8
23333  94C9
23334  94CA
23335  94CB
23336  94CC
23337  94CD
23338  94CE
23339  94CF
23340  94D0
23341  94D1
23342  94D2
23343  94D3
23344  94D4
23345  94D5
23346  94D6
23347  94D7
23348  94D8
23349  94D9
23350  94DA
23351  94DB
23352  94DC
23353  94DD
23354  94DE
23355  94DF
23356  94E0
23357  94E1
23358  94E2
23359  94E3
23360  94E4
23361  94E5
23362  94E6
23363  94E7
23364  94E8
23365  94E9
23366  94EA
23367  94EB
23368  94EC
23369  94ED
23370  94EE
23371  94EF
23372  94F0
23373  94F1
23374  94F2
23375  94F3
23376  94F4
23377  94F5
23378  94F6
23379  94F7
23380  94F8
23381  94F9
23382  94FA
23383  94FB
23384  94FC
23385  94FD
23386  94FE
23387  94FF
23388  9500
23389  9501
23390  9502
23391  9503
23392  9504
23393  9505
23394  9506
23395  9507
23396  9508
23397  9509
23398  950A
23399  950B
23400  950C
23401  950D
23402  950E
23403  950F
23404  9510
23405  9511
23406  9512
23407  9513
23408  9514
23409  9515
23410  9516
23411  9517
23412  9518
23413  9519
23414  951A
23415  951B
23416  951C
23417  951D
23418  951E
23419  951F
23420  9520
23421  9521
23422  9522
23423  9523
23424  9524
23425  9525
23426  9526
23427  9527
23428  9528
23429  9529
23430  952A
23431  952B
23432  952C
23433  952D
23434  952E
23435  952F
23436  9530
23437  9531
23438  9532
23439  9533
23440  9534
23441  9535
23442  9536
23443  9537
23444  9538
23445  9539
23446  953A
23447  953B
23448  953C
23449  953D
23450  953E
23451  953F
23452  9540
23453  9541
23454  9542
23455  9543
23456  9544
23457  9545
23458  9546
23459  9547
23460  9548
23461  9549
23462  954A
23463  954B
23464  954C
23465  954D
23466  954E
23467  954F
23468  9550
23469  9551
23470  9552
23471  9553
23472  9554
23473  9555
23474  9556
23475  9557
23476  9558
23477  9559
23478  955A
23479  955B
23480  955C
23481  955D
23482  955E
23483  955F
23484  9560
23485  9561
23486  9562
23487  9563
23488  9564
23489  9565
23490  9566
23491  9567
23492  9568
23493  9569
23494  956A
23495  956B
23496  956C
23497  956D
23498  956E
23499  956F
23500  9570
23501  9571
23502  9572
23503  9573
23504  9574
23505  9575
23506  9576
23507  9577
23508  9578
23509  9579
23510  957A
23511  957B
23512  957C
23513  957D
23514  957E
23515  957F
23516  9580
23517  9581
23518  9582
23519  9583
23520  9584
23521  9585
23522  9586
23523  9587
23524  9588
23525  9589
23526  958A
23527  958B
23528  958C
23529  958D
23530  958E
23531  958F
23532  9590
23533  9591
23534  9592
23535  9593
23536  9594
23537  9595
23538  9596
23539  9597
23540  9598
23541  9599
23542  959A
23543  959B
23544  959C
23545  959D
23546  959E
23547  959F
23548  95A0
23549  95A1
23550  95A2
23551  95A3
23552  95A4
23553  95A5
23554  95A6
23555  95A7
23556  95A8
23557  95A9
23558  95AA
23559  95AB
23560  95AC
23561  95AD
23562  95AE
23563  95AF
23564  95B0
23565  95B1
23566  95B2
23567  95B3
23568  95B4
23569  95B5
23570  95B6
23571  95B7
23572  95B8
23573  95B9
23574  95BA
23575  95BB
23576  95BC
23577  95BD
23578  95BE
23579  95BF
23580  95C0
23581  95C1
23582  95C2
23583  95C3
23584  95C4
23585  95C5
23586  95C6
23587  95C7
23588  95C8
23589  95C9
23590  95CA
23591  95CB
23592  95CC
23593  95CD
23594  95CE
23595  95CF
23596  95D0
23597  95D1
23598  95D2
23599  95D3
23600  95D4
23601  95D5
23602  95D6
23603  95D7
23604  95D8
23605  95D9
23606  95DA
23607  95DB
23608  95DC
23609  95DD
23610  95DE
23611  95DF
23612  95E0
23613  95E1
23614  95E2
23615  95E3
23616  95E4
23617  95E5
23618  95E6
23619  95E7
23620  95E8
23621  95E9
23622  95EA
23623  95EB
23624  95EC
23625  95ED
23626  95EE
23627  95EF
23628  95F0
23629  95F1
23630  95F2
23631  95F3
23632  95F4
23633  95F5
23634  95F6
23635  95F7
23636  95F8
23637  95F9
23638  95FA
23639  95FB
23640  95FC
23641  95FD
23642  95FE
23643  95FF
23644  9600
23645  9601
23646  9602
23647  9603
23648  9604
23649  9605
23650  9606
23651  9607
23652  9608
23653  9609
23654  960A
23655  960B
23656  960C
23657  960D
23658  960E
23659  960F
23660  9610
23661  9611
23662  9612
23663  9613
23664  9614
23665  9615
23666  9616
23667  9617
23668  9618
23669  9619
23670  961A
23671  961B
23672  961C
23673  961D
23674  961E
23675  961F
23676  9620
23677  9621
23678  9622
23679  9623
23680  9624
23681  9625
23682  9626
23683  9627
23684  9628
23685  9629
23686  962A
23687  962B
23688  962C
23689  962D
23690  962E
23691  962F
23692  9630
23693  9631
23694  9632
23695  9633
23696  9634
23697  9635
23698  9636
23699  9637
23700  9638
23701  9639
23702  963A
23703  963B
23704  963C
23705  963D
23706  963E
23707  963F
23708  9640
23709  9641
23710  9642
23711  9643
23712  9644
23713  9645
23714  9646
23715  9647
23716  9648
23717  9649
23718  964A
23719  964B
23720  964C
23721  964D
23722  964E
23723  964F
23724  9650
23725  9651
23726  9652
23727  9653
23728  9654
23729  9655
23730  9656
23731  9657
23732  9658
23733  9659
23734  965A
23735  965B
23736  965C
23737  965D
23738  965E
23739  965F
23740  9660
23741  9661
23742  9662
23743  9663
23744  9664
23745  9665
23746  9666
23747  9667
23748  9668
23749  9669
23750  966A
23751  966B
23752  966C
23753  966D
23754  966E
23755  966F
23756  9670
23757  9671
23758  9672
23759  9673
23760  9674
23761  9675
23762  9676
23763  9677
23764  9678
23765  9679
23766  967A
23767  967B
23768  967C
23769  967D
23770  967E
23771  967F
23772  9680
23773  9681
23774  9682
23775  9683
23776  9684
23777  9685
23778  9686
23779  9687
23780  9688
23781  9689
23782  968A
23783  968B
23784  968C
23785  968D
23786  968E
23787  968F
23788  9690
23789  9691
23790  9692
23791  9693
23792  9694
23793  9695
23794  9696
23795  9697
23796  9698
23797  9699
23798  969A
23799  969B
23800  969C
23801  969D
23802  969E
23803  969F
23804  96A0
23805  96A1
23806  96A2
23807  96A3
23808  96A4
23809  96A5
23810  96A6
23811  96A7
23812  96A8
23813  96A9
23814  96AA
23815  96AB
23816  96AC
23817  96AD
23818  96AE
23819  96AF
23820  96B0
23821  96B1
23822  96B2
23823  96B3
23824  96B4
23825  96B5
23826  96B6
23827  96B7
23828  96B8
23829  96B9
23830  96BA
23831  96BB
23832  96BC
23833  96BD
23834  96BE
23835  96BF
23836  96C0
23837  96C1
23838  96C2
23839  96C3
23840  96C4
23841  96C5
23842  96C6
23843  96C7
23844  96C8
23845  96C9
23846  96CA
23847  96CB
23848  96CC
23849  96CD
23850  96CE
23851  96CF
23852  96D0
23853  96D1
23854  96D2
23855  96D3
23856  96D4
23857  96D5
23858  96D6
23859  96D7
23860  96D8
23861  96D9
23862  96DA
23863  96DB
23864  96DC
23865  96DD
23866  96DE
23867  96DF
23868  96E0
23869  96E1
23870  96E2
23871  96E3
23872  96E4
23873  96E5
23874  96E6
23875  96E7
23876  96E8
23877  96E9
23878  96EA
23879  96EB
23880  96EC
23881  96ED
23882  96EE
23883  96EF
23884  96F0
23885  96F1
23886  96F2
23887  96F3
23888  96F4
23889  96F5
23890  96F6
23891  96F7
23892  96F8
23893  96F9
23894  96FA
23895  96FB
23896  96FC
23897  96FD
23898  96FE
23899  96FF
23900  9700
23901  9701
23902  9702
23903  9703
23904  9704
23905  9705
23906  9706
23907  9707
23908  9708
23909  9709
23910  970A
23911  970B
23912  970C
23913  970D
23914  970E
23915  970F
23916  9710
23917  9711
23918  9712
23919  9713
23920  9714
23921  9715
23922  9716
23923  9717
23924  9718
23925  9719
23926  971A
23927  971B
23928  971C
23929  971D
23930  971E
23931  971F
23932  9720
23933  9721
23934  9722
23935  9723
23936  9724
23937  9725
23938  9726
23939  9727
23940  9728
23941  9729
23942  972A
23943  972B
23944  972C
23945  972D
23946  972E
23947  972F
23948  9730
23949  9731
23950  9732
23951  9733
23952  9734
23953  9735
23954  9736
23955  9737
23956  9738
23957  9739
23958  973A
23959  973B
23960  973C
23961  973D
23962  973E
23963  973F
23964  9740
23965  9741
23966  9742
23967  9743
23968  9744
23969  9745
23970  9746
23971  9747
23972  9748
23973  9749
23974  974A
23975  974B
23976  974C
23977  974D
23978  974E
23979  974F
23980  9750
23981  9751
23982  9752
23983  9753
23984  9754
23985  9755
23986  9756
23987  9757
23988  9758
23989  9759
23990  975A
23991  975B
23992  975C
23993  975D
23994  975E
23995  975F
23996  9760
23997  9761
23998  9762
23999  9763
24000  9764
24001  9765
24002  9766
24003  9767
24004  9768
24005  9769
24006  976A
24007  976B
24008  976C
24009  976D
24010  976E
24011  976F
24012  9770
24013  9771
24014  9772
24015  9773
24016  9774
24017  9775
24018  9776
24019  9777
24020  9778
24021  9779
24022  977A
24023  977B
24024  977C
24025  977D
24026  977E
24027  977F
24028  9780
24029  9781
24030  9782
24031  9783
24032  9784
24033  9785
24034  9786
24035  9787
24036  9788
24037  9789
24038  978A
24039  978B
24040  978C
24041  978D
24042  978E
24043  978F
24044  9790
24045  9791
24046  9792
24047  9793
24048  9794
24049  9795
24050  9796
24051  9797
24052  9798
24053  9799
24054  979A
24055  979B
24056  979C
24057  979D
24058  979E
24059  979F
24060  97A0
24061  97A1
24062  97A2
24063  97A3
24064  97A4
24065  97A5
24066  97A6
24067  97A7
24068  97A8
24069  97A9
24070  97AA
24071  97AB
24072  97AC
24073  97AD
24074  97AE
24075  97AF
24076  97B0
24077  97B1
24078  97B2
24079  97B3
24080  97B4
24081  97B5
24082  97B6
24083  97B7
24084  97B8
24085  97B9
24086  97BA
24087  97BB
24088  97BC
24089  97BD
24090  97BE
24091  97BF
24092  97C0
24093  97C1
24094  97C2
24095  97C3
24096  97C4
24097  97C5
24098  97C6
24099  97C7
24100  97C8
24101  97C9
24102  97CA
24103  97CB
24104  97CC
24105  97CD
24106  97CE
24107  97CF
24108  97D0
24109  97D1
24110  97D2
24111  97D3
24112  97D4
24113  97D5
24114  97D6
24115  97D7
24116  97D8
24117  97D9
24118  97DA
24119  97DB
24120  97DC
24121  97DD
24122  97DE
24123  97DF
24124  97E0
24125  97E1
24126  97E2
24127  97E3
24128  97E4
24129  97E5
24130  97E6
24131  97E7
24132  97E8
24133  97E9
24134  97EA
24135  97EB
24136  97EC
24137  97ED
24138  97EE
24139  97EF
24140  97F0
24141  97F1
24142  97F2
24143  97F3
24144  97F4
24145  97F5
24146  97F6
24147  97F7
24148  97F8
24149  97F9
24150  97FA
24151  97FB
24152  97FC
24153  97FD
24154  97FE
24155  97FF
24156  9800
24157  9801
24158  9802
24159  9803
24160  9804
24161  9805
24162  9806
24163  9807
24164  9808
24165  9809
24166  980A
24167  980B
24168  980C
24169  980D
24170  980E
24171  980F
24172  9810
24173  9811
24174  9812
24175  9813
24176  9814
24177  9815
24178  9816
24179  9817
24180  9818
24181  9819
24182  981A
24183  981B
24184  981C
24185  981D
24186  981E
24187  981F
24188  9820
24189  9821
24190  9822
24191  9823
24192  9824
24193  9825
24194  9826
24195  9827
24196  9828
24197  9829
24198  982A
24199  982B
24200  982C
24201  982D
24202  982E
24203  982F
24204  9830
24205  9831
24206  9832
24207  9833
24208  9834
24209  9835
24210  9836
24211  9837
24212  9838
24213  9839
24214  983A
24215  983B
24216  983C
24217  983D
24218  983E
24219  983F
24220  9840
24221  9841
24222  9842
24223  9843
24224  9844
24225  9845
24226  9846
24227  9847
24228  9848
24229  9849
24230  984A
24231  984B
24232  984C
24233  984D
24234  984E
24235  984F
24236  9850
24237  9851
24238  9852
24239  9853
24240  9854
24241  9855
24242  9856
24243  9857
24244  9858
24245  9859
24246  985A
24247  985B
24248  985C
24249  985D
24250  985E
24251  985F
24252  9860
24253  9861
24254  9862
24255  9863
24256  9864
24257  9865
24258  9866
24259  9867
24260  9868
24261  9869
24262  986A
24263  986B
24264  986C
24265  986D
24266  986E
24267  986F
24268  9870
24269  9871
24270  9872
24271  9873
24272  9874
24273  9875
24274  9876
24275  9877
24276  9878
24277  9879
24278  987A
24279  987B
24280  987C
24281  987D
24282  987E
24283  987F
24284  9880
24285  9881
24286  9882
24287  9883
24288  9884
24289  9885
24290  9886
24291  9887
24292  9888
24293  9889
24294  988A
24295  988B
24296  988C
24297  988D
24298  988E
24299  988F
24300  9890
24301  9891
24302  9892
24303  9893
24304  9894
24305  9895
24306  9896
24307  9897
24308  9898
24309  9899
24310  989A
24311  989B
24312  989C
24313  989D
24314  989E
24315  989F
24316  98A0
24317  98A1
24318  98A2
24319  98A3
24320  98A4
24321  98A5
24322  98A6
24323  98A7
24324  98A8
24325  98A9
24326  98AA
24327  98AB
24328  98AC
24329  98AD
24330  98AE
24331  98AF
24332  98B0
24333  98B1
24334  98B2
24335  98B3
24336  98B4
24337  98B5
24338  98B6
24339  98B7
24340  98B8
24341  98B9
24342  98BA
24343  98BB
24344  98BC
24345  98BD
24346  98BE
24347  98BF
24348  98C0
24349  98C1
24350  98C2
24351  98C3
24352  98C4
24353  98C5
24354  98C6
24355  98C7
24356  98C8
24357  98C9
24358  98CA
24359  98CB
24360  98CC
24361  98CD
24362  98CE
24363  98CF
24364  98D0
24365  98D1
24366  98D2
24367  98D3
24368  98D4
24369  98D5
24370  98D6
24371  98D7
24372  98D8
24373  98D9
24374  98DA
24375  98DB
24376  98DC
24377  98DD
24378  98DE
24379  98DF
24380  98E0
24381  98E1
24382  98E2
24383  98E3
24384  98E4
24385  98E5
24386  98E6
24387  98E7
24388  98E8
24389  98E9
24390  98EA
24391  98EB
24392  98EC
24393  98ED
24394  98EE
24395  98EF
24396  98F0
24397  98F1
24398  98F2
24399  98F3
24400  98F4
24401  98F5
24402  98F6
24403  98F7
24404  98F8
24405  98F9
24406  98FA
24407  98FB
24408  98FC
24409  98FD
24410  98FE
24411  98FF
24412  9900
24413  9901
24414  9902
24415  9903
24416  9904
24417  9905
24418  9906
24419  9907
24420  9908
24421  9909
24422  990A
24423  990B
24424  990C
24425  990D
24426  990E
24427  990F
24428  9910
24429  9911
24430  9912
24431  9913
24432  9914
24433  9915
24434  9916
24435  9917
24436  9918
24437  9919
24438  991A
24439  991B
24440  991C
24441  991D
24442  991E
24443  991F
24444  9920
24445  9921
24446  9922
24447  9923
24448  9924
24449  9925
24450  9926
24451  9927
24452  9928
24453  9929
24454  992A
24455  992B
24456  992C
24457  992D
24458  992E
24459  992F
24460  9930
24461  9931
24462  9932
24463  9933
24464  9934
24465  9935
24466  9936
24467  9937
24468  9938
24469  9939
24470  993A
24471  993B
24472  993C
24473  993D
24474  993E
24475  993F
24476  9940
24477  9941
24478  9942
24479  9943
24480  9944
24481  9945
24482  9946
24483  9947
24484  9948
24485  9949
24486  994A
24487  994B
24488  994C
24489  994D
24490  994E
24491  994F
24492  9950
24493  9951
24494  9952
24495  9953
24496  9954
24497  9955
24498  9956
24499  9957
24500  9958
24501  9959
24502  995A
24503  995B
24504  995C
24505  995D
24506  995E
24507  995F
24508  9960
24509  9961
24510  9962
24511  9963
24512  9964
24513  9965
24514  9966
24515  9967
24516  9968
24517  9969
24518  996A
24519  996B
24520  996C
24521  996D
24522  996E
24523  996F
24524  9970
24525  9971
24526  9972
24527  9973
24528  9974
24529  9975
24530  9976
24531  9977
24532  9978
24533  9979
24534  997A
24535  997B
24536  997C
24537  997D
24538  997E
24539  997F
24540  9980
24541  9981
24542  9982
24543  9983
24544  9984
24545  9985
24546  9986
24547  9987
24548  9988
24549  9989
24550  998A
24551  998B
24552  998C
24553  998D
24554  998E
24555  998F
24556  9990
24557  9991
24558  9992
24559  9993
24560  9994
24561  9995
24562  9996
24563  9997
24564  9998
24565  9999
24566  999A
24567  999B
24568  999C
24569  999D
24570  999E
24571  999F
24572  99A0
24573  99A1
24574  99A2
24575  99A3
24576  99A4
24577  99A5
24578  99A6
24579  99A7
24580  99A8
24581  99A9
24582  99AA
24583  99AB
24584  99AC
24585  99AD
24586  99AE
24587  99AF
24588  99B0
24589  99B1
24590  99B2
24591  99B3
24592  99B4
24593  99B5
24594  99B6
24595  99B7
24596  99B8
24597  99B9
24598  99BA
24599  99BB
24600  99BC
24601  99BD
24602  99BE
24603  99BF
24604  99C0
24605  99C1
24606  99C2
24607  99C3
24608  99C4
24609  99C5
24610  99C6
24611  99C7
24612  99C8
24613  99C9
24614  99CA
24615  99CB
24616  99CC
24617  99CD
24618  99CE
24619  99CF
24620  99D0
24621  99D1
24622  99D2
24623  99D3
24624  99D4
24625  99D5
24626  99D6
24627  99D7
24628  99D8
24629  99D9
24630  99DA
24631  99DB
24632  99DC
24633  99DD
24634  99DE
24635  99DF
24636  99E0
24637  99E1
24638  99E2
24639  99E3
24640  99E4
24641  99E5
24642  99E6
24643  99E7
24644  99E8
24645  99E9
24646  99EA
24647  99EB
24648  99EC
24649  99ED
24650  99EE
24651  99EF
24652  99F0
24653  99F1
24654  99F2
24655  99F3
24656  99F4
24657  99F5
24658  99F6
24659  99F7
24660  99F8
24661  99F9
24662  99FA
24663  99FB
24664  99FC
24665  99FD
24666  99FE
24667  99FF
24668  9A00
24669  9A01
24670  9A02
24671  9A03
24672  9A04
24673  9A05
24674  9A06
24675  9A07
24676  9A08
24677  9A09
24678  9A0A
24679  9A0B
24680  9A0C
24681  9A0D
24682  9A0E
24683  9A0F
24684  9A10
24685  9A11
24686  9A12
24687  9A13
24688  9A14
24689  9A15
24690  9A16
24691  9A17
24692  9A18
24693  9A19
24694  9A1A
24695  9A1B
24696  9A1C
24697  9A1D
24698  9A1E
24699  9A1F
24700  9A20
24701  9A21
24702  9A22
24703  9A23
24704  9A24
24705  9A25
24706  9A26
24707  9A27
24708  9A28
24709  9A29
24710  9A2A
24711  9A2B
24712  9A2C
24713  9A2D
24714  9A2E
24715  9A2F
24716  9A30
24717  9A31
24718  9A32
24719  9A33
24720  9A34
24721  9A35
24722  9A36
24723  9A37
24724  9A38
24725  9A39
24726  9A3A
24727  9A3B
24728  9A3C
24729  9A3D
24730  9A3E
24731  9A3F
24732  9A40
24733  9A41
24734  9A42
24735  9A43
24736  9A44
24737  9A45
24738  9A46
24739  9A47
24740  9A48
24741  9A49
24742  9A4A
24743  9A4B
24744  9A4C
24745  9A4D
24746  9A4E
24747  9A4F
24748  9A50
24749  9A51
24750  9A52
24751  9A53
24752  9A54
24753  9A55
24754  9A56
24755  9A57
24756  9A58
24757  9A59
24758  9A5A
24759  9A5B
24760  9A5C
24761  9A5D
24762  9A5E
24763  9A5F
24764  9A60
24765  9A61
24766  9A62
24767  9A63
24768  9A64
24769  9A65
24770  9A66
24771  9A67
24772  9A68
24773  9A69
24774  9A6A
24775  9A6B
24776  9A6C
24777  9A6D
24778  9A6E
24779  9A6F
24780  9A70
24781  9A71
24782  9A72
24783  9A73
24784  9A74
24785  9A75
24786  9A76
24787  9A77
24788  9A78
24789  9A79
24790  9A7A
24791  9A7B
24792  9A7C
24793  9A7D
24794  9A7E
24795  9A7F
24796  9A80
24797  9A81
24798  9A82
24799  9A83
24800  9A84
24801  9A85
24802  9A86
24803  9A87
24804  9A88
24805  9A89
24806  9A8A
24807  9A8B
24808  9A8C
24809  9A8D
24810  9A8E
24811  9A8F
24812  9A90
24813  9A91
24814  9A92
24815  9A93
24816  9A94
24817  9A95
24818  9A96
24819  9A97
24820  9A98
24821  9A99
24822  9A9A
24823  9A9B
24824  9A9C
24825  9A9D
24826  9A9E
24827  9A9F
24828  9AA0
24829  9AA1
24830  9AA2
24831  9AA3
24832  9AA4
24833  9AA5
24834  9AA6
24835  9AA7
24836  9AA8
24837  9AA9
24838  9AAA
24839  9AAB
24840  9AAC
24841  9AAD
24842  9AAE
24843  9AAF
24844  9AB0
24845  9AB1
24846  9AB2
24847  9AB3
24848  9AB4
24849  9AB5
24850  9AB6
24851  9AB7
24852  9AB8
24853  9AB9
24854  9ABA
24855  9ABB
24856  9ABC
24857  9ABD
24858  9ABE
24859  9ABF
24860  9AC0
24861  9AC1
24862  9AC2
24863  9AC3
24864  9AC4
24865  9AC5
24866  9AC6
24867  9AC7
24868  9AC8
24869  9AC9
24870  9ACA
24871  9ACB
24872  9ACC
24873  9ACD
24874  9ACE
24875  9ACF
24876  9AD0
24877  9AD1
24878  9AD2
24879  9AD3
24880  9AD4
24881  9AD5
24882  9AD6
24883  9AD7
24884  9AD8
24885  9AD9
24886  9ADA
24887  9ADB
24888  9ADC
24889  9ADD
24890  9ADE
24891  9ADF
24892  9AE0
24893  9AE1
24894  9AE2
24895  9AE3
24896  9AE4
24897  9AE5
24898  9AE6
24899  9AE7
24900  9AE8
24901  9AE9
24902  9AEA
24903  9AEB
24904  9AEC
24905  9AED
24906  9AEE
24907  9AEF
24908  9AF0
24909  9AF1
24910  9AF2
24911  9AF3
24912  9AF4
24913  9AF5
24914  9AF6
24915  9AF7
24916  9AF8
24917  9AF9
24918  9AFA
24919  9AFB
24920  9AFC
24921  9AFD
24922  9AFE
24923  9AFF
24924  9B00
24925  9B01
24926  9B02
24927  9B03
24928  9B04
24929  9B05
24930  9B06
24931  9B07
24932  9B08
24933  9B09
24934  9B0A
24935  9B0B
24936  9B0C
24937  9B0D
24938  9B0E
24939  9B0F
24940  9B10
24941  9B11
24942  9B12
24943  9B13
24944  9B14
24945  9B15
24946  9B16
24947  9B17
24948  9B18
24949  9B19
24950  9B1A
24951  9B1B
24952  9B1C
24953  9B1D
24954  9B1E
24955  9B1F
24956  9B20
24957  9B21
24958  9B22
24959  9B23
24960  9B24
24961  9B25
24962  9B26
24963  9B27
24964  9B28
24965  9B29
24966  9B2A
24967  9B2B
24968  9B2C
24969  9B2D
24970  9B2E
24971  9B2F
24972  9B30
24973  9B31
24974  9B32
24975  9B33
24976  9B34
24977  9B35
24978  9B36
24979  9B37
24980  9B38
24981  9B39
24982  9B3A
24983  9B3B
24984  9B3C
24985  9B3D
24986  9B3E
24987  9B3F
24988  9B40
24989  9B41
24990  9B42
24991  9B43
24992  9B44
24993  9B45
24994  9B46
24995  9B47
24996  9B48
24997  9B49
24998  9B4A
24999  9B4B
25000  9B4C
25001  9B4D
25002  9B4E
25003  9B4F
25004  9B50
25005  9B51
25006  9B52
25007  9B53
25008  9B54
25009  9B55
25010  9B56
25011  9B57
25012  9B58
25013  9B59
25014  9B5A
25015  9B5B
25016  9B5C
25017  9B5D
25018  9B5E
25019  9B5F
25020  9B60
25021  9B61
25022  9B62
25023  9B63
25024  9B64
25025  9B65
25026  9B66
25027  9B67
25028  9B68
25029  9B69
25030  9B6A
25031  9B6B
25032  9B6C
25033  9B6D
25034  9B6E
25035  9B6F
25036  9B70
25037  9B71
25038  9B72
25039  9B73
25040  9B74
25041  9B75
25042  9B76
25043  9B77
25044  9B78
25045  9B79
25046  9B7A
25047  9B7B
25048  9B7C
25049  9B7D
25050  9B7E
25051  9B7F
25052  9B80
25053  9B81
25054  9B82
25055  9B83
25056  9B84
25057  9B85
25058  9B86
25059  9B87
25060  9B88
25061  9B89
25062  9B8A
25063  9B8B
25064  9B8C
25065  9B8D
25066  9B8E
25067  9B8F
25068  9B90
25069  9B91
25070  9B92
25071  9B93
25072  9B94
25073  9B95
25074  9B96
25075  9B97
25076  9B98
25077  9B99
25078  9B9A
25079  9B9B
25080  9B9C
25081  9B9D
25082  9B9E
25083  9B9F
25084  9BA0
25085  9BA1
25086  9BA2
25087  9BA3
25088  9BA4
25089  9BA5
25090  9BA6
25091  9BA7
25092  9BA8
25093  9BA9
25094  9BAA
25095  9BAB
25096  9BAC
25097  9BAD
25098  9BAE
25099  9BAF
25100  9BB0
25101  9BB1
25102  9BB2
25103  9BB3
25104  9BB4
25105  9BB5
25106  9BB6
25107  9BB7
25108  9BB8
25109  9BB9
25110  9BBA
25111  9BBB
25112  9BBC
25113  9BBD
25114  9BBE
25115  9BBF
25116  9BC0
25117  9BC1
25118  9BC2
25119  9BC3
25120  9BC4
25121  9BC5
25122  9BC6
25123  9BC7
25124  9BC8
25125  9BC9
25126  9BCA
25127  9BCB
25128  9BCC
25129  9BCD
25130  9BCE
25131  9BCF
25132  9BD0
25133  9BD1
25134  9BD2
25135  9BD3
25136  9BD4
25137  9BD5
25138  9BD6
25139  9BD7
25140  9BD8
25141  9BD9
25142  9BDA
25143  9BDB
25144  9BDC
25145  9BDD
25146  9BDE
25147  9BDF
25148  9BE0
25149  9BE1
25150  9BE2
25151  9BE3
25152  9BE4
25153  9BE5
25154  9BE6
25155  9BE7
25156  9BE8
25157  9BE9
25158  9BEA
25159  9BEB
25160  9BEC
25161  9BED
25162  9BEE
25163  9BEF
25164  9BF0
25165  9BF1
25166  9BF2
25167  9BF3
25168  9BF4
25169  9BF5
25170  9BF6
25171  9BF7
25172  9BF8
25173  9BF9
25174  9BFA
25175  9BFB
25176  9BFC
25177  9BFD
25178  9BFE
25179  9BFF
25180  9C00
25181  9C01
25182  9C02
25183  9C03
25184  9C04
25185  9C05
25186  9C06
25187  9C07
25188  9C08
25189  9C09
25190  9C0A
25191  9C0B
25192  9C0C
25193  9C0D
25194  9C0E
25195  9C0F
25196  9C10
25197  9C11
25198  9C12
25199  9C13
25200  9C14
25201  9C15
25202  9C16
25203  9C17
25204  9C18
25205  9C19
25206  9C1A
25207  9C1B
25208  9C1C
25209  9C1D
25210  9C1E
25211  9C1F
25212  9C20
25213  9C21
25214  9C22
25215  9C23
25216  9C24
25217  9C25
25218  9C26
25219  9C27
25220  9C28
25221  9C29
25222  9C2A
25223  9C2B
25224  9C2C
25225  9C2D
25226  9C2E
25227  9C2F
25228  9C30
25229  9C31
25230  9C32
25231  9C33
25232  9C34
25233  9C35
25234  9C36
25235  9C37
25236  9C38
25237  9C39
25238  9C3A
25239  9C3B
25240  9C3C
25241  9C3D
25242  9C3E
25243  9C3F
25244  9C40
25245  9C41
25246  9C42
25247  9C43
25248  9C44
25249  9C45
25250  9C46
25251  9C47
25252  9C48
25253  9C49
25254  9C4A
25255  9C4B
25256  9C4C
25257  9C4D
25258  9C4E
25259  9C4F
25260  9C50
25261  9C51
25262  9C52
25263  9C53
25264  9C54
25265  9C55
25266  9C56
25267  9C57
25268  9C58
25269  9C59
25270  9C5A
25271  9C5B
25272  9C5C
25273  9C5D
25274  9C5E
25275  9C5F
25276  9C60
25277  9C61
25278  9C62
25279  9C63
25280  9C64
25281  9C65
25282  9C66
25283  9C67
25284  9C68
25285  9C69
25286  9C6A
25287  9C6B
25288  9C6C
25289  9C6D
25290  9C6E
25291  9C6F
25292  9C70
25293  9C71
25294  9C72
25295  9C73
25296  9C74
25297  9C75
25298  9C76
25299  9C77
25300  9C78
25301  9C79
25302  9C7A
25303  9C7B
25304  9C7C
25305  9C7D
25306  9C7E
25307  9C7F
25308  9C80
25309  9C81
25310  9C82
25311  9C83
25312  9C84
25313  9C85
25314  9C86
25315  9C87
25316  9C88
25317  9C89
25318  9C8A
25319  9C8B
25320  9C8C
25321  9C8D
25322  9C8E
25323  9C8F
25324  9C90
25325  9C91
25326  9C92
25327  9C93
25328  9C94
25329  9C95
25330  9C96
25331  9C97
25332  9C98
25333  9C99
25334  9C9A
25335  9C9B
25336  9C9C
25337  9C9D
25338  9C9E
25339  9C9F
25340  9CA0
25341  9CA1
25342  9CA2
25343  9CA3
25344  9CA4
25345  9CA5
25346  9CA6
25347  9CA7
25348  9CA8
25349  9CA9
25350  9CAA
25351  9CAB
25352  9CAC
25353  9CAD
25354  9CAE
25355  9CAF
25356  9CB0
25357  9CB1
25358  9CB2
25359  9CB3
25360  9CB4
25361  9CB5
25362  9CB6
25363  9CB7
25364  9CB8
25365  9CB9
25366  9CBA
25367  9CBB
25368  9CBC
25369  9CBD
25370  9CBE
25371  9CBF
25372  9CC0
25373  9CC1
25374  9CC2
25375  9CC3
25376  9CC4
25377  9CC5
25378  9CC6
25379  9CC7
25380  9CC8
25381  9CC9
25382  9CCA
25383  9CCB
25384  9CCC
25385  9CCD
25386  9CCE
25387  9CCF
25388  9CD0
25389  9CD1
25390  9CD2
25391  9CD3
25392  9CD4
25393  9CD5
25394  9CD6
25395  9CD7
25396  9CD8
25397  9CD9
25398  9CDA
25399  9CDB
25400  9CDC
25401  9CDD
25402  9CDE
25403  9CDF
25404  9CE0
25405  9CE1
25406  9CE2
25407  9CE3
25408  9CE4
25409  9CE5
25410  9CE6
25411  9CE7
25412  9CE8
25413  9CE9
25414  9CEA
25415  9CEB
25416  9CEC
25417  9CED
25418  9CEE
25419  9CEF
25420  9CF0
25421  9CF1
25422  9CF2
25423  9CF3
25424  9CF4
25425  9CF5
25426  9CF6
25427  9CF7
25428  9CF8
25429  9CF9
25430  9CFA
25431  9CFB
25432  9CFC
25433  9CFD
25434  9CFE
25435  9CFF
25436  9D00
25437  9D01
25438  9D02
25439  9D03
25440  9D04
25441  9D05
25442  9D06
25443  9D07
25444  9D08
25445  9D09
25446  9D0A
25447  9D0B
25448  9D0C
25449  9D0D
25450  9D0E
25451  9D0F
25452  9D10
25453  9D11
25454  9D12
25455  9D13
25456  9D14
25457  9D15
25458  9D16
25459  9D17
25460  9D18
25461  9D19
25462  9D1A
25463  9D1B
25464  9D1C
25465  9D1D
25466  9D1E
25467  9D1F
25468  9D20
25469  9D21
25470  9D22
25471  9D23
25472  9D24
25473  9D25
25474  9D26
25475  9D27
25476  9D28
25477  9D29
25478  9D2A
25479  9D2B
25480  9D2C
25481  9D2D
25482  9D2E
25483  9D2F
25484  9D30
25485  9D31
25486  9D32
25487  9D33
25488  9D34
25489  9D35
25490  9D36
25491  9D37
25492  9D38
25493  9D39
25494  9D3A
25495  9D3B
25496  9D3C
25497  9D3D
25498  9D3E
25499  9D3F
25500  9D40
25501  9D41
25502  9D42
25503  9D43
25504  9D44
25505  9D45
25506  9D46
25507  9D47
25508  9D48
25509  9D49
25510  9D4A
25511  9D4B
25512  9D4C
25513  9D4D
25514  9D4E
25515  9D4F
25516  9D50
25517  9D51
25518  9D52
25519  9D53
25520  9D54
25521  9D55
25522  9D56
25523  9D57
25524  9D58
25525  9D59
25526  9D5A
25527  9D5B
25528  9D5C
25529  9D5D
25530  9D5E
25531  9D5F
25532  9D60
25533  9D61
25534  9D62
25535  9D63
25536  9D64
25537  9D65
25538  9D66
25539  9D67
25540  9D68
25541  9D69
25542  9D6A
25543  9D6B
25544  9D6C
25545  9D6D
25546  9D6E
25547  9D6F
25548  9D70
25549  9D71
25550  9D72
25551  9D73
25552  9D74
25553  9D75
25554  9D76
25555  9D77
25556  9D78
25557  9D79
25558  9D7A
25559  9D7B
25560  9D7C
25561  9D7D
25562  9D7E
25563  9D7F
25564  9D80
25565  9D81
25566  9D82
25567  9D83
25568  9D84
25569  9D85
25570  9D86
25571  9D87
25572  9D88
25573  9D89
25574  9D8A
25575  9D8B
25576  9D8C
25577  9D8D
25578  9D8E
25579  9D8F
25580  9D90
25581  9D91
25582  9D92
25583  9D93
25584  9D94
25585  9D95
25586  9D96
25587  9D97
25588  9D98
25589  9D99
25590  9D9A
25591  9D9B
25592  9D9C
25593  9D9D
25594  9D9E
25595  9D9F
25596  9DA0
25597  9DA1
25598  9DA2
25599  9DA3
25600  9DA4
25601  9DA5
25602  9DA6
25603  9DA7
25604  9DA8
25605  9DA9
25606  9DAA
25607  9DAB
25608  9DAC
25609  9DAD
25610  9DAE
25611  9DAF
25612  9DB0
25613  9DB1
25614  9DB2
25615  9DB3
25616  9DB4
25617  9DB5
25618  9DB6
25619  9DB7
25620  9DB8
25621  9DB9
25622  9DBA
25623  9DBB
25624  9DBC
25625  9DBD
25626  9DBE
25627  9DBF
25628  9DC0
25629  9DC1
25630  9DC2
25631  9DC3
25632  9DC4
25633  9DC5
25634  9DC6
25635  9DC7
25636  9DC8
25637  9DC9
25638  9DCA
25639  9DCB
25640  9DCC
25641  9DCD
25642  9DCE
25643  9DCF
25644  9DD0
25645  9DD1
25646  9DD2
25647  9DD3
25648  9DD4
25649  9DD5
25650  9DD6
25651  9DD7
25652  9DD8
25653  9DD9
25654  9DDA
25655  9DDB
25656  9DDC
25657  9DDD
25658  9DDE
25659  9DDF
25660  9DE0
25661  9DE1
25662  9DE2
25663  9DE3
25664  9DE4
25665  9DE5
25666  9DE6
25667  9DE7
25668  9DE8
25669  9DE9
25670  9DEA
25671  9DEB
25672  9DEC
25673  9DED
25674  9DEE
25675  9DEF
25676  9DF0
25677  9DF1
25678  9DF2
25679  9DF3
25680  9DF4
25681  9DF5
25682  9DF6
25683  9DF7
25684  9DF8
25685  9DF9
25686  9DFA
25687  9DFB
25688  9DFC
25689  9DFD
25690  9DFE
25691  9DFF
25692  9E00
25693  9E01
25694  9E02
25695  9E03
25696  9E04
25697  9E05
25698  9E06
25699  9E07
25700  9E08
25701  9E09
25702  9E0A
25703  9E0B
25704  9E0C
25705  9E0D
25706  9E0E
25707  9E0F
25708  9E10
25709  9E11
25710  9E12
25711  9E13
25712  9E14
25713  9E15
25714  9E16
25715  9E17
25716  9E18
25717  9E19
25718  9E1A
25719  9E1B
25720  9E1C
25721  9E1D
25722  9E1E
25723  9E1F
25724  9E20
25725  9E21
25726  9E22
25727  9E23
25728  9E24
25729  9E25
25730  9E26
25731  9E27
25732  9E28
25733  9E29
25734  9E2A
25735  9E2B
25736  9E2C
25737  9E2D
25738  9E2E
25739  9E2F
25740  9E30
25741  9E31
25742  9E32
25743  9E33
25744  9E34
25745  9E35
25746  9E36
25747  9E37
25748  9E38
25749  9E39
25750  9E3A
25751  9E3B
25752  9E3C
25753  9E3D
25754  9E3E
25755  9E3F
25756  9E40
25757  9E41
25758  9E42
25759  9E43
25760  9E44
25761  9E45
25762  9E46
25763  9E47
25764  9E48
25765  9E49
25766  9E4A
25767  9E4B
25768  9E4C
25769  9E4D
25770  9E4E
25771  9E4F
25772  9E50
25773  9E51
25774  9E52
25775  9E53
25776  9E54
25777  9E55
25778  9E56
25779  9E57
25780  9E58
25781  9E59
25782  9E5A
25783  9E5B
25784  9E5C
25785  9E5D
25786  9E5E
25787  9E5F
25788  9E60
25789  9E61
25790  9E62
25791  9E63
25792  9E64
25793  9E65
25794  9E66
25795  9E67
25796  9E68
25797  9E69
25798  9E6A
25799  9E6B
25800  9E6C
25801  9E6D
25802  9E6E
25803  9E6F
25804  9E70
25805  9E71
25806  9E72
25807  9E73
25808  9E74
25809  9E75
25810  9E76
25811  9E77
25812  9E78
25813  9E79
25814  9E7A
25815  9E7B
25816  9E7C
25817  9E7D
25818  9E7E
25819  9E7F
25820  9E80
25821  9E81
25822  9E82
25823  9E83
25824  9E84
25825  9E85
25826  9E86
25827  9E87
25828  9E88
25829  9E89
25830  9E8A
25831  9E8B
25832  9E8C
25833  9E8D
25834  9E8E
25835  9E8F
25836  9E90
25837  9E91
25838  9E92
25839  9E93
25840  9E94
25841  9E95
25842  9E96
25843  9E97
25844  9E98
25845  9E99
25846  9E9A
25847  9E9B
25848  9E9C
25849  9E9D
25850  9E9E
25851  9E9F
25852  9EA0
25853  9EA1
25854  9EA2
25855  9EA3
25856  9EA4
25857  9EA5
25858  9EA6
25859  9EA7
25860  9EA8
25861  9EA9
25862  9EAA
25863  9EAB
25864  9EAC
25865  9EAD
25866  9EAE
25867  9EAF
25868  9EB0
25869  9EB1
25870  9EB2
25871  9EB3
25872  9EB4
25873  9EB5
25874  9EB6
25875  9EB7
25876  9EB8
25877  9EB9
25878  9EBA
25879  9EBB
25880  9EBC
25881  9EBD
25882  9EBE
25883  9EBF
25884  9EC0
25885  9EC1
25886  9EC2
25887  9EC3
25888  9EC4
25889  9EC5
25890  9EC6
25891  9EC7
25892  9EC8
25893  9EC9
25894  9ECA
25895  9ECB
25896  9ECC
25897  9ECD
25898  9ECE
25899  9ECF
25900  9ED0
25901  9ED1
25902  9ED2
25903  9ED3
25904  9ED4
25905  9ED5
25906  9ED6
25907  9ED7
25908  9ED8
25909  9ED9
25910  9EDA
25911  9EDB
25912  9EDC
25913  9EDD
25914  9EDE
25915  9EDF
25916  9EE0
25917  9EE1
25918  9EE2
25919  9EE3
25920  9EE4
25921  9EE5
25922  9EE6
25923  9EE7
25924  9EE8
25925  9EE9
25926  9EEA
25927  9EEB
25928  9EEC
25929  9EED
25930  9EEE
25931  9EEF
25932  9EF0
25933  9EF1
25934  9EF2
25935  9EF3
25936  9EF4
25937  9EF5
25938  9EF6
25939  9EF7
25940  9EF8
25941  9EF9
25942  9EFA
25943  9EFB
25944  9EFC
25945  9EFD
25946  9EFE
25947  9EFF
25948  9F00
25949  9F01
25950  9F02
25951  9F03
25952  9F04
25953  9F05
25954  9F06
25955  9F07
25956  9F08
25957  9F09
25958  9F0A
25959  9F0B
25960  9F0C
25961  9F0D
25962  9F0E
25963  9F0F
25964  9F10
25965  9F11
25966  9F12
25967  9F13
25968  9F14
25969  9F15
25970  9F16
25971  9F17
25972  9F18
25973  9F19
25974  9F1A
25975  9F1B
25976  9F1C
25977  9F1D
25978  9F1E
25979  9F1F
25980  9F20
25981  9F21
25982  9F22
25983  9F23
25984  9F24
25985  9F25
25986  9F26
25987  9F27
25988  9F28
25989  9F29
25990  9F2A
25991  9F2B
25992  9F2C
25993  9F2D
25994  9F2E
25995  9F2F
25996  9F30
25997  9F31
25998  9F32
25999  9F33
26000  9F34
26001  9F35
26002  9F36
26003  9F37
26004  9F38
26005  9F39
26006  9F3A
26007  9F3B
26008  9F3C
26009  9F3D
26010  9F3E
26011  9F3F
26012  9F40
26013  9F41
26014  9F42
26015  9F43
26016  9F44
26017  9F45
26018  9F46
26019  9F47
26020  9F48
26021  9F49
26022  9F4A
26023  9F4B
26024  9F4C
26025  9F4D
26026  9F4E
26027  9F4F
26028  9F50
26029  9F51
26030  9F52
26031  9F53
26032  9F54
26033  9F55
26034  9F56
26035  9F57
26036  9F58
26037  9F59
26038  9F5A
26039  9F5B
26040  9F5C
26041  9F5D
26042  9F5E
26043  9F5F
26044  9F60
26045  9F61
26046  9F62
26047  9F63
26048  9F64
26049  9F65
26050  9F66
26051  9F67
26052  9F68
26053  9F69
26054  9F6A
26055  9F6B
26056  9F6C
26057  9F6D
26058  9F6E
26059  9F6F
26060  9F70
26061  9F71
26062  9F72
26063  9F73
26064  9F74
26065  9F75
26066  9F76
26067  9F77
26068  9F78
26069  9F79
26070  9F7A
26071  9F7B
26072  9F7C
26073  9F7D
26074  9F7E
26075  9F7F
26076  9F80
26077  9F81
26078  9F82
26079  9F83
26080  9F84
26081  9F85
26082  9F86
26083  9F87
26084  9F88
26085  9F89
26086  9F8A
26087  9F8B
26088  9F8C
26089  9F8D
26090  9F8E
26091  9F8F
26092  9F90
26093  9F91
26094  9F92
26095  9F93
26096  9F94
26097  9F95
26098  9F96
26099  9F97
26100  9F98
26101  9F99
26102  9F9A
26103  9F9B
26104  9F9C
26105  9F9D
26106  9F9E
26107  9F9F
26108  9FA0
26109  9FA1
26110  9FA2
26111  9FA3
26112  9FA4
26113  9FA5
26114  9FA6
26115  9FA7
26116  9FA8
26117  9FA9
26118  9FAA
26119  9FAB
26120  9FAC
26121  9FAD
26122  9FAE
26123  9FAF
26124  9FB0
26125  9FB1
26126  9FB2
26127  9FB3
26128  9FB4
26129  9FB5
26130  9FB6
26131  9FB7
26132  9FB8
26133  9FB9
26134  9FBA
26135  9FBB
26136  9FBC
26137  9FBD
26138  9FBE
26139  9FBF
26140  9FC0
26141  9FC1
26142  9FC2
26143  9FC3
26144  9FC4
26145  9FC5
026146  001017        
026147  001018  var hFonts[56] ;
026148  001019  var stringsCV[56] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
26149  5056
26150  5057
26151  5058
26152  5059
26153  505A
26154  505B
26155  505C
26156  505D
26157  505E
26158  505F
26159  5060
26160  5061
26161  5062
26162  5063
26163  5064
26164  5065
26165  5066
26166  5067
26167  5068
26168  5069
26169  506A
26170  506B
26171  506C
26172  506D
26173  506E
26174  506F
26175  5070
26176  5071
26177  5072
26178  5073
26179  5074
26180  5075
26181  5076
26182  5077
26183  5078
26184  5079
26185  507A
26186  507B
26187  507C
26188  507D
26189  507E
26190  507F
26191  5080
26192  5081
26193  5082
26194  5083
26195  5084
26196  5085
26197  5086
26198  5087
26199  5088
26200  5089
26201  508A
26202  508B
26203  508C
26204  508D
26205  508E
26206  508F
26207  5090
26208  5091
26209  5092
26210  5093
26211  5094
26212  5095
26213  5096
26214  5097
26215  5098
26216  5099
26217  509A
26218  509B
26219  509C
26220  509D
26221  509E
26222  509F
26223  50A0
26224  50A1
26225  50A2
26226  50A3
26227  50A4
26228  50A5
26229  50A6
26230  50A7
26231  50A8
26232  50A9
26233  50AA
26234  50AB
26235  50AC
26236  50AD
26237  50AE
26238  50AF
26239  50B0
26240  50B1
26241  50B2
26242  50B3
26243  50B4
26244  50B5
26245  50B6
26246  50B7
26247  50B8
26248  50B9
26249  50BA
26250  50BB
26251  50BC
26252  50BD
26253  50BE
26254  50BF
26255  50C0
26256  50C1
26257  50C2
26258  50C3
26259  50C4
26260  50C5
026261  001020  // Start P2.inc
026262  001021  var oObjects[MaxTotObjects+1] ;                 // address of objects
026263  001022  var CurrentForm, oldn, ImageTouched ;
026264  001023  var TouchXpos, TouchYpos ;
026265  001024  var InputType, TouchState, CurInputData, pInputIndex ;
026266  001025  var comRX[40], cmd[CMDLenMAX] ;
026267  001026        
026268  001027  var InputCS, OutputCS ;
026269  001028        
026270  001029        
026271  001030        
026272  001031  func seroutCS(var op)
026273  001032      serout(op) ;
026274  001033      OutputCS ^= op ;
026275  001034  endfunc
026276  001035        
026277  001036  func nak0()
026278  001037      serout(NAK) ;
026279  001038      InputCS := 0 ;
026280  001039  endfunc
026281  001040        
026282  001041  func seroutOcs()
026283  001042      serout(OutputCS) ;
026284  001043      OutputCS := 0 ;
026285  001044  endfunc
026286  001045        
026287  001046  func SendReport(var id, var objt, var objn, var val)
026288  001047      seroutCS(id) ;
026289  001048      seroutCS(objt) ;
026290  001049      seroutCS(objn) ;
026291  001050      seroutCS(val >> 8) ; // first 8 bits
026292  001051      seroutCS(val) ;
026293  001052      seroutOcs() ;
026294  001053  endfunc
026295  001054        
026296  001055  func TMul(var p1, var p2, var p3)
026297  001056      var var32[2], var322[2] ;
026298  001057      umul_1616(var32, p1, *(CurInputData+p2)) ;
026299  001058      umul_1616(var322, var32[1], *(CurInputData+p3)) ;
026300  001059      umul_1616(var32, var32[0], *(CurInputData+p3)) ;
026301  001060      return(var32[1] + var322[0]) ;
026302  001061  endfunc
026303  001062        
026304  001063  func ReadObject(var ObjectType, var ObjectIdx)
026305  001064      var j, k, Objects ;
026306  001065      Objects := *(oObjects+ObjectType) ;
026307  001066        
026308  001067      j := 2 + ObjectIdx * 2 + Objects ;
026309  001068       if (ObjectType == tForm)
026310  001069          k := CurrentForm ;
026311  001070      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
026312  001071          k := img_GetWord(hndl, *j, IMAGE_TAG2);
026313  001072      else if (ObjectType == tStrings)
026314  001073          k := stringsCV[ObjectIdx];
026315  001074          else
026316  001075          k := img_GetWord(hndl, *j, IMAGE_INDEX);
026317  001076          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
026318  001077                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
026319  001078      endif
026320  001079      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
026321  001080  endfunc
026322  001081        
026323  001082        
026324  001083  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
026325  001084      var i, j, k, Objects ;
026326  001085      ObjectType &= 0x3f ;
026327  001086      if (ObjectType == tForm)
026328  001087          ActivateForm(ObjectIdx) ;
026329  001088      else
026330  001089          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
026331  001090          i := *(Objects) ;
026332  001091          switch (ObjectType)
026333  001092              case tUserButton :
026334  001093                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
026335  001094                  break ;
026336  001095              case t4Dbutton :
026337  001096                  j := InputControls[o4Dbuttons[ObjectIdx+1]] ;
026338  001097                  break ;
026339  001098              default : j := -1 ;
026340  001099          endswitch
026341  001100          if (j != -1)
026342  001101              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
026343  001102              if (   (k == -1)                    // currently disabled
026344  001103                  && (NewVal != -1) )             // and don't want it disabled
026345  001104                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);    // enable touch
026346  001105              else if (   (k != -1)               // currently enabled
026347  001106                       && (NewVal == -1) )        // and want it disabled
026348  001107                  img_SetWord(hndl, i, IMAGE_INDEX, 0xffff) ;       // make invisible
026349  001108                  img_SetAttributes(hndl, i, I_TOUCH_DISABLE);      // and disable touch
026350  001109                  if (FormBGcolors[CurrentForm] != ColorBGimage)
026351  001110                      gfx_RectangleFilled(img_GetWord(hndl, i, IMAGE_XPOS), img_GetWord(hndl, i, IMAGE_YPOS),
026352  001111                                          img_GetWord(hndl, i, IMAGE_XPOS) + img_GetWord(hndl, i, IMAGE_WIDTH),
026353  001112                                          img_GetWord(hndl, i, IMAGE_YPOS) + img_GetWord(hndl, i, IMAGE_HEIGHT), FormBGcolors[CurrentForm]);
026354  001113                  else
026355  001114                      gfx_ClipWindow(img_GetWord(hndl, i, IMAGE_XPOS), img_GetWord(hndl, i, IMAGE_YPOS),
026356  001115                                     img_GetWord(hndl, i, IMAGE_XPOS) + img_GetWord(hndl, i, IMAGE_WIDTH),
026357  001116                                     img_GetWord(hndl, i, IMAGE_YPOS) + img_GetWord(hndl, i, IMAGE_HEIGHT)) ;
026358  001117                      gfx_Clipping(ON) ;
026359  001118                      img_Show(hndl,FormStartIndex[CurrentForm]) ;
026360  001119                      gfx_Clipping(OFF) ;
026361  001120                  endif
026362  001121                  return ;
026363  001122              else
026364  001123              NewVal := NewVal << 1 ;
026365  001124              if (OVF())      // button group index change
026366  001125                  if (*(j+InputData+Ofs_IPD_P1))
026367  001126                      k &= 1 ;    // mask off old group index for momentary
026368  001127                  else
026369  001128                      k &= 3 ;    // mask off old group index for toggle
026370  001129                  endif
026371  001130              else            // normal set
026372  001131                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
026373  001132                  k &= 0xfffc ;    // retain only group index for state set
026374  001133              endif
026375  001134              NewVal |= k ;
026376  001135              endif
026377  001136          endif
026378  001137           if (ObjectType == tCustomdigits)
026379  001138              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
026380  001139              ledDigitsDisplay(i, oCustomdigitss, oCustomDigitsn) ;
026381  001140          else if (ObjectType == tStrings)
026382  001141              PrintStrings(ObjectIdx, NewVal, 0);
026383  001142          else
026384  001143              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
026385  001144              img_Show(hndl, i) ; // will only display if form is current
026386  001145          endif
026387  001146      endif
026388  001147  endfunc
026389  001148        
026390  001149  func TurnOffButtons(var group)
026391  001150      var j, k, l;
026392  001151      for (j := 0; j < nInputs; j++)
026393  001152          k := j*IPDatasize ;
026394  001153          if (*(InputData+k+Ofs_IPD_P2) == group)
026395  001154              l := -1 ;
026396  001155               if (*(InputData+k) == t4Dbutton)
026397  001156                  l := o4Dbuttons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
026398  001157                  if (img_GetWord(hndl, l, IMAGE_INDEX) != 0xffff)
026399  001158                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
026400  001159                  img_Show(hndl, l);      // only shows on current form
026401  001160                  endif
026402  001161              else if (*(InputData+k) == tUserButton)
026403  001162                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
026404  001163                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
026405  001164                  img_Show(hndl, l);      // only shows on current form
026406  001165              endif
026407  001166          endif
026408  001167      next
026409  001168  endfunc
026410  001169        
026411  001170        
026412  001171  // WARNING, this code will crash if newval exceeds maximum displayable number
026413  001172  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
026414  001173      var i, j, m, left, lstb, nv, newval, digita[7] ; // 7 is enough for -32768, the 0th digit is not used
026415  001174      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
026416  001175      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
026417  001176      i := -1 ;
026418  001177      j := *(typeptr) ;
026419  001178      repeat
026420  001179          typeptr += 2 ;
026421  001180          i++ ;
026422  001181          until (*(typeptr) == imgidx);
026423  001182      j := setptr + i*10 ;
026424  001183      left := *(j+Ofs_Digits_Left) ;
026425  001184      imgidx++ ;
026426  001185        
026427  001186      nv := newval ;
026428  001187      lstb := 1 ;
026429  001188      for (i := *(j+Ofs_Digits_Digits); i > 0; i--)
026430  001189          m := nv % 10 ;
026431  001190          if ( *(j+Ofs_Digits_LeadingBlanks) && (i <= *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
026432  001191              if (nv == 0)
026433  001192                  m := 10 ;
026434  001193                  if (lstb == 1) lstb := i ;
026435  001194              endif
026436  001195          endif
026437  001196        
026438  001197          digita[i] := ABS(m) ;
026439  001198          nv /= 10 ;
026440  001199      next
026441  001200      if (newval < 0)
026442  001201          digita[lstb] := 11 ;
026443  001202      endif
026444  001203      for (i := 1; i <= *(j+Ofs_Digits_Digits); i++)
026445  001204          img_SetWord(hndl, imgidx, IMAGE_INDEX, digita[i]);
026446  001205          img_SetWord(hndl, imgidx, IMAGE_XPOS, left) ;
026447  001206          img_Show(hndl, imgidx);
026448  001207          left += *(j+Ofs_Digits_Widthdigit) ;
026449  001208      next
026450  001209  endfunc
026451  001210        
026452  001211        
026453  001212  func ActivateForm(var newform)
026454  001213      var i, j, *p ;
026455  001214        
026456  001215      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
026457  001216          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
026458  001217              if (img_GetWord(hndl, i, IMAGE_TAG))
026459  001218                  img_Disable(hndl,i) ;
026460  001219              endif
026461  001220          next
026462  001221      endif
026463  001222      CurrentForm := newform ;
026464  001223      // display newform image or clear to image color
026465  001224      if (FormBGcolors[CurrentForm] != ColorBGimage)
026466  001225          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
026467  001226          gfx_Cls() ;
026468  001227          DoGFXObjects() ;                                    // display GFX 'widgets'
026469  001228      endif
026470  001229        
026471  001230      // enable inputs
026472  001231      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
026473  001232          j := img_GetWord(hndl, i, IMAGE_TAG) ;
026474  001233          if (j)
026475  001234              j-- ;
026476  001235              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
026477  001236              //if (j != tKeyboard)
026478  001237              if (img_GetWord(hndl, i, IMAGE_INDEX) != 0xffff)
026479  001238              if (((j <= tWinButton) || (j >= t4Dbutton)) && (j != tSmartGauge) )               // enable inputs
026480  001239                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
026481  001240              endif
026482  001241              img_Show(hndl,i) ; // show initialy, if required
026483  001242              endif
026484  001243              if (j == tForm)
026485  001244                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
026486  001245              else if (j == tCustomdigits)
026487  001246                  ledDigitsDisplay(i, oCustomdigitss, oCustomDigitsn) ;
026488  001247              endif
026489  001248          endif
026490  001249      next
026491  001250      for (i := 0; i < nStrings; i++)
026492  001251          if (stringsCV[i] != -1)
026493  001252              WriteObject(tStrings, i, stringsCV[i]) ;
026494  001253          endif
026495  001254      next
026496  001255        
026497  001256  endfunc
026498  001257        
026499  001258  func UpdateObjects(var newval)
026500  001259      var IPidx, otherOBJ ;
026501  001260      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
026502  001261        
026503  001262          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
026504  001263              img_Show(hndl, *(pInputIndex));      // only shows on current form
026505  001264          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
026506  001265              if (*(CurInputData+Ofs_IPD_P1))
026507  001266                  newval &= 1;
026508  001267              else
026509  001268                  newval &= 3;
026510  001269              endif
026511  001270              if (newval > 1) newval := 1;
026512  001271          endif
026513  001272          IPidx := *(CurInputData+TouchState) ;
026514  001273          while(IPidx != 0)
026515  001274              otherOBJ := IPidx + InputData;
026516  001275              if (*(otherOBJ) == OT_REPORT)
026517  001276          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
026518  001277              else if (*(otherOBJ) == OT_MAGIC)
026519  001278                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
026520  001279                  IPidx(newval) ;
026521  001280              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
026522  001281                  if (*(otherOBJ) == OT_ACTIVATE)
026523  001282                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
026524  001283                      InputType := tForm ;
026525  001284                  else if (*(otherOBJ) == OT_SETCONST)
026526  001285                      newval := *(otherOBJ+Ofs_IPD_P3) ;
026527  001286                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
026528  001287                  else if (*(otherOBJ) == OT_SETANOTHER)
026529  001288                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
026530  001289                  else if (*(otherOBJ) == OT_PREVFRAME)
026531  001290                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
026532  001291                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
026533  001292                      endif
026534  001293                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
026535  001294                  else if (*(otherOBJ) == OT_NEXTFRAME)
026536  001295                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
026537  001296                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
026538  001297                      endif
026539  001298                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
026540  001299                  else if (*(otherOBJ) == OT_PREVSTRING)
026541  001300                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
026542  001301                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
026543  001302                      endif
026544  001303                  else if (*(otherOBJ) == OT_NEXTSTRING)
026545  001304                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
026546  001305                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
026547  001306                      endif
026548  001307                  endif
026549  001308              endif
026550  001309              IPidx := *(otherOBJ+TouchState) ;
026551  001310          wend
026552  001311      endif
026553  001312  endfunc
026554  001313        
026555  001314  // End P2.inc
026556  001315  func DoGFXObjects()
026557  001316  endfunc
026558  001317        
026559  001318  // Start P3.inc
026560  001319  func main()
026561  001320      var comTX[50], cmdi, i, j, TouchStatus ;
026562  001321        
026563  001322        
026564  001323      gfx_ScreenMode(LANDSCAPE) ;
026565  001324        
026566  001325      putstr("Mounting...\n");
026567  001326      if (!(file_Mount()))
026568  001327          while(!(file_Mount()))
026569  001328              putstr("Drive not mounted...");
026570  001329              pause(200);
026571  001330              gfx_Cls();
026572  001331              pause(200);
026573  001332          wend
026574  001333      endif
026575  001334  //    gfx_MoveTo(0, 0);
026576  001335  //    print(mem_Heap()," ") ;
026577  001336  //    gfx_TransparentColour(0x0020);
026578  001337  //    gfx_Transparency(ON);
026579  001338        
026580  001339      // open image control
026581  001340      hndl := file_LoadImageControl("BCN3D_~1.dat", "BCN3D_~1.gci", 1);
026582  001341        
026583  001342      // init 'constants'
026584  001343  // End P3.inc
026585  001344        
026586  001345      oObjects[tDipSwitch] := oDipSwitchs ;
026587  001346      oObjects[tKnob] := oKnobs ;
026588  001347      oObjects[tRockerSwitch] := oRockerSwitchs ;
026589  001348      oObjects[tRotarySwitch] := oRotarySwitchs ;
026590  001349      oObjects[tGSlider] := oGSliders ;
026591  001350      oObjects[tTrackbar] := oTrackbars ;
026592  001351      oObjects[tWinButton] := oWinButtons ;
026593  001352      oObjects[tAngularmeter] := oAngularmeters ;
026594  001353      oObjects[tCoolgauge] := oCoolgauges ;
026595  001354      oObjects[tCustomdigits] := oCustomdigitss ;
026596  001355      oObjects[tForm] := oForms ;
026597  001356      oObjects[tGauge] := oGauges ;
026598  001357      oObjects[tImage] := oImages ;
026599  001358      oObjects[tKeyboard] := oKeyboards ;
026600  001359      oObjects[tLed] := oLeds ;
026601  001360      oObjects[tLeddigits] := oLeddigitss ;
026602  001361      oObjects[tMeter] := oMeters ;
026603  001362      oObjects[tStrings] := oStringss ;
026604  001363      oObjects[tThermometer] := oThermometers ;
026605  001364      oObjects[tUserled] := oUserleds ;
026606  001365      oObjects[tVideo] := oVideos ;
026607  001366      oObjects[tStaticText] := oStaticTexts ;
026608  001367      oObjects[tSounds] := oSoundss ;
026609  001368      oObjects[tTimer] := oTimers ;
026610  001369      oObjects[tSpectrum] := oSpectrums ;
026611  001370      oObjects[tTank] := oTanks ;
026612  001371      oObjects[tUserImages] := oUserImagess ;
026613  001372      oObjects[tPinOutput] := oPinOutputs ;
026614  001373      oObjects[tPinInput] := oPinInputs ;
026615  001374      oObjects[t4Dbutton] := o4Dbuttons ;
026616  001375      oObjects[tAniButton] := oAniButtons ;
026617  001376      oObjects[tColorPicker] := oColorPickers ;
026618  001377      oObjects[tUserButton] := oUserButtons ;
026619  001378      oObjects[tMagicObject] := oMagicObjects ;
026620  001379      oObjects[tSmartGauge] := oSmartGauges ;
026621  001380      oObjects[tSmartSlider] := oSmartSliders ;
026622  001381      oObjects[tSmartKnob] := oSmartKnobs ;
026623  001382      hFonts[1] := file_LoadImageControl("BCN3D_~1.d02", "BCN3D_~1.g02", 1)  ;
026624  001383      hFonts[2] := file_LoadImageControl("BCN3D_~1.d07", "BCN3D_~1.g07", 1)  ;
026625  001384      hFonts[3] := file_LoadImageControl("BCN3D_~1.d01", "BCN3D_~1.g01", 1)  ;
026626  001385      hFonts[48] := file_LoadImageControl("BCN3D_~1.d0C", "BCN3D_~1.g0C", 1)  ;
026627  001386      hFonts[0] := hFonts[2] ;
026628  001387      hFonts[4] := hFonts[2] ;
026629  001388      hFonts[5] := hFonts[2] ;
026630  001389      hFonts[6] := hFonts[2] ;
026631  001390      hFonts[7] := hFonts[2] ;
026632  001391      hFonts[8] := hFonts[1] ;
026633  001392      hFonts[9] := hFonts[2] ;
026634  001393      hFonts[10] := hFonts[2] ;
026635  001394      hFonts[11] := hFonts[2] ;
026636  001395      hFonts[12] := hFonts[1] ;
026637  001396      hFonts[13] := hFonts[48] ;
026638  001397      hFonts[14] := hFonts[2] ;
026639  001398      hFonts[16] := hFonts[1] ;
026640  001399      hFonts[23] := hFonts[1] ;
026641  001400      hFonts[27] := hFonts[2] ;
026642  001401      hFonts[38] := hFonts[2] ;
026643  001402      hFonts[39] := hFonts[2] ;
026644  001403      hFonts[44] := hFonts[2] ;
026645  001404      hFonts[49] := hFonts[2] ;
026646  001405      hFonts[50] := hFonts[1] ;
026647  001406      hFonts[52] := hFonts[2] ;
026648  001407      hFonts[53] := hFonts[48] ;
026649  001408      hFonts[55] := hFonts[48] ;
026650  001409  // Start P4.inc
026651  001410      hstrings := file_Open("BCN3D_~1.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
026652  001411      // init comms
026653  001412      com_Init(comRX,CMDLenMAX,0);
026654  001413      com_SetBaud(COM0,19886);
026655  001414      com_TXbuffer(comTX, 100, 0);
026656  001415      snd_BufSize(2) ;
026657  001416      // tag 'real' objects
026658  001417      for (i := 0; i <= MaxTotObjects; i++)
026659  001418          if (   (i != tSounds)
026660  001419              && (i != tTimer)
026661  001420              && (i != tPinOutput)
026662  001421              && (i != tMagicObject)
026663  001422              && (i != tPinInput) )
026664  001423              TouchXpos := oObjects[i] ;
026665  001424              TouchYpos := *(TouchXpos) ;
026666  001425              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
026667  001426                  oldn := *(TouchXpos+ImageTouched*2) ;
026668  001427                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
026669  001428                  if (oldn != -1)
026670  001429                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
026671  001430                      img_Disable(hndl, oldn) ;
026672  001431                  endif
026673  001432              next
026674  001433          endif
026675  001434      next
026676  001435        
026677  001436      // display initial form
026678  001437      CurrentForm := -1 ;
026679  001438  // End P4.inc
026680  001439  // Start P5.inc
026681  001440      ActivateForm(0) ; // need to change this according to first actual form
026682  001441        
026683  001442  // End P5.inc
026684  001443  // Start P6.inc
026685  001444      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
026686  001445      oldn := -1 ;
026687  001446      repeat
026688  001447        
026689  001448          // check comms for command, how to NAK invalid command
026690  001449          if (com_Count() != 0)
026691  001450              i := serin() ;
026692  001451              InputCS ^= i ;               // update checksum
026693  001452              if (   (cmdi > 2)
026694  001453                  && (cmd[0] == WRITE_STRU) )
026695  001454                  j := (cmdi-1) >> 1 + 2 ;
026696  001455                  if (j == CMDLenMAX)    // max length exceeded
026697  001456                      nak0() ;
026698  001457                      cmdi := -1 ;
026699  001458                  else if (cmdi & 1)
026700  001459                      cmd[j] := i ;
026701  001460                      if (cmd[2] == 0)    // if string complete
026702  001461                          if (InputCS)
026703  001462                              nak0() ;
026704  001463                          else
026705  001464                              if (cmd[0] == WRITE_STRU)
026706  001465                              cmd[j] := 0 ;                     // terminate it
026707  001466                              PrintStrings(cmd[1], &cmd[3], 1) ;
026708  001467                              serout(ACK) ;
026709  001468                              else
026710  001469                              endif
026711  001470                          endif
026712  001471                          cmdi := -1 ;
026713  001472                      endif
026714  001473                  else
026715  001474                      cmd[j] := cmd[j] << 8 + i ;
026716  001475                      cmd[2]-- ;          // dec length
026717  001476                  endif
026718  001477                  cmdi++ ;
026719  001478              else // not unicode string
026720  001479                  cmd[cmdi++] := i ;
026721  001480                   if (cmd[0] == WRITE_STR)                  // Ansi String
026722  001481                      if (cmdi == CMDLenMAX)      // max length exceeded
026723  001482                          nak0() ;
026724  001483                          cmdi := 0 ;
026725  001484                      else if (cmdi > 2)
026726  001485                          if (cmd[2] == -1)
026727  001486                              if (InputCS)
026728  001487                                  nak0() ;
026729  001488                              else
026730  001489                                  if (cmd[0] == WRITE_STR)
026731  001490                                  cmd[cmdi-1] := 0 ;                     // terminate it
026732  001491                                  PrintStrings(cmd[1], &cmd[3], 1) ;
026733  001492                                  serout(ACK) ;
026734  001493                                  else
026735  001494                                  endif
026736  001495                              endif
026737  001496                              cmdi := 0 ;
026738  001497                          else
026739  001498                              cmd[2]-- ;          // dec length
026740  001499                          endif
026741  001500                      endif
026742  001501                  else if (   (cmd[0] == READ_OBJ)
026743  001502                           && (cmdi == 4)         )
026744  001503                      if (InputCS)
026745  001504                          nak0() ;
026746  001505                      else
026747  001506                          ReadObject(cmd[1], cmd[2]) ;
026748  001507                      endif
026749  001508                      cmdi := 0 ;
026750  001509                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
026751  001510                           && (cmdi == 6)          )
026752  001511                      if (InputCS)
026753  001512                          nak0() ;
026754  001513                      else
026755  001514                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
026756  001515                          serout(ACK) ;
026757  001516                      endif
026758  001517                      cmdi := 0 ;
026759  001518                  else if (   (cmd[0] == WRITE_CONTRAST)
026760  001519                           && (cmdi == 3)         )
026761  001520                      if (InputCS)
026762  001521                          nak0() ;
026763  001522                      else
026764  001523                          gfx_Contrast(cmd[1]) ;
026765  001524                          serout(ACK) ;
026766  001525                      endif
026767  001526                      cmdi := 0 ;
026768  001527                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
026769  001528                      nak0() ;
026770  001529                      cmdi := 0 ;
026771  001530                  endif
026772  001531              endif   // not unicode string
026773  001532          endif   // a character is available
026774  001533        
026775  001534        
026776  001535      // touch code processing
026777  001536        
026778  001537          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
026779  001538          ImageTouched := img_Touched(hndl,-1) ;
026780  001539          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
026781  001540              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
026782  001541                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
026783  001542              endif
026784  001543              if (TouchStatus != TOUCH_RELEASED)        // if not released
026785  001544                  if (oldn != -1)
026786  001545                      ImageTouched := oldn ;
026787  001546                  else
026788  001547                      if (oldn != ImageTouched)
026789  001548                  oldn := ImageTouched ;
026790  001549                          TouchStatus := TOUCH_PRESSED ;
026791  001550                      endif
026792  001551                  endif
026793  001552                  TouchXpos  := touch_Get(TOUCH_GETX);
026794  001553                  TouchYpos  := touch_Get(TOUCH_GETY);
026795  001554                  TouchState := Ofs_IPD_DOWN ;
026796  001555              else
026797  001556                  ImageTouched := oldn ;                     // simulate release of what we touched
026798  001557                  oldn := -1 ;                    // prevent double release
026799  001558                  TouchState := Ofs_IPD_RELEASE ;
026800  001559              endif
026801  001560              if (ImageTouched != -1)
026802  001561                          CurInputData := InputControls[ImageTouched] + InputData;
026803  001562                          InputType := *(CurInputData) ;
026804  001563                          if (InputType == tSmartSlider)
026805  001564                              i := tTrackbar ; // GSlider ;
026806  001565                          else if (InputType == tSmartKnob)
026807  001566                              i := tKnob ;
026808  001567                          else if (InputType >= t4Dbutton) 
026809  001568                              i := InputType - 23 ; // adjust to ensure next in gosub
026810  001569                          else 
026811  001570                              i := InputType ;
026812  001571                          endif
026813  001572                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
026814  001573              endif
026815  001574          endif
026816  001575   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
026817  001576        
026818  001577          sys_EventsResume() ;
026819  001578      forever
026820  001579        
026821  001580  cDipswitch:
026822  001581        
026823  001582  cKnob:
026824  001583        
026825  001584  cRockerswitch:
026826  001585        
026827  001586  cRotaryswitch:
026828  001587        
026829  001588  cSlider:
026830  001589  cTrackbar:
026831  001590      if (*(CurInputData+Ofs_IPD_P1))
026832  001591          i := TouchXpos - *(CurInputData+Ofs_IPD_P2) ;
026833  001592          if (i < 0)
026834  001593              i := 0 ;
026835  001594          else if (i > *(CurInputData+Ofs_IPD_P3))        // height/width - 17)
026836  001595              i := *(CurInputData+Ofs_IPD_P4) ;           // maxvalue-minvalue
026837  001596          else
026838  001597  //            i := *(input+IPD_P4) * i / *(input+IPD_P3) ;    // max-min - (max-min) * posn / (height-17)
026839  001598              i := TMul(i, Ofs_IPD_P4, Ofs_IPD_P5) ;    // max-min - (max-min) * posn / (height-17)
026840  001599          endif
026841  001600      else
026842  001601          i := TouchYpos - *(CurInputData+Ofs_IPD_P2) ;
026843  001602          if (i < 0)
026844  001603              i := *(CurInputData+Ofs_IPD_P4) ;           // maxvalue-minvalue
026845  001604          else if (i > *(CurInputData+Ofs_IPD_P3))        // height/width - 17)
026846  001605              i := 0 ;
026847  001606          else
026848  001607  //            i := *(input+IPD_P4) - *(input+IPD_P4) * i / *(input+IPD_P3) ;    // max-min - (max-min) * posn / (height-17)
026849  001608              i := *(CurInputData+Ofs_IPD_P4) - TMul(i, Ofs_IPD_P4, Ofs_IPD_P5) ;    // max-min - (max-min) * posn / (height-17)
026850  001609          endif
026851  001610      endif
026852  001611      if (InputType == tGSlider)
026853  001612          pInputIndex := oGSliders ;
026854  001613      else if (InputType == tSmartSlider)
026855  001614          pInputIndex := oSmartSliders ;
026856  001615      else
026857  001616          pInputIndex := oTrackbars ;
026858  001617      endif
026859  001618      pInputIndex += *(CurInputData+Ofs_IPD_OBJVIDX) ;
026860  001619      UpdateObjects(i) ;
026861  001620  endsub ;
026862  001621        
026863  001622  c4DButton:
026864  001623      pInputIndex := o4Dbuttons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
026865  001624      goto gbutton ;
026866  001625  cUserButton:
026867  001626      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
026868  001627      goto gbutton ;
026869  001628  cWinbutton:
026870  001629  gbutton:
026871  001630      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
026872  001631      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
026873  001632          if (TouchStatus == TOUCH_RELEASED)
026874  001633              i &= 0xfffe ;
026875  001634              TouchState == Ofs_IPD_DOWN ;
026876  001635          else
026877  001636              i |= 1 ;
026878  001637              TouchState == Ofs_IPD_RELEASE ;
026879  001638          endif
026880  001639      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
026881  001640          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
026882  001641              if ((i & 3) == 3)
026883  001642                  i &= 0xfffc ;
026884  001643              else
026885  001644                  i++ ;
026886  001645              endif
026887  001646          else
026888  001647              i |= 1 ;                                      // make down regardless of current state
026889  001648          endif
026890  001649      else                        // group action, up all other buttons on touch press, reports 0 for button down
026891  001650          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
026892  001651              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
026893  001652          endif
026894  001653          i := (i & 0xfffc) | 2 ;
026895  001654      endif
026896  001655        
026897  001656      UpdateObjects(i) ;
026898  001657  endsub ;
026899  001658        
026900  001659  cAniButton:
026901  001660        
026902  001661  cColorPicker:
026903  001662        
026904  001663  endfunc
026905  001664  // End P6.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 1279 file:BCN3D_SIGMA.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 1213 file:BCN3D_SIGMA.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved87                        -570  0xfffffdc6 (PmmC func) args[0] r=0  (not used)
__reserved88                        -571  0xfffffdc5 (PmmC func) args[0] r=0  (not used)
__reserved89                        -572  0xfffffdc4 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (usage 3)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       23528  0x00005be8 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 33)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BREAK                              65533  0x0000fffd (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS    2806  0x00000af6 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  402  0x00000192 (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 372)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_InitBrk                        -578  0xfffffdbe (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferBrk                    -574  0xfffffdc2 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_InitBrk                        -579  0xfffffdbd (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferBrk                    -575  0xfffffdc1 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_InitBrk                        -580  0xfffffdbc (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferBrk                    -576  0xfffffdc0 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_InitBrk                         -577  0xfffffdbf (PmmC func) args[3] r=0  (not used)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferBrk                     -573  0xfffffdc3 (PmmC func) args[3] r=0  (not used)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                322  0x00000142 (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         318  0x0000013e (mem) word (global)  (usage 63)
CurrentForm                          304  0x00000130 (mem) word (global)  (usage 51)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (not used)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       22896  0x00005970 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 15)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (usage 3)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (not used)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                       19337  0x00004b89FormBGcolors                       19337  0x00004b89 (mem) word[122] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 14)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                         251  0x000000fbFormEndIndex                         251  0x000000fb (mem) word[122] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[122] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 10)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (usage 2)
Gen4_ULCD_35DCT_CLB_DIABLO16_GFX       0  0x00000000 (const ??? 0)  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 12)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 6)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 9)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[56] (global)  (usage 153)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 168)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             226  0x000000e2 (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
i4Dbutton0                           201  0x000000c9 (const ??? 0)  (usage 3)
i4Dbutton1                           202  0x000000ca (const ??? 0)  (usage 3)
i4Dbutton10                          624  0x00000270 (const ??? 0)  (usage 3)
i4Dbutton100                         703  0x000002bf (const ??? 0)  (usage 3)
i4Dbutton11                          208  0x000000d0 (const ??? 0)  (usage 3)
i4Dbutton12                          599  0x00000257 (const ??? 0)  (usage 3)
i4Dbutton13                          203  0x000000cb (const ??? 0)  (usage 3)
i4Dbutton14                          241  0x000000f1 (const ??? 0)  (usage 3)
i4Dbutton15                          329  0x00000149 (const ??? 0)  (usage 3)
i4Dbutton16                          228  0x000000e4 (const ??? 0)  (usage 3)
i4Dbutton17                          633  0x00000279 (const ??? 0)  (usage 3)
i4Dbutton18                          638  0x0000027e (const ??? 0)  (usage 3)
i4Dbutton19                          639  0x0000027f (const ??? 0)  (usage 3)
i4Dbutton2                           206  0x000000ce (const ??? 0)  (usage 3)
i4Dbutton20                          641  0x00000281 (const ??? 0)  (usage 3)
i4Dbutton21                          642  0x00000282 (const ??? 0)  (usage 3)
i4Dbutton22                          652  0x0000028c (const ??? 0)  (usage 3)
i4Dbutton23                          653  0x0000028d (const ??? 0)  (usage 3)
i4Dbutton24                          626  0x00000272 (const ??? 0)  (usage 3)
i4Dbutton25                          627  0x00000273 (const ??? 0)  (usage 3)
i4Dbutton26                          558  0x0000022e (const ??? 0)  (usage 3)
i4Dbutton27                          559  0x0000022f (const ??? 0)  (usage 3)
i4Dbutton28                          674  0x000002a2 (const ??? 0)  (usage 3)
i4Dbutton29                          675  0x000002a3 (const ??? 0)  (usage 3)
i4Dbutton3                           207  0x000000cf (const ??? 0)  (usage 3)
i4Dbutton30                          676  0x000002a4 (const ??? 0)  (usage 3)
i4Dbutton31                          677  0x000002a5 (const ??? 0)  (usage 3)
i4Dbutton32                          678  0x000002a6 (const ??? 0)  (usage 3)
i4Dbutton33                          673  0x000002a1 (const ??? 0)  (usage 3)
i4Dbutton34                          226  0x000000e2 (const ??? 0)  (usage 3)
i4Dbutton35                          327  0x00000147 (const ??? 0)  (usage 3)
i4Dbutton36                          262  0x00000106 (const ??? 0)  (usage 3)
i4Dbutton37                          267  0x0000010b (const ??? 0)  (usage 3)
i4Dbutton38                          268  0x0000010c (const ??? 0)  (usage 3)
i4Dbutton39                           16  0x00000010 (const ??? 0)  (usage 3)
i4Dbutton4                           608  0x00000260 (const ??? 0)  (usage 3)
i4Dbutton40                          561  0x00000231 (const ??? 0)  (usage 3)
i4Dbutton41                          562  0x00000232 (const ??? 0)  (usage 3)
i4Dbutton42                          145  0x00000091 (const ??? 0)  (usage 3)
i4Dbutton43                          279  0x00000117 (const ??? 0)  (usage 3)
i4Dbutton44                          294  0x00000126 (const ??? 0)  (usage 3)
i4Dbutton45                           72  0x00000048 (const ??? 0)  (usage 3)
i4Dbutton46                          669  0x0000029d (const ??? 0)  (usage 3)
i4Dbutton47                          373  0x00000175 (const ??? 0)  (usage 3)
i4Dbutton48                           82  0x00000052 (const ??? 0)  (usage 3)
i4Dbutton49                          382  0x0000017e (const ??? 0)  (usage 3)
i4Dbutton5                           613  0x00000265 (const ??? 0)  (usage 3)
i4Dbutton50                          384  0x00000180 (const ??? 0)  (usage 3)
i4Dbutton51                          398  0x0000018e (const ??? 0)  (usage 3)
i4Dbutton52                          440  0x000001b8 (const ??? 0)  (usage 3)
i4Dbutton53                          672  0x000002a0 (const ??? 0)  (usage 3)
i4Dbutton54                          507  0x000001fb (const ??? 0)  (usage 3)
i4Dbutton55                          679  0x000002a7 (const ??? 0)  (usage 3)
i4Dbutton56                          680  0x000002a8 (const ??? 0)  (usage 3)
i4Dbutton57                          284  0x0000011c (const ??? 0)  (usage 3)
i4Dbutton58                          280  0x00000118 (const ??? 0)  (usage 3)
i4Dbutton59                          295  0x00000127 (const ??? 0)  (usage 3)
i4Dbutton6                           622  0x0000026e (const ??? 0)  (usage 3)
i4Dbutton60                          197  0x000000c5 (const ??? 0)  (usage 3)
i4Dbutton61                          239  0x000000ef (const ??? 0)  (usage 3)
i4Dbutton62                          487  0x000001e7 (const ??? 0)  (usage 3)
i4Dbutton63                          374  0x00000176 (const ??? 0)  (usage 3)
i4Dbutton64                          385  0x00000181 (const ??? 0)  (usage 3)
i4Dbutton65                          399  0x0000018f (const ??? 0)  (usage 3)
i4Dbutton66                          473  0x000001d9 (const ??? 0)  (usage 3)
i4Dbutton67                          441  0x000001b9 (const ??? 0)  (usage 3)
i4Dbutton68                          681  0x000002a9 (const ??? 0)  (usage 3)
i4Dbutton69                          508  0x000001fc (const ??? 0)  (usage 3)
i4Dbutton7                           623  0x0000026f (const ??? 0)  (usage 3)
i4Dbutton70                          682  0x000002aa (const ??? 0)  (usage 3)
i4Dbutton71                           83  0x00000053 (const ??? 0)  (usage 3)
i4Dbutton72                          227  0x000000e3 (const ??? 0)  (usage 3)
i4Dbutton73                          328  0x00000148 (const ??? 0)  (usage 3)
i4Dbutton74                          516  0x00000204 (const ??? 0)  (usage 3)
i4Dbutton75                          517  0x00000205 (const ??? 0)  (usage 3)
i4Dbutton76                          243  0x000000f3 (const ??? 0)  (usage 3)
i4Dbutton77                          109  0x0000006d (const ??? 0)  (usage 3)
i4Dbutton78                          344  0x00000158 (const ??? 0)  (usage 3)
i4Dbutton79                          600  0x00000258 (const ??? 0)  (usage 3)
i4Dbutton8                           605  0x0000025d (const ??? 0)  (usage 3)
i4Dbutton80                          287  0x0000011f (const ??? 0)  (usage 3)
i4Dbutton81                          634  0x0000027a (const ??? 0)  (usage 3)
i4Dbutton82                          323  0x00000143 (const ??? 0)  (usage 3)
i4Dbutton83                          210  0x000000d2 (const ??? 0)  (usage 3)
i4Dbutton84                          636  0x0000027c (const ??? 0)  (usage 3)
i4Dbutton85                          363  0x0000016b (const ??? 0)  (usage 3)
i4Dbutton86                          351  0x0000015f (const ??? 0)  (usage 3)
i4Dbutton87                          417  0x000001a1 (const ??? 0)  (usage 3)
i4Dbutton88                          419  0x000001a3 (const ??? 0)  (usage 3)
i4Dbutton89                          494  0x000001ee (const ??? 0)  (usage 3)
i4Dbutton9                           618  0x0000026a (const ??? 0)  (usage 3)
i4Dbutton90                          602  0x0000025a (const ??? 0)  (usage 3)
i4Dbutton91                          346  0x0000015a (const ??? 0)  (usage 3)
i4Dbutton92                          590  0x0000024e (const ??? 0)  (usage 3)
i4Dbutton93                          692  0x000002b4 (const ??? 0)  (usage 3)
i4Dbutton94                          606  0x0000025e (const ??? 0)  (usage 3)
i4Dbutton95                          619  0x0000026b (const ??? 0)  (usage 3)
i4Dbutton96                          631  0x00000277 (const ??? 0)  (usage 3)
i4Dbutton97                          588  0x0000024c (const ??? 0)  (usage 3)
i4Dbutton98                          690  0x000002b2 (const ??? 0)  (usage 3)
i4Dbutton99                          702  0x000002be (const ??? 0)  (usage 3)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 12)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iCustomdigits0                       450  0x000001c2 (const ??? 0)  (usage 3)
iCustomdigits1                       457  0x000001c9 (const ??? 0)  (usage 3)
iCustomdigits10                      645  0x00000285 (const ??? 0)  (usage 3)
iCustomdigits11                       94  0x0000005e (const ??? 0)  (usage 3)
iCustomdigits12                       96  0x00000060 (const ??? 0)  (usage 3)
iCustomdigits13                       98  0x00000062 (const ??? 0)  (usage 3)
iCustomdigits14                      100  0x00000064 (const ??? 0)  (usage 3)
iCustomdigits15                      304  0x00000130 (const ??? 0)  (usage 3)
iCustomdigits16                      306  0x00000132 (const ??? 0)  (usage 3)
iCustomdigits17                      308  0x00000134 (const ??? 0)  (usage 3)
iCustomdigits18                      310  0x00000136 (const ??? 0)  (usage 3)
iCustomdigits19                      647  0x00000287 (const ??? 0)  (usage 3)
iCustomdigits2                       459  0x000001cb (const ??? 0)  (usage 3)
iCustomdigits20                      312  0x00000138 (const ??? 0)  (usage 3)
iCustomdigits21                      314  0x0000013a (const ??? 0)  (usage 3)
iCustomdigits22                      649  0x00000289 (const ??? 0)  (usage 3)
iCustomdigits23                      316  0x0000013c (const ??? 0)  (usage 3)
iCustomdigits24                      133  0x00000085 (const ??? 0)  (usage 3)
iCustomdigits25                      135  0x00000087 (const ??? 0)  (usage 3)
iCustomdigits26                      137  0x00000089 (const ??? 0)  (usage 3)
iCustomdigits27                      139  0x0000008b (const ??? 0)  (usage 3)
iCustomdigits28                      141  0x0000008d (const ??? 0)  (usage 3)
iCustomdigits29                      143  0x0000008f (const ??? 0)  (usage 3)
iCustomdigits3                       481  0x000001e1 (const ??? 0)  (usage 3)
iCustomdigits30                      354  0x00000162 (const ??? 0)  (usage 3)
iCustomdigits31                      654  0x0000028e (const ??? 0)  (usage 3)
iCustomdigits32                      271  0x0000010f (const ??? 0)  (usage 3)
iCustomdigits33                      656  0x00000290 (const ??? 0)  (usage 3)
iCustomdigits34                      694  0x000002b6 (const ??? 0)  (usage 3)
iCustomdigits35                      696  0x000002b8 (const ??? 0)  (usage 3)
iCustomdigits36                      235  0x000000eb (const ??? 0)  (usage 3)
iCustomdigits37                      237  0x000000ed (const ??? 0)  (usage 3)
iCustomdigits38                      191  0x000000bf (const ??? 0)  (usage 3)
iCustomdigits39                      193  0x000000c1 (const ??? 0)  (usage 3)
iCustomdigits4                       483  0x000001e3 (const ??? 0)  (usage 3)
iCustomdigits40                      195  0x000000c3 (const ??? 0)  (usage 3)
iCustomdigits41                      698  0x000002ba (const ??? 0)  (usage 3)
iCustomdigits42                      700  0x000002bc (const ??? 0)  (usage 3)
iCustomdigits5                       485  0x000001e5 (const ??? 0)  (usage 3)
iCustomdigits56                      247  0x000000f7 (const ??? 0)  (usage 3)
iCustomdigits57                      249  0x000000f9 (const ??? 0)  (usage 3)
iCustomdigits58                      251  0x000000fb (const ??? 0)  (usage 3)
iCustomdigits59                      404  0x00000194 (const ??? 0)  (usage 3)
iCustomdigits6                        88  0x00000058 (const ??? 0)  (usage 3)
iCustomdigits60                      406  0x00000196 (const ??? 0)  (usage 3)
iCustomdigits61                      408  0x00000198 (const ??? 0)  (usage 3)
iCustomdigits62                      390  0x00000186 (const ??? 0)  (usage 3)
iCustomdigits63                      392  0x00000188 (const ??? 0)  (usage 3)
iCustomdigits64                      394  0x0000018a (const ??? 0)  (usage 3)
iCustomdigits65                      396  0x0000018c (const ??? 0)  (usage 3)
iCustomdigits66                      499  0x000001f3 (const ??? 0)  (usage 3)
iCustomdigits67                      501  0x000001f5 (const ??? 0)  (usage 3)
iCustomdigits68                      503  0x000001f7 (const ??? 0)  (usage 3)
iCustomdigits69                      505  0x000001f9 (const ??? 0)  (usage 3)
iCustomdigits7                        90  0x0000005a (const ??? 0)  (usage 3)
iCustomdigits70                      461  0x000001cd (const ??? 0)  (usage 3)
iCustomdigits71                      463  0x000001cf (const ??? 0)  (usage 3)
iCustomdigits72                      471  0x000001d7 (const ??? 0)  (usage 3)
iCustomdigits73                      564  0x00000234 (const ??? 0)  (usage 3)
iCustomdigits74                      566  0x00000236 (const ??? 0)  (usage 3)
iCustomdigits75                      568  0x00000238 (const ??? 0)  (usage 3)
iCustomdigits76                      570  0x0000023a (const ??? 0)  (usage 3)
iCustomdigits77                      541  0x0000021d (const ??? 0)  (usage 3)
iCustomdigits78                      543  0x0000021f (const ??? 0)  (usage 3)
iCustomdigits79                      545  0x00000221 (const ??? 0)  (usage 3)
iCustomdigits8                        92  0x0000005c (const ??? 0)  (usage 3)
iCustomdigits80                      547  0x00000223 (const ??? 0)  (usage 3)
iCustomdigits81                      549  0x00000225 (const ??? 0)  (usage 3)
iCustomdigits82                      551  0x00000227 (const ??? 0)  (usage 3)
iCustomdigits83                      553  0x00000229 (const ??? 0)  (usage 3)
iCustomdigits84                      555  0x0000022b (const ??? 0)  (usage 3)
iCustomdigits85                      658  0x00000292 (const ??? 0)  (usage 3)
iCustomdigits86                      660  0x00000294 (const ??? 0)  (usage 3)
iCustomdigits9                       643  0x00000283 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              240  0x000000f0 (const ??? 0)  (usage 3)
iForm100                             589  0x0000024d (const ??? 0)  (usage 3)
iForm101                             591  0x0000024f (const ??? 0)  (usage 3)
iForm102                             593  0x00000251 (const ??? 0)  (usage 3)
iForm103                             595  0x00000253 (const ??? 0)  (usage 3)
iForm104                             597  0x00000255 (const ??? 0)  (usage 3)
iForm105                             604  0x0000025c (const ??? 0)  (usage 3)
iForm106                             607  0x0000025f (const ??? 0)  (usage 3)
iForm107                             612  0x00000264 (const ??? 0)  (usage 3)
iForm108                             617  0x00000269 (const ??? 0)  (usage 3)
iForm109                             620  0x0000026c (const ??? 0)  (usage 3)
iForm11                              255  0x000000ff (const ??? 0)  (usage 3)
iForm110                             625  0x00000271 (const ??? 0)  (usage 3)
iForm111                             628  0x00000274 (const ??? 0)  (usage 3)
iForm112                             630  0x00000276 (const ??? 0)  (usage 3)
iForm113                             637  0x0000027d (const ??? 0)  (usage 3)
iForm114                             640  0x00000280 (const ??? 0)  (usage 3)
iForm115                             651  0x0000028b (const ??? 0)  (usage 3)
iForm116                             665  0x00000299 (const ??? 0)  (usage 3)
iForm117                             668  0x0000029c (const ??? 0)  (usage 3)
iForm118                             671  0x0000029f (const ??? 0)  (usage 3)
iForm119                             689  0x000002b1 (const ??? 0)  (usage 3)
iForm12                              242  0x000000f2 (const ??? 0)  (usage 3)
iForm120                             691  0x000002b3 (const ??? 0)  (usage 3)
iForm121                             693  0x000002b5 (const ??? 0)  (usage 3)
iForm13                              204  0x000000cc (const ??? 0)  (usage 3)
iForm14                              104  0x00000068 (const ??? 0)  (usage 3)
iForm15                              244  0x000000f4 (const ??? 0)  (usage 3)
iForm16                              179  0x000000b3 (const ??? 0)  (usage 3)
iForm17                              211  0x000000d3 (const ??? 0)  (usage 3)
iForm18                              263  0x00000107 (const ??? 0)  (usage 3)
iForm19                              108  0x0000006c (const ??? 0)  (usage 3)
iForm2                                 5  0x00000005 (const ??? 0)  (usage 3)
iForm20                              110  0x0000006e (const ??? 0)  (usage 3)
iForm21                              123  0x0000007b (const ??? 0)  (usage 3)
iForm22                              281  0x00000119 (const ??? 0)  (usage 3)
iForm23                              296  0x00000128 (const ??? 0)  (usage 3)
iForm24                              343  0x00000157 (const ??? 0)  (usage 3)
iForm25                              213  0x000000d5 (const ??? 0)  (usage 3)
iForm26                              401  0x00000191 (const ??? 0)  (usage 3)
iForm27                              598  0x00000256 (const ??? 0)  (usage 3)
iForm28                              126  0x0000007e (const ??? 0)  (usage 3)
iForm29                              273  0x00000111 (const ??? 0)  (usage 3)
iForm3                               199  0x000000c7 (const ??? 0)  (usage 3)
iForm30                              410  0x0000019a (const ??? 0)  (usage 3)
iForm31                              146  0x00000092 (const ??? 0)  (usage 3)
iForm32                              149  0x00000095 (const ??? 0)  (usage 3)
iForm33                              152  0x00000098 (const ??? 0)  (usage 3)
iForm34                              167  0x000000a7 (const ??? 0)  (usage 3)
iForm35                              173  0x000000ad (const ??? 0)  (usage 3)
iForm36                              269  0x0000010d (const ??? 0)  (usage 3)
iForm37                              286  0x0000011e (const ??? 0)  (usage 3)
iForm38                              288  0x00000120 (const ??? 0)  (usage 3)
iForm39                              290  0x00000122 (const ??? 0)  (usage 3)
iForm4                                67  0x00000043 (const ??? 0)  (usage 3)
iForm40                              632  0x00000278 (const ??? 0)  (usage 3)
iForm41                              340  0x00000154 (const ??? 0)  (usage 3)
iForm42                              299  0x0000012b (const ??? 0)  (usage 3)
iForm43                              319  0x0000013f (const ??? 0)  (usage 3)
iForm44                              183  0x000000b7 (const ??? 0)  (usage 3)
iForm45                              413  0x0000019d (const ??? 0)  (usage 3)
iForm46                              321  0x00000141 (const ??? 0)  (usage 3)
iForm47                              209  0x000000d1 (const ??? 0)  (usage 3)
iForm48                              609  0x00000261 (const ??? 0)  (usage 3)
iForm49                              223  0x000000df (const ??? 0)  (usage 3)
iForm5                                73  0x00000049 (const ??? 0)  (usage 3)
iForm50                              324  0x00000144 (const ??? 0)  (usage 3)
iForm51                              330  0x0000014a (const ??? 0)  (usage 3)
iForm52                              229  0x000000e5 (const ??? 0)  (usage 3)
iForm53                              474  0x000001da (const ??? 0)  (usage 3)
iForm54                              333  0x0000014d (const ??? 0)  (usage 3)
iForm55                              336  0x00000150 (const ??? 0)  (usage 3)
iForm56                              345  0x00000159 (const ??? 0)  (usage 3)
iForm57                              347  0x0000015b (const ??? 0)  (usage 3)
iForm58                              352  0x00000160 (const ??? 0)  (usage 3)
iForm59                              364  0x0000016c (const ??? 0)  (usage 3)
iForm6                                78  0x0000004e (const ??? 0)  (usage 3)
iForm60                              356  0x00000164 (const ??? 0)  (usage 3)
iForm61                              635  0x0000027b (const ??? 0)  (usage 3)
iForm62                              359  0x00000167 (const ??? 0)  (usage 3)
iForm63                              362  0x0000016a (const ??? 0)  (usage 3)
iForm64                              375  0x00000177 (const ??? 0)  (usage 3)
iForm65                              378  0x0000017a (const ??? 0)  (usage 3)
iForm66                              383  0x0000017f (const ??? 0)  (usage 3)
iForm67                              386  0x00000182 (const ??? 0)  (usage 3)
iForm68                              389  0x00000185 (const ??? 0)  (usage 3)
iForm69                              415  0x0000019f (const ??? 0)  (usage 3)
iForm7                               350  0x0000015e (const ??? 0)  (usage 3)
iForm70                              416  0x000001a0 (const ??? 0)  (usage 3)
iForm71                              418  0x000001a2 (const ??? 0)  (usage 3)
iForm72                              420  0x000001a4 (const ??? 0)  (usage 3)
iForm73                              422  0x000001a6 (const ??? 0)  (usage 3)
iForm74                              424  0x000001a8 (const ??? 0)  (usage 3)
iForm75                              427  0x000001ab (const ??? 0)  (usage 3)
iForm76                              428  0x000001ac (const ??? 0)  (usage 3)
iForm77                              431  0x000001af (const ??? 0)  (usage 3)
iForm78                              434  0x000001b2 (const ??? 0)  (usage 3)
iForm79                              448  0x000001c0 (const ??? 0)  (usage 3)
iForm8                               253  0x000000fd (const ??? 0)  (usage 3)
iForm80                              437  0x000001b5 (const ??? 0)  (usage 3)
iForm81                              444  0x000001bc (const ??? 0)  (usage 3)
iForm82                              488  0x000001e8 (const ??? 0)  (usage 3)
iForm83                              492  0x000001ec (const ??? 0)  (usage 3)
iForm84                              495  0x000001ef (const ??? 0)  (usage 3)
iForm85                              498  0x000001f2 (const ??? 0)  (usage 3)
iForm86                              509  0x000001fd (const ??? 0)  (usage 3)
iForm87                              515  0x00000203 (const ??? 0)  (usage 3)
iForm88                              523  0x0000020b (const ??? 0)  (usage 3)
iForm89                              524  0x0000020c (const ??? 0)  (usage 3)
iForm9                                84  0x00000054 (const ??? 0)  (usage 3)
iForm90                              601  0x00000259 (const ??? 0)  (usage 3)
iForm91                              527  0x0000020f (const ??? 0)  (usage 3)
iForm92                              530  0x00000212 (const ??? 0)  (usage 3)
iForm93                              533  0x00000215 (const ??? 0)  (usage 3)
iForm94                              536  0x00000218 (const ??? 0)  (usage 3)
iForm95                              539  0x0000021b (const ??? 0)  (usage 3)
iForm96                              557  0x0000022d (const ??? 0)  (usage 3)
iForm97                              560  0x00000230 (const ??? 0)  (usage 3)
iForm98                              576  0x00000240 (const ??? 0)  (usage 3)
iForm99                              587  0x0000024b (const ??? 0)  (usage 3)
iiCustomdigits0                      451  0x000001c3 (const ??? 0)  (not used)
iiCustomdigits1                      458  0x000001ca (const ??? 0)  (not used)
iiCustomdigits10                     646  0x00000286 (const ??? 0)  (not used)
iiCustomdigits11                      95  0x0000005f (const ??? 0)  (not used)
iiCustomdigits12                      97  0x00000061 (const ??? 0)  (not used)
iiCustomdigits13                      99  0x00000063 (const ??? 0)  (not used)
iiCustomdigits14                     101  0x00000065 (const ??? 0)  (not used)
iiCustomdigits15                     305  0x00000131 (const ??? 0)  (not used)
iiCustomdigits16                     307  0x00000133 (const ??? 0)  (not used)
iiCustomdigits17                     309  0x00000135 (const ??? 0)  (not used)
iiCustomdigits18                     311  0x00000137 (const ??? 0)  (not used)
iiCustomdigits19                     648  0x00000288 (const ??? 0)  (not used)
iiCustomdigits2                      460  0x000001cc (const ??? 0)  (not used)
iiCustomdigits20                     313  0x00000139 (const ??? 0)  (not used)
iiCustomdigits21                     315  0x0000013b (const ??? 0)  (not used)
iiCustomdigits22                     650  0x0000028a (const ??? 0)  (not used)
iiCustomdigits23                     317  0x0000013d (const ??? 0)  (not used)
iiCustomdigits24                     134  0x00000086 (const ??? 0)  (not used)
iiCustomdigits25                     136  0x00000088 (const ??? 0)  (not used)
iiCustomdigits26                     138  0x0000008a (const ??? 0)  (not used)
iiCustomdigits27                     140  0x0000008c (const ??? 0)  (not used)
iiCustomdigits28                     142  0x0000008e (const ??? 0)  (not used)
iiCustomdigits29                     144  0x00000090 (const ??? 0)  (not used)
iiCustomdigits3                      482  0x000001e2 (const ??? 0)  (not used)
iiCustomdigits30                     355  0x00000163 (const ??? 0)  (not used)
iiCustomdigits31                     655  0x0000028f (const ??? 0)  (not used)
iiCustomdigits32                     272  0x00000110 (const ??? 0)  (not used)
iiCustomdigits33                     657  0x00000291 (const ??? 0)  (not used)
iiCustomdigits34                     695  0x000002b7 (const ??? 0)  (not used)
iiCustomdigits35                     697  0x000002b9 (const ??? 0)  (not used)
iiCustomdigits36                     236  0x000000ec (const ??? 0)  (not used)
iiCustomdigits37                     238  0x000000ee (const ??? 0)  (not used)
iiCustomdigits38                     192  0x000000c0 (const ??? 0)  (not used)
iiCustomdigits39                     194  0x000000c2 (const ??? 0)  (not used)
iiCustomdigits4                      484  0x000001e4 (const ??? 0)  (not used)
iiCustomdigits40                     196  0x000000c4 (const ??? 0)  (not used)
iiCustomdigits41                     699  0x000002bb (const ??? 0)  (not used)
iiCustomdigits42                     701  0x000002bd (const ??? 0)  (not used)
iiCustomdigits5                      486  0x000001e6 (const ??? 0)  (not used)
iiCustomdigits56                     248  0x000000f8 (const ??? 0)  (not used)
iiCustomdigits57                     250  0x000000fa (const ??? 0)  (not used)
iiCustomdigits58                     252  0x000000fc (const ??? 0)  (not used)
iiCustomdigits59                     405  0x00000195 (const ??? 0)  (not used)
iiCustomdigits6                       89  0x00000059 (const ??? 0)  (not used)
iiCustomdigits60                     407  0x00000197 (const ??? 0)  (not used)
iiCustomdigits61                     409  0x00000199 (const ??? 0)  (not used)
iiCustomdigits62                     391  0x00000187 (const ??? 0)  (not used)
iiCustomdigits63                     393  0x00000189 (const ??? 0)  (not used)
iiCustomdigits64                     395  0x0000018b (const ??? 0)  (not used)
iiCustomdigits65                     397  0x0000018d (const ??? 0)  (not used)
iiCustomdigits66                     500  0x000001f4 (const ??? 0)  (not used)
iiCustomdigits67                     502  0x000001f6 (const ??? 0)  (not used)
iiCustomdigits68                     504  0x000001f8 (const ??? 0)  (not used)
iiCustomdigits69                     506  0x000001fa (const ??? 0)  (not used)
iiCustomdigits7                       91  0x0000005b (const ??? 0)  (not used)
iiCustomdigits70                     462  0x000001ce (const ??? 0)  (not used)
iiCustomdigits71                     464  0x000001d0 (const ??? 0)  (not used)
iiCustomdigits72                     472  0x000001d8 (const ??? 0)  (not used)
iiCustomdigits73                     565  0x00000235 (const ??? 0)  (not used)
iiCustomdigits74                     567  0x00000237 (const ??? 0)  (not used)
iiCustomdigits75                     569  0x00000239 (const ??? 0)  (not used)
iiCustomdigits76                     571  0x0000023b (const ??? 0)  (not used)
iiCustomdigits77                     542  0x0000021e (const ??? 0)  (not used)
iiCustomdigits78                     544  0x00000220 (const ??? 0)  (not used)
iiCustomdigits79                     546  0x00000222 (const ??? 0)  (not used)
iiCustomdigits8                       93  0x0000005d (const ??? 0)  (not used)
iiCustomdigits80                     548  0x00000224 (const ??? 0)  (not used)
iiCustomdigits81                     550  0x00000226 (const ??? 0)  (not used)
iiCustomdigits82                     552  0x00000228 (const ??? 0)  (not used)
iiCustomdigits83                     554  0x0000022a (const ??? 0)  (not used)
iiCustomdigits84                     556  0x0000022c (const ??? 0)  (not used)
iiCustomdigits85                     659  0x00000293 (const ??? 0)  (not used)
iiCustomdigits86                     661  0x00000295 (const ??? 0)  (not used)
iiCustomdigits9                      644  0x00000284 (const ??? 0)  (not used)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (usage 6)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 57)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (usage 6)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 15)
IMAGE_YPOS                             3  0x00000003 (const dword)  (usage 12)
ImageTouched                         308  0x00000134 (mem) word (global)  (usage 36)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 6)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 90)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 9)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 27)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 24)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        495  0x000001efInputControls                        495  0x000001ef (mem) word[708] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 9)
InputCS                              562  0x00000232 (mem) word (global)  (usage 21)
InputData                           1911  0x00000777InputData                           1911  0x00000777 (mem) word[7601] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 30)
InputType                            314  0x0000013a (mem) word (global)  (usage 39)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
iSmartSlider0                        447  0x000001bf (const ??? 0)  (usage 3)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStrings0                          17113  0x000042d9iStrings0                          17113  0x000042d9 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings1                          17139  0x000042f3iStrings1                          17139  0x000042f3 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings10                         17373  0x000043ddiStrings10                         17373  0x000043dd (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings11                         17399  0x000043f7iStrings11                         17399  0x000043f7 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings12                         17425  0x00004411iStrings12                         17425  0x00004411 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings13                         17451  0x0000442biStrings13                         17451  0x0000442b (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings14                         17477  0x00004445iStrings14                         17477  0x00004445 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings16                         17503  0x0000445fiStrings16                         17503  0x0000445f (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings2                          17165  0x0000430diStrings2                          17165  0x0000430d (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings23                         17529  0x00004479iStrings23                         17529  0x00004479 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings27                         17555  0x00004493iStrings27                         17555  0x00004493 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings3                          17191  0x00004327iStrings3                          17191  0x00004327 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings38                         17581  0x000044adiStrings38                         17581  0x000044ad (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings39                         17607  0x000044c7iStrings39                         17607  0x000044c7 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings4                          17217  0x00004341iStrings4                          17217  0x00004341 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings44                         17633  0x000044e1iStrings44                         17633  0x000044e1 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings48                         17659  0x000044fbiStrings48                         17659  0x000044fb (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings49                         17685  0x00004515iStrings49                         17685  0x00004515 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings5                          17243  0x0000435biStrings5                          17243  0x0000435b (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings50                         17711  0x0000452fiStrings50                         17711  0x0000452f (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings52                         17737  0x00004549iStrings52                         17737  0x00004549 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings53                         17763  0x00004563iStrings53                         17763  0x00004563 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings55                         17789  0x0000457diStrings55                         17789  0x0000457d (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings6                          17269  0x00004375iStrings6                          17269  0x00004375 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings7                          17295  0x0000438fiStrings7                          17295  0x0000438f (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings8                          17321  0x000043a9iStrings8                          17321  0x000043a9 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings9                          17347  0x000043c3iStrings9                          17347  0x000043c3 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                         528  0x00000210 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                        666  0x0000029a (const ??? 0)  (usage 3)
iUserbutton100                       572  0x0000023c (const ??? 0)  (usage 3)
iUserbutton101                       573  0x0000023d (const ??? 0)  (usage 3)
iUserbutton102                       574  0x0000023e (const ??? 0)  (usage 3)
iUserbutton103                       577  0x00000241 (const ??? 0)  (usage 3)
iUserbutton104                       578  0x00000242 (const ??? 0)  (usage 3)
iUserbutton105                       579  0x00000243 (const ??? 0)  (usage 3)
iUserbutton106                       580  0x00000244 (const ??? 0)  (usage 3)
iUserbutton107                       581  0x00000245 (const ??? 0)  (usage 3)
iUserbutton108                       582  0x00000246 (const ??? 0)  (usage 3)
iUserbutton109                       583  0x00000247 (const ??? 0)  (usage 3)
iUserbutton11                        127  0x0000007f (const ??? 0)  (usage 3)
iUserbutton110                       446  0x000001be (const ??? 0)  (usage 3)
iUserbutton111                       592  0x00000250 (const ??? 0)  (usage 3)
iUserbutton112                       168  0x000000a8 (const ??? 0)  (usage 3)
iUserbutton113                       169  0x000000a9 (const ??? 0)  (usage 3)
iUserbutton114                       170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton115                       174  0x000000ae (const ??? 0)  (usage 3)
iUserbutton116                       175  0x000000af (const ??? 0)  (usage 3)
iUserbutton117                       176  0x000000b0 (const ??? 0)  (usage 3)
iUserbutton118                       301  0x0000012d (const ??? 0)  (usage 3)
iUserbutton119                       706  0x000002c2 (const ??? 0)  (usage 3)
iUserbutton12                         74  0x0000004a (const ??? 0)  (usage 3)
iUserbutton120                       584  0x00000248 (const ??? 0)  (usage 3)
iUserbutton121                       276  0x00000114 (const ??? 0)  (usage 3)
iUserbutton122                       277  0x00000115 (const ??? 0)  (usage 3)
iUserbutton123                       283  0x0000011b (const ??? 0)  (usage 3)
iUserbutton124                       513  0x00000201 (const ??? 0)  (usage 3)
iUserbutton125                       596  0x00000254 (const ??? 0)  (usage 3)
iUserbutton126                       102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton127                       610  0x00000262 (const ??? 0)  (usage 3)
iUserbutton128                       529  0x00000211 (const ??? 0)  (usage 3)
iUserbutton129                       161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton13                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton130                       224  0x000000e0 (const ??? 0)  (usage 3)
iUserbutton131                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton132                       707  0x000002c3 (const ??? 0)  (usage 3)
iUserbutton133                       289  0x00000121 (const ??? 0)  (usage 3)
iUserbutton134                       381  0x0000017d (const ??? 0)  (usage 3)
iUserbutton135                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton136                       163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton137                       302  0x0000012e (const ??? 0)  (usage 3)
iUserbutton138                       164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton14                         10  0x0000000a (const ??? 0)  (usage 3)
iUserbutton140                       291  0x00000123 (const ??? 0)  (usage 3)
iUserbutton141                       292  0x00000124 (const ??? 0)  (usage 3)
iUserbutton144                       230  0x000000e6 (const ??? 0)  (usage 3)
iUserbutton148                       231  0x000000e7 (const ??? 0)  (usage 3)
iUserbutton149                       232  0x000000e8 (const ??? 0)  (usage 3)
iUserbutton15                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton150                       233  0x000000e9 (const ??? 0)  (usage 3)
iUserbutton151                       184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton152                       185  0x000000b9 (const ??? 0)  (usage 3)
iUserbutton153                       293  0x00000125 (const ??? 0)  (usage 3)
iUserbutton154                       186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton155                       187  0x000000bb (const ??? 0)  (usage 3)
iUserbutton156                       188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton157                       189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton158                       181  0x000000b5 (const ??? 0)  (usage 3)
iUserbutton159                        81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton16                         86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton160                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton161                       234  0x000000ea (const ??? 0)  (usage 3)
iUserbutton162                       216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton163                       475  0x000001db (const ??? 0)  (usage 3)
iUserbutton164                       476  0x000001dc (const ??? 0)  (usage 3)
iUserbutton165                       477  0x000001dd (const ??? 0)  (usage 3)
iUserbutton166                       455  0x000001c7 (const ??? 0)  (usage 3)
iUserbutton167                       478  0x000001de (const ??? 0)  (usage 3)
iUserbutton168                       479  0x000001df (const ??? 0)  (usage 3)
iUserbutton169                       480  0x000001e0 (const ??? 0)  (usage 3)
iUserbutton17                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton170                       456  0x000001c8 (const ??? 0)  (usage 3)
iUserbutton172                       403  0x00000193 (const ??? 0)  (usage 3)
iUserbutton173                       411  0x0000019b (const ??? 0)  (usage 3)
iUserbutton174                       412  0x0000019c (const ??? 0)  (usage 3)
iUserbutton177                       217  0x000000d9 (const ??? 0)  (usage 3)
iUserbutton178                       218  0x000000da (const ??? 0)  (usage 3)
iUserbutton179                       325  0x00000145 (const ??? 0)  (usage 3)
iUserbutton18                         87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton180                       326  0x00000146 (const ??? 0)  (usage 3)
iUserbutton181                       331  0x0000014b (const ??? 0)  (usage 3)
iUserbutton182                       332  0x0000014c (const ??? 0)  (usage 3)
iUserbutton183                       337  0x00000151 (const ??? 0)  (usage 3)
iUserbutton184                       338  0x00000152 (const ??? 0)  (usage 3)
iUserbutton185                       339  0x00000153 (const ??? 0)  (usage 3)
iUserbutton186                       334  0x0000014e (const ??? 0)  (usage 3)
iUserbutton187                       335  0x0000014f (const ??? 0)  (usage 3)
iUserbutton188                       342  0x00000156 (const ??? 0)  (usage 3)
iUserbutton19                         85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton190                       349  0x0000015d (const ??? 0)  (usage 3)
iUserbutton191                       360  0x00000168 (const ??? 0)  (usage 3)
iUserbutton193                       365  0x0000016d (const ??? 0)  (usage 3)
iUserbutton194                       357  0x00000165 (const ??? 0)  (usage 3)
iUserbutton195                       358  0x00000166 (const ??? 0)  (usage 3)
iUserbutton196                       366  0x0000016e (const ??? 0)  (usage 3)
iUserbutton197                       219  0x000000db (const ??? 0)  (usage 3)
iUserbutton198                       379  0x0000017b (const ??? 0)  (usage 3)
iUserbutton199                       367  0x0000016f (const ??? 0)  (usage 3)
iUserbutton2                          79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton20                        667  0x0000029b (const ??? 0)  (usage 3)
iUserbutton200                       368  0x00000170 (const ??? 0)  (usage 3)
iUserbutton201                       369  0x00000171 (const ??? 0)  (usage 3)
iUserbutton202                       370  0x00000172 (const ??? 0)  (usage 3)
iUserbutton203                       371  0x00000173 (const ??? 0)  (usage 3)
iUserbutton204                       220  0x000000dc (const ??? 0)  (usage 3)
iUserbutton205                       221  0x000000dd (const ??? 0)  (usage 3)
iUserbutton206                       376  0x00000178 (const ??? 0)  (usage 3)
iUserbutton207                       377  0x00000179 (const ??? 0)  (usage 3)
iUserbutton208                       425  0x000001a9 (const ??? 0)  (usage 3)
iUserbutton209                       380  0x0000017c (const ??? 0)  (usage 3)
iUserbutton21                        522  0x0000020a (const ??? 0)  (usage 3)
iUserbutton210                       611  0x00000263 (const ??? 0)  (usage 3)
iUserbutton211                       387  0x00000183 (const ??? 0)  (usage 3)
iUserbutton212                       171  0x000000ab (const ??? 0)  (usage 3)
iUserbutton213                       177  0x000000b1 (const ??? 0)  (usage 3)
iUserbutton214                       426  0x000001aa (const ??? 0)  (usage 3)
iUserbutton215                       122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton216                       266  0x0000010a (const ??? 0)  (usage 3)
iUserbutton217                       298  0x0000012a (const ??? 0)  (usage 3)
iUserbutton218                       361  0x00000169 (const ??? 0)  (usage 3)
iUserbutton219                       429  0x000001ad (const ??? 0)  (usage 3)
iUserbutton22                        154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton220                       430  0x000001ae (const ??? 0)  (usage 3)
iUserbutton221                       433  0x000001b1 (const ??? 0)  (usage 3)
iUserbutton222                       435  0x000001b3 (const ??? 0)  (usage 3)
iUserbutton223                       436  0x000001b4 (const ??? 0)  (usage 3)
iUserbutton224                        71  0x00000047 (const ??? 0)  (usage 3)
iUserbutton226                       454  0x000001c6 (const ??? 0)  (usage 3)
iUserbutton227                       452  0x000001c4 (const ??? 0)  (usage 3)
iUserbutton228                       453  0x000001c5 (const ??? 0)  (usage 3)
iUserbutton229                       449  0x000001c1 (const ??? 0)  (usage 3)
iUserbutton23                        155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton230                       621  0x0000026d (const ??? 0)  (usage 3)
iUserbutton231                       664  0x00000298 (const ??? 0)  (usage 3)
iUserbutton233                       438  0x000001b6 (const ??? 0)  (usage 3)
iUserbutton234                       445  0x000001bd (const ??? 0)  (usage 3)
iUserbutton235                       629  0x00000275 (const ??? 0)  (usage 3)
iUserbutton237                       303  0x0000012f (const ??? 0)  (usage 3)
iUserbutton238                       489  0x000001e9 (const ??? 0)  (usage 3)
iUserbutton239                       490  0x000001ea (const ??? 0)  (usage 3)
iUserbutton24                        156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton241                       496  0x000001f0 (const ??? 0)  (usage 3)
iUserbutton242                       497  0x000001f1 (const ??? 0)  (usage 3)
iUserbutton243                       439  0x000001b7 (const ??? 0)  (usage 3)
iUserbutton246                       465  0x000001d1 (const ??? 0)  (usage 3)
iUserbutton247                       466  0x000001d2 (const ??? 0)  (usage 3)
iUserbutton248                       467  0x000001d3 (const ??? 0)  (usage 3)
iUserbutton249                       468  0x000001d4 (const ??? 0)  (usage 3)
iUserbutton25                        157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton250                       469  0x000001d5 (const ??? 0)  (usage 3)
iUserbutton251                       470  0x000001d6 (const ??? 0)  (usage 3)
iUserbutton252                       510  0x000001fe (const ??? 0)  (usage 3)
iUserbutton253                       511  0x000001ff (const ??? 0)  (usage 3)
iUserbutton254                       512  0x00000200 (const ??? 0)  (usage 3)
iUserbutton26                        153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton27                        158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton28                        525  0x0000020d (const ??? 0)  (usage 3)
iUserbutton29                        200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton3                         256  0x00000100 (const ??? 0)  (usage 3)
iUserbutton30                        205  0x000000cd (const ??? 0)  (usage 3)
iUserbutton31                        526  0x0000020e (const ??? 0)  (usage 3)
iUserbutton32                        106  0x0000006a (const ??? 0)  (usage 3)
iUserbutton33                        107  0x0000006b (const ??? 0)  (usage 3)
iUserbutton34                        159  0x0000009f (const ??? 0)  (usage 3)
iUserbutton35                        160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton36                        670  0x0000029e (const ??? 0)  (usage 3)
iUserbutton37                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton38                        245  0x000000f5 (const ??? 0)  (usage 3)
iUserbutton39                        246  0x000000f6 (const ??? 0)  (usage 3)
iUserbutton4                         442  0x000001ba (const ??? 0)  (usage 3)
iUserbutton40                        257  0x00000101 (const ??? 0)  (usage 3)
iUserbutton41                        180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton42                        258  0x00000102 (const ??? 0)  (usage 3)
iUserbutton43                        518  0x00000206 (const ??? 0)  (usage 3)
iUserbutton44                        432  0x000001b0 (const ??? 0)  (usage 3)
iUserbutton45                        259  0x00000103 (const ??? 0)  (usage 3)
iUserbutton46                        260  0x00000104 (const ??? 0)  (usage 3)
iUserbutton47                        519  0x00000207 (const ??? 0)  (usage 3)
iUserbutton48                        443  0x000001bb (const ??? 0)  (usage 3)
iUserbutton49                        348  0x0000015c (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton51                        537  0x00000219 (const ??? 0)  (usage 3)
iUserbutton52                        687  0x000002af (const ??? 0)  (usage 3)
iUserbutton53                        124  0x0000007c (const ??? 0)  (usage 3)
iUserbutton54                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton55                          9  0x00000009 (const ??? 0)  (usage 3)
iUserbutton56                         11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton57                         77  0x0000004d (const ??? 0)  (usage 3)
iUserbutton58                        688  0x000002b0 (const ??? 0)  (usage 3)
iUserbutton59                        264  0x00000108 (const ??? 0)  (usage 3)
iUserbutton6                         521  0x00000209 (const ??? 0)  (usage 3)
iUserbutton60                        538  0x0000021a (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        534  0x00000216 (const ??? 0)  (usage 3)
iUserbutton63                        531  0x00000213 (const ??? 0)  (usage 3)
iUserbutton64                        225  0x000000e1 (const ??? 0)  (usage 3)
iUserbutton65                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton66                        297  0x00000129 (const ??? 0)  (usage 3)
iUserbutton67                        341  0x00000155 (const ??? 0)  (usage 3)
iUserbutton68                        320  0x00000140 (const ??? 0)  (usage 3)
iUserbutton69                        603  0x0000025b (const ??? 0)  (usage 3)
iUserbutton7                          69  0x00000045 (const ??? 0)  (usage 3)
iUserbutton70                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton71                        704  0x000002c0 (const ??? 0)  (usage 3)
iUserbutton72                        532  0x00000214 (const ??? 0)  (usage 3)
iUserbutton73                        535  0x00000217 (const ??? 0)  (usage 3)
iUserbutton74                        198  0x000000c6 (const ??? 0)  (usage 3)
iUserbutton75                        111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton76                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton77                        113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton78                        120  0x00000078 (const ??? 0)  (usage 3)
iUserbutton79                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton8                          68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton80                        265  0x00000109 (const ??? 0)  (usage 3)
iUserbutton81                        128  0x00000080 (const ??? 0)  (usage 3)
iUserbutton82                        129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton83                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton84                        285  0x0000011d (const ??? 0)  (usage 3)
iUserbutton85                         12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton86                         13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton87                        300  0x0000012c (const ??? 0)  (usage 3)
iUserbutton88                          4  0x00000004 (const ??? 0)  (usage 3)
iUserbutton89                        540  0x0000021c (const ??? 0)  (usage 3)
iUserbutton9                          70  0x00000046 (const ??? 0)  (usage 3)
iUserbutton90                        282  0x0000011a (const ??? 0)  (usage 3)
iUserbutton91                        274  0x00000112 (const ??? 0)  (usage 3)
iUserbutton92                        275  0x00000113 (const ??? 0)  (usage 3)
iUserbutton93                        402  0x00000192 (const ??? 0)  (usage 3)
iUserbutton94                        147  0x00000093 (const ??? 0)  (usage 3)
iUserbutton95                        150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton96                        705  0x000002c1 (const ??? 0)  (usage 3)
iUserbutton97                        662  0x00000296 (const ??? 0)  (usage 3)
iUserbutton98                        663  0x00000297 (const ??? 0)  (usage 3)
iUserbutton99                        563  0x00000233 (const ??? 0)  (usage 3)
iUserimages0                         278  0x00000116 (const ??? 0)  (usage 3)
iUserimages1                          14  0x0000000e (const ??? 0)  (usage 3)
iUserimages10                        520  0x00000208 (const ??? 0)  (usage 3)
iUserimages11                        165  0x000000a5 (const ??? 0)  (usage 3)
iUserimages12                        222  0x000000de (const ??? 0)  (usage 3)
iUserimages13                        117  0x00000075 (const ??? 0)  (usage 3)
iUserimages14                        118  0x00000076 (const ??? 0)  (usage 3)
iUserimages15                        119  0x00000077 (const ??? 0)  (usage 3)
iUserimages16                        166  0x000000a6 (const ??? 0)  (usage 3)
iUserimages17                        575  0x0000023f (const ??? 0)  (usage 3)
iUserimages18                        400  0x00000190 (const ??? 0)  (usage 3)
iUserimages19                         17  0x00000011 (const ??? 0)  (usage 3)
iUserimages2                         372  0x00000174 (const ??? 0)  (usage 3)
iUserimages20                         18  0x00000012 (const ??? 0)  (usage 3)
iUserimages21                         19  0x00000013 (const ??? 0)  (usage 3)
iUserimages22                         20  0x00000014 (const ??? 0)  (usage 3)
iUserimages23                         21  0x00000015 (const ??? 0)  (usage 3)
iUserimages24                        493  0x000001ed (const ??? 0)  (usage 3)
iUserimages25                        491  0x000001eb (const ??? 0)  (usage 3)
iUserimages26                         23  0x00000017 (const ??? 0)  (usage 3)
iUserimages27                         24  0x00000018 (const ??? 0)  (usage 3)
iUserimages28                         25  0x00000019 (const ??? 0)  (usage 3)
iUserimages29                         26  0x0000001a (const ??? 0)  (usage 3)
iUserimages3                         318  0x0000013e (const ??? 0)  (usage 3)
iUserimages30                         22  0x00000016 (const ??? 0)  (usage 3)
iUserimages31                         27  0x0000001b (const ??? 0)  (usage 3)
iUserimages32                         28  0x0000001c (const ??? 0)  (usage 3)
iUserimages33                         29  0x0000001d (const ??? 0)  (usage 3)
iUserimages34                         30  0x0000001e (const ??? 0)  (usage 3)
iUserimages35                         31  0x0000001f (const ??? 0)  (usage 3)
iUserimages36                         32  0x00000020 (const ??? 0)  (usage 3)
iUserimages37                         33  0x00000021 (const ??? 0)  (usage 3)
iUserimages38                         34  0x00000022 (const ??? 0)  (usage 3)
iUserimages39                         35  0x00000023 (const ??? 0)  (usage 3)
iUserimages4                         148  0x00000094 (const ??? 0)  (usage 3)
iUserimages40                         36  0x00000024 (const ??? 0)  (usage 3)
iUserimages41                         37  0x00000025 (const ??? 0)  (usage 3)
iUserimages42                         38  0x00000026 (const ??? 0)  (usage 3)
iUserimages43                         39  0x00000027 (const ??? 0)  (usage 3)
iUserimages44                         41  0x00000029 (const ??? 0)  (usage 3)
iUserimages45                         42  0x0000002a (const ??? 0)  (usage 3)
iUserimages46                         43  0x0000002b (const ??? 0)  (usage 3)
iUserimages47                         45  0x0000002d (const ??? 0)  (usage 3)
iUserimages48                         46  0x0000002e (const ??? 0)  (usage 3)
iUserimages49                         47  0x0000002f (const ??? 0)  (usage 3)
iUserimages5                         151  0x00000097 (const ??? 0)  (usage 3)
iUserimages50                         49  0x00000031 (const ??? 0)  (usage 3)
iUserimages51                         50  0x00000032 (const ??? 0)  (usage 3)
iUserimages52                         40  0x00000028 (const ??? 0)  (usage 3)
iUserimages53                         44  0x0000002c (const ??? 0)  (usage 3)
iUserimages54                         51  0x00000033 (const ??? 0)  (usage 3)
iUserimages55                         52  0x00000034 (const ??? 0)  (usage 3)
iUserimages56                         53  0x00000035 (const ??? 0)  (usage 3)
iUserimages57                         54  0x00000036 (const ??? 0)  (usage 3)
iUserimages58                         48  0x00000030 (const ??? 0)  (usage 3)
iUserimages59                         55  0x00000037 (const ??? 0)  (usage 3)
iUserimages6                         103  0x00000067 (const ??? 0)  (usage 3)
iUserimages60                         56  0x00000038 (const ??? 0)  (usage 3)
iUserimages61                         57  0x00000039 (const ??? 0)  (usage 3)
iUserimages62                         58  0x0000003a (const ??? 0)  (usage 3)
iUserimages63                         59  0x0000003b (const ??? 0)  (usage 3)
iUserimages64                         60  0x0000003c (const ??? 0)  (usage 3)
iUserimages65                         61  0x0000003d (const ??? 0)  (usage 3)
iUserimages66                         62  0x0000003e (const ??? 0)  (usage 3)
iUserimages67                         63  0x0000003f (const ??? 0)  (usage 3)
iUserimages68                         64  0x00000040 (const ??? 0)  (usage 3)
iUserimages69                         65  0x00000041 (const ??? 0)  (usage 3)
iUserimages7                         514  0x00000202 (const ??? 0)  (usage 3)
iUserimages70                         66  0x00000042 (const ??? 0)  (usage 3)
iUserimages71                        683  0x000002ab (const ??? 0)  (usage 3)
iUserimages72                        684  0x000002ac (const ??? 0)  (usage 3)
iUserimages73                        685  0x000002ad (const ??? 0)  (usage 3)
iUserimages74                        686  0x000002ae (const ??? 0)  (usage 3)
iUserimages8                         585  0x00000249 (const ??? 0)  (usage 3)
iUserimages9                         586  0x0000024a (const ??? 0)  (usage 3)
iVideo0                                0  0x00000000 (const ??? 0)  (usage 3)
iVideo1                              254  0x000000fe (const ??? 0)  (usage 3)
iVideo10                             182  0x000000b6 (const ??? 0)  (usage 3)
iVideo11                             125  0x0000007d (const ??? 0)  (usage 3)
iVideo12                             594  0x00000252 (const ??? 0)  (usage 3)
iVideo13                             614  0x00000266 (const ??? 0)  (usage 3)
iVideo14                              15  0x0000000f (const ??? 0)  (usage 3)
iVideo15                             261  0x00000105 (const ??? 0)  (usage 3)
iVideo16                             172  0x000000ac (const ??? 0)  (usage 3)
iVideo17                             178  0x000000b2 (const ??? 0)  (usage 3)
iVideo18                             388  0x00000184 (const ??? 0)  (usage 3)
iVideo19                             353  0x00000161 (const ??? 0)  (usage 3)
iVideo2                              270  0x0000010e (const ??? 0)  (usage 3)
iVideo20                             190  0x000000be (const ??? 0)  (usage 3)
iVideo21                             414  0x0000019e (const ??? 0)  (usage 3)
iVideo22                             421  0x000001a5 (const ??? 0)  (usage 3)
iVideo23                             423  0x000001a7 (const ??? 0)  (usage 3)
iVideo24                             615  0x00000267 (const ??? 0)  (usage 3)
iVideo25                             616  0x00000268 (const ??? 0)  (usage 3)
iVideo3                              130  0x00000082 (const ??? 0)  (usage 3)
iVideo4                              131  0x00000083 (const ??? 0)  (usage 3)
iVideo5                              132  0x00000084 (const ??? 0)  (usage 3)
iVideo6                              212  0x000000d4 (const ??? 0)  (usage 3)
iVideo9                              322  0x00000142 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                19581  0x00004c7dkKeyboardKeystrokes                19581  0x00004c7d (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   23902  0x00005d5e (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               20783  0x0000512f (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         37  0x00000025 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               25415  0x00006347 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              691  0x000002b3 (const dword)  (usage 3)
nObjects                             708  0x000002c4 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              56  0x00000038 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                         18601  0x000048a9o4Dbuttons                         18601  0x000048a9 (mem) word[102] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 12)
oAngularmeters                     17829  0x000045a5oAngularmeters                     17829  0x000045a5 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oAniButtons                        18805  0x00004975oAniButtons                        18805  0x00004975 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                      18807  0x00004977oColorPickers                      18807  0x00004977 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oCoolgauges                        17831  0x000045a7oCoolgauges                        17831  0x000045a7 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oCustomDigitsn                     19585  0x00004c81oCustomDigitsn                     19585  0x00004c81 (mem) word[435] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 6)
oCustomdigitss                     17833  0x000045a9oCustomdigitss                     17833  0x000045a9 (mem) word[88] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 9)
oDipSwitchs                        17815  0x00004597oDipSwitchs                        17815  0x00004597 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 6)
oForms                             18009  0x00004659oForms                             18009  0x00004659 (mem) word[123] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 18)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 18)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 54)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 15)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 18)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 15)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                            18255  0x0000474foGauges                            18255  0x0000474f (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oGSliders                          17823  0x0000459foGSliders                          17823  0x0000459f (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 6)
oImages                            18257  0x00004751oImages                            18257  0x00004751 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oKeyboards                         18259  0x00004753oKeyboards                         18259  0x00004753 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oKnobs                             17817  0x00004599oKnobs                             17817  0x00004599 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oldn                                 306  0x00000132 (mem) word (global)  (usage 42)
oLeddigitss                        18263  0x00004757oLeddigitss                        18263  0x00004757 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oLeds                              18261  0x00004755oLeds                              18261  0x00004755 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMagicObjects                      19321  0x00004b79oMagicObjects                      19321  0x00004b79 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oMeters                            18265  0x00004759oMeters                            18265  0x00004759 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 6)
oObjects                             228  0x000000e4 (mem) word[38] (global)  (usage 120)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                         18599  0x000048a7oPinInputs                         18599  0x000048a7 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oPinOutputs                        19335  0x00004b87oPinOutputs                        19335  0x00004b87 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                     17819  0x0000459boRockerSwitchs                     17819  0x0000459b (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oRotarySwitchs                     17821  0x0000459doRotarySwitchs                     17821  0x0000459d (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oScopes                            18443  0x0000480boScopes                            18443  0x0000480b (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (not used)
oSmartGauges                       19323  0x00004b7boSmartGauges                       19323  0x00004b7b (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oSmartKnobs                        19329  0x00004b81oSmartKnobs                        19329  0x00004b81 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oSmartSliders                      19325  0x00004b7doSmartSliders                      19325  0x00004b7d (mem) word[2] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 6)
oSoundss                           19333  0x00004b85oSoundss                           19333  0x00004b85 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oSpectrums                         18441  0x00004809oSpectrums                         18441  0x00004809 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oStaticTexts                       18439  0x00004807oStaticTexts                       18439  0x00004807 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oStringss                          18267  0x0000475boStringss                          18267  0x0000475b (mem) word[57] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 75)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 984)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                             18445  0x0000480doTanks                             18445  0x0000480d (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oThermometers                      18381  0x000047cdoThermometers                      18381  0x000047cd (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oTimers                            19331  0x00004b83oTimers                            19331  0x00004b83 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oTrackbars                         17825  0x000045a1oTrackbars                         17825  0x000045a1 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 6)
oUserButtons                       18809  0x00004979oUserButtons                       18809  0x00004979 (mem) word[256] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 12)
oUserImagess                       18447  0x0000480foUserImagess                       18447  0x0000480f (mem) word[76] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oUserleds                          18383  0x000047cfoUserleds                          18383  0x000047cf (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             564  0x00000234 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                            18385  0x000047d1oVideos                            18385  0x000047d1 (mem) word[27] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                        17827  0x000045a3oWinButtons                        17827  0x000045a3 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          320  0x00000140 (mem) word (global)  (usage 30)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       25450  0x0000636a (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_10KHZ                              6  0x00000006 (const dword)  (not used)
PWM_15KHZ                              7  0x00000007 (const dword)  (not used)
PWM_20KHZ                              8  0x00000008 (const dword)  (not used)
PWM_25KHZ                              9  0x00000009 (const dword)  (not used)
PWM_30KHZ                             10  0x0000000a (const dword)  (not used)
PWM_35KHZ                             11  0x0000000b (const dword)  (not used)
PWM_5KHZ                               5  0x00000005 (const dword)  (not used)
PWM_625HZ                              4  0x00000004 (const dword)  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         25108  0x00006214 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                  19583  0x00004c7frKeyboardRoutines                  19583  0x00004c7f (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigma\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (usage 24)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         25348  0x00006304 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           25431  0x00006357 (User func) args[1] r=0  (usage 15)
seroutOcs                          25398  0x00006336 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          0  0x00000000 (const dword)  (not used)
Strings0Size                           1  0x00000001 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                     12288  0x00003000 (const dword)  (usage 3)
Strings10Count                         0  0x00000000 (const dword)  (not used)
Strings10Size                          1  0x00000001 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                          7  0x00000007 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings12Count                         0  0x00000000 (const dword)  (not used)
Strings12Size                          1  0x00000001 (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     1536  0x00000600 (const dword)  (usage 3)
Strings13Count                         0  0x00000000 (const dword)  (not used)
Strings13Size                          1  0x00000001 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings14Count                         0  0x00000000 (const dword)  (not used)
Strings14Size                          1  0x00000001 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings15Size                          0  0x00000000 (const dword)  (not used)
Strings15StartH                        0  0x00000000 (const dword)  (not used)
Strings15StartL                        0  0x00000000 (const dword)  (not used)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     2560  0x00000a00 (const dword)  (usage 3)
Strings17Size                          0  0x00000000 (const dword)  (not used)
Strings17StartH                        0  0x00000000 (const dword)  (not used)
Strings17StartL                        0  0x00000000 (const dword)  (not used)
Strings18Size                          0  0x00000000 (const dword)  (not used)
Strings18StartH                        0  0x00000000 (const dword)  (not used)
Strings18StartL                        0  0x00000000 (const dword)  (not used)
Strings19Size                          0  0x00000000 (const dword)  (not used)
Strings19StartH                        0  0x00000000 (const dword)  (not used)
Strings19StartL                        0  0x00000000 (const dword)  (not used)
Strings1Count                          0  0x00000000 (const dword)  (not used)
Strings1Size                           1  0x00000001 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings20Size                          0  0x00000000 (const dword)  (not used)
Strings20StartH                        0  0x00000000 (const dword)  (not used)
Strings20StartL                        0  0x00000000 (const dword)  (not used)
Strings21Size                          0  0x00000000 (const dword)  (not used)
Strings21StartH                        0  0x00000000 (const dword)  (not used)
Strings21StartL                        0  0x00000000 (const dword)  (not used)
Strings22Size                          0  0x00000000 (const dword)  (not used)
Strings22StartH                        0  0x00000000 (const dword)  (not used)
Strings22StartL                        0  0x00000000 (const dword)  (not used)
Strings23Count                         0  0x00000000 (const dword)  (not used)
Strings23Size                          1  0x00000001 (const dword)  (usage 3)
Strings23StartH                        0  0x00000000 (const dword)  (usage 3)
Strings23StartL                     2048  0x00000800 (const dword)  (usage 3)
Strings24Size                          0  0x00000000 (const dword)  (not used)
Strings24StartH                        0  0x00000000 (const dword)  (not used)
Strings24StartL                        0  0x00000000 (const dword)  (not used)
Strings25Size                          0  0x00000000 (const dword)  (not used)
Strings25StartH                        0  0x00000000 (const dword)  (not used)
Strings25StartL                        0  0x00000000 (const dword)  (not used)
Strings26Size                          0  0x00000000 (const dword)  (not used)
Strings26StartH                        0  0x00000000 (const dword)  (not used)
Strings26StartL                        0  0x00000000 (const dword)  (not used)
Strings27Count                         0  0x00000000 (const dword)  (not used)
Strings27Size                          1  0x00000001 (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings28Size                          0  0x00000000 (const dword)  (not used)
Strings28StartH                        0  0x00000000 (const dword)  (not used)
Strings28StartL                        0  0x00000000 (const dword)  (not used)
Strings29Size                          0  0x00000000 (const dword)  (not used)
Strings29StartH                        0  0x00000000 (const dword)  (not used)
Strings29StartL                        0  0x00000000 (const dword)  (not used)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      3072  0x00000c00 (const dword)  (usage 3)
Strings30Size                          0  0x00000000 (const dword)  (not used)
Strings30StartH                        0  0x00000000 (const dword)  (not used)
Strings30StartL                        0  0x00000000 (const dword)  (not used)
Strings31Size                          0  0x00000000 (const dword)  (not used)
Strings31StartH                        0  0x00000000 (const dword)  (not used)
Strings31StartL                        0  0x00000000 (const dword)  (not used)
Strings32Size                          0  0x00000000 (const dword)  (not used)
Strings32StartH                        0  0x00000000 (const dword)  (not used)
Strings32StartL                        0  0x00000000 (const dword)  (not used)
Strings33Size                          0  0x00000000 (const dword)  (not used)
Strings33StartH                        0  0x00000000 (const dword)  (not used)
Strings33StartL                        0  0x00000000 (const dword)  (not used)
Strings34Size                          0  0x00000000 (const dword)  (not used)
Strings34StartH                        0  0x00000000 (const dword)  (not used)
Strings34StartL                        0  0x00000000 (const dword)  (not used)
Strings35Size                          0  0x00000000 (const dword)  (not used)
Strings35StartH                        0  0x00000000 (const dword)  (not used)
Strings35StartL                        0  0x00000000 (const dword)  (not used)
Strings36Size                          0  0x00000000 (const dword)  (not used)
Strings36StartH                        0  0x00000000 (const dword)  (not used)
Strings36StartL                        0  0x00000000 (const dword)  (not used)
Strings37Size                          0  0x00000000 (const dword)  (not used)
Strings37StartH                        0  0x00000000 (const dword)  (not used)
Strings37StartL                        0  0x00000000 (const dword)  (not used)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings3Count                          0  0x00000000 (const dword)  (not used)
Strings3Size                           1  0x00000001 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                         0  0x00000000 (const dword)  (usage 3)
Strings40Size                          0  0x00000000 (const dword)  (not used)
Strings40StartH                        0  0x00000000 (const dword)  (not used)
Strings40StartL                        0  0x00000000 (const dword)  (not used)
Strings41Size                          0  0x00000000 (const dword)  (not used)
Strings41StartH                        0  0x00000000 (const dword)  (not used)
Strings41StartL                        0  0x00000000 (const dword)  (not used)
Strings42Size                          0  0x00000000 (const dword)  (not used)
Strings42StartH                        0  0x00000000 (const dword)  (not used)
Strings42StartL                        0  0x00000000 (const dword)  (not used)
Strings43Size                          0  0x00000000 (const dword)  (not used)
Strings43StartH                        0  0x00000000 (const dword)  (not used)
Strings43StartL                        0  0x00000000 (const dword)  (not used)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings45Size                          0  0x00000000 (const dword)  (not used)
Strings45StartH                        0  0x00000000 (const dword)  (not used)
Strings45StartL                        0  0x00000000 (const dword)  (not used)
Strings46Size                          0  0x00000000 (const dword)  (not used)
Strings46StartH                        0  0x00000000 (const dword)  (not used)
Strings46StartL                        0  0x00000000 (const dword)  (not used)
Strings47Size                          0  0x00000000 (const dword)  (not used)
Strings47StartH                        0  0x00000000 (const dword)  (not used)
Strings47StartL                        0  0x00000000 (const dword)  (not used)
Strings48Count                         0  0x00000000 (const dword)  (not used)
Strings48Size                          1  0x00000001 (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         12  0x0000000c (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          12  0x0000000c (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                     12800  0x00003200 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings51Size                          0  0x00000000 (const dword)  (not used)
Strings51StartH                        0  0x00000000 (const dword)  (not used)
Strings51StartL                        0  0x00000000 (const dword)  (not used)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings53Count                         0  0x00000000 (const dword)  (not used)
Strings53Size                          1  0x00000001 (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings54Size                          0  0x00000000 (const dword)  (not used)
Strings54StartH                        0  0x00000000 (const dword)  (not used)
Strings54StartL                        0  0x00000000 (const dword)  (not used)
Strings55Count                         0  0x00000000 (const dword)  (not used)
Strings55Size                          1  0x00000001 (const dword)  (usage 3)
Strings55StartH                        0  0x00000000 (const dword)  (usage 3)
Strings55StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings5Count                          0  0x00000000 (const dword)  (not used)
Strings5Size                           1  0x00000001 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     11264  0x00002c00 (const dword)  (usage 3)
Strings6Count                          0  0x00000000 (const dword)  (not used)
Strings6Size                           1  0x00000001 (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                     11776  0x00002e00 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      3584  0x00000e00 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      4096  0x00001000 (const dword)  (usage 3)
stringsCV                            114  0x00000072 (mem) word[56] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 324)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 12)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 6)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 6)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 6)
tMagicObject                          34  0x00000022 (const dword)  (usage 6)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
TMul                               25294  0x000062ce (User func) args[3] r=0  (usage 6)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           316  0x0000013c (mem) word (global)  (usage 24)
TouchXpos                            310  0x00000136 (mem) word (global)  (usage 15)
TouchYpos                            312  0x00000138 (mem) word (global)  (usage 12)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSmartGauge                           35  0x00000023 (const dword)  (usage 6)
tSmartKnob                            37  0x00000025 (const dword)  (usage 6)
tSmartSlider                          36  0x00000024 (const dword)  (usage 12)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 6)
TurnOffButtons                     24244  0x00005eb4 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 729)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 12)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 12)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      22897  0x00005971 (User func) args[1] r=0  (usage 6)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 6)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        24462  0x00005f8e (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
